# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T18:47:53+00:00



import argparse
import json
import os
from typing import *
from typing import Optional, Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity, UnsuportedSecurityStub

from models import (
    ApiAllergiesGetResponse,
    ApiAmendmentsGetResponse,
    ApiAppointmentProfilesGetResponse,
    ApiAppointmentsGetResponse,
    ApiAppointmentTemplatesGetResponse,
    ApiBillingProfilesGetResponse,
    ApiCarePlansGetResponse,
    ApiCareTeamMembersGetResponse,
    ApiClaimBillingNotesGetResponse,
    ApiClinicalNoteFieldTypesGetResponse,
    ApiClinicalNoteFieldValuesGetResponse,
    ApiClinicalNotesGetResponse,
    ApiClinicalNoteTemplatesGetResponse,
    ApiCommLogsGetResponse,
    ApiConsentFormsGetResponse,
    ApiCustomAppointmentFieldsGetResponse,
    ApiCustomDemographicsGetResponse,
    ApiCustomInsurancePlanNamesGetResponse,
    ApiCustomVitalsGetResponse,
    ApiDoctorsGetResponse,
    ApiDocumentsGetResponse,
    ApiEligibilityChecksGetResponse,
    ApiEobsGetResponse,
    ApiFeeSchedulesGetResponse,
    ApiImplantableDevicesGetResponse,
    ApiInsurancesGetResponse,
    ApiInventoryCategoriesGetResponse,
    ApiInventoryVaccinesGetResponse,
    ApiLabDocumentsGetResponse,
    ApiLabOrdersGetResponse,
    ApiLabOrdersSummaryGetResponse,
    ApiLabResultsGetResponse,
    ApiLabTestsGetResponse,
    ApiLineItemsGetResponse,
    ApiMedicationsGetResponse,
    ApiMessagesGetResponse,
    ApiOfficesGetResponse,
    ApiPatientCommunicationsGetResponse,
    ApiPatientFlagTypesGetResponse,
    ApiPatientInterventionsGetResponse,
    ApiPatientLabResultsGetResponse,
    ApiPatientMessagesGetResponse,
    ApiPatientPaymentLogGetResponse,
    ApiPatientPaymentsGetResponse,
    ApiPatientPhysicalExamsGetResponse,
    ApiPatientRiskAssessmentsGetResponse,
    ApiPatientsGetResponse,
    ApiPatientsIdCcdaGetResponse,
    ApiPatientsIdQrda1GetResponse,
    ApiPatientsSummaryGetResponse,
    ApiPatientVaccineRecordsGetResponse,
    ApiPrescriptionMessagesGetResponse,
    ApiProblemsGetResponse,
    ApiProceduresGetResponse,
    ApiReminderProfilesGetResponse,
    ApiSublabsGetResponse,
    ApiTaskCategoriesGetResponse,
    ApiTaskNotesGetResponse,
    ApiTasksGetResponse,
    ApiTaskStatusesGetResponse,
    ApiTaskTemplatesGetResponse,
    ApiTransactionsGetResponse,
    ApiUserGroupsGetResponse,
    ApiUsersGetResponse,
    Appointment,
    AppointmentProfile,
    AppointmentTemplate,
    BillingLineItem,
    BillingProfile,
    CarePlan,
    CareTeamMember,
    CashPayment,
    CashPaymentLog,
    ClaimBillingNotes,
    ClinicalNote1,
    ConsentForm,
    Coverage,
    CustomAppointmentFieldType,
    CustomInsurancePlanName,
    CustomPatientFieldType,
    CustomVitalType,
    Doctor,
    DoctorFeeSchedule,
    DoctorMessage,
    EOBObject,
    ImplantableDevice,
    Insurance,
    InventoryCategory,
    InventoryVaccine,
    LabOrder,
    LabOrderDocument,
    LabResult,
    LabTest,
    LabVendorLocation,
    LineItemTransaction,
    Office,
    Patient,
    PatientAllergy,
    PatientAmendment,
    PatientCommunication,
    PatientDrug,
    PatientFlagType,
    PatientIntervention,
    PatientLabResultSet,
    PatientMessage,
    PatientPhysicalExam,
    PatientProblem,
    PatientRiskAssessment,
    PatientVaccineRecord,
    PhoneCallLog,
    PrescriptionMessage,
    ReminderProfile,
    ScannedClinicalDocument,
    SoapNoteCustomReport,
    SoapNoteLineItemFieldType,
    SoapNoteLineItemFieldValue,
    Task,
    TaskCategory,
    TaskNote,
    TaskStatus,
    TaskTemplate,
    UserProfile,
    UserProfilesGroup,
)

app = MCPProxy(
    description='This document is intended as a detailed reference for the precise behavior of\nthe drchrono API. If this is your first time using the API, start with our <a href="/api-docs-old/tutorial">tutorial</a>. If you are upgrading from a previous version, take a look at the changelog section.\n\n# Authorization\n\n## Initial authorization\n\nThere are three main steps in the OAuth 2.0 authentication workflow:\n\n1. Redirect the provider to the authorization page.\n2. The provider authorizes your application and is redirected back to\n   your web application.\n3. Your application exchanges the `authorization_code` that came with\n   the redirect for an `access_token` and `refresh_token`.\n\n### Step 1: Redirect to drchrono\n\nThe first step is redirecting your user to drchrono, typically with a button\nlabeled "Connect to drchrono" or "Login with drchrono".  This is just a link that\ntakes your user to the following URL:\n\n    https://drchrono.com/o/authorize/?redirect_uri=REDIRECT_URI_ENCODED&response_type=code&client_id=CLIENT_ID_ENCODED&scope=SCOPES_ENCODED\n\n- `REDIRECT_URI_ENCODED` is the URL-encoded version of the redirect URI (as registered for your application and used in later steps).\n- `CLIENT_ID_ENCODED` is the URL-encoded version of your application\'s client ID.\n- `SCOPES_ENCODED` is a URL-encoded version of a space-separated list of scopes, which can be found in each endpoint or omitted to default to all scopes.\n\nThe `scope` parameter consists of an optional, space-separated list of scopes your application is requesting.\nIf omitted, all scopes will be requested.\n\nScopes are of the form `BASE_SCOPE:[read|write]` where `BASE_SCOPE` is any of `user`, `calendar`, `patients`, `patients:summary`, `billing`, `clinical` and `labs`.\nYou should request only the scopes you need.\nFor instance, an application which sends "Happy Birthday!" emails to a doctor\'s patients on their birthdays would use the scope parameter `"patients:summary:read"`,\nwhile one that allows patients to schedule appointments online would need at least\n`"patients:summary:read patients:summary:write calendar:read calendar:write clinical:read clinical:write"`.\n\n### Step 2: Provider authorization\n\nAfter logging in (if necessary), the provider will be presented with a screen\nwith your application\'s name and the list of permissions you requested (via the\n`scope` parameter).\n\nWhen they click the "Authorize" button, they will be redirected to your redirect\nURI with a `code` query parameter appended, which contains an authorization code to be\nused in step 3.  If they click the "Cancel" button, they will be redirected to\nyour redirect URI with `error=access_denied` instead.\n\nNote: This authorization code expires extremely quickly, so you must perform\nstep 3 immediately, ideally before rendering the resulting page for the end\nuser.\n\n### Step 3: Token exchange\n\nThe `code` obtained from step 2 is usable exactly once to obtain an access token\nand refresh token.  Here is an example token exchange in Python:\n\n    import datetime, pytz, requests\n\n    if \'error\' in get_params:\n        raise ValueError(\'Error authorizing application: %s\' % get_params[error])\n\n    response = requests.post(\'https://drchrono.com/o/token/\', data={\n        \'code\': get_params[\'code\'],\n        \'grant_type\': \'authorization_code\',\n        \'redirect_uri\': \'http://mytestapp.com/redirect_uri\',\n        \'client_id\': \'abcdefg12345\',\n        \'client_secret\': \'abcdefg12345\',\n    })\n    response.raise_for_status()\n    data = response.json()\n\n    # Save these in your database associated with the user\n    access_token = data[\'access_token\']\n    refresh_token = data[\'refresh_token\']\n    expires_timestamp = datetime.datetime.now(pytz.utc) + datetime.timedelta(seconds=data[\'expires_in\'])\n\nYou now have all you need to make API requests authenticated as that provider.\nWhen using this access token, you\'ll only be able to access the data that the\nuser has access to and that you have been granted permissions for.\n\n## Refreshing an access token\n\nAccess tokens only last 48 hours (given in seconds in the `\'expires_in\'` key in\nthe token exchange step above), so they occasionally need to be refreshed.  It\nwould be inconvenient to ask the user to re-authorize every time, so instead you\ncan use the refresh token like the original authorization to obtain a new access\ntoken.  Replace the `code` parameter with `refresh_token`, change the value\n`grant_type` from `authorization_code` to `refresh_token`, and omit the\n`redirect_uri` parameter.\n\nExample in Python:\n\n    ...\n    response = requests.post(\'https://drchrono.com/o/token/\', data={\n        \'refresh_token\': get_refresh_token(),\n        \'grant_type\': \'refresh_token\',\n        \'client_id\': \'abcdefg12345\',\n        \'client_secret\': \'abcdefg12345\',\n    })\n    ...\n\n# Webhooks\n\nIn order to use drchrono API webhooks, you first need to have an API application on file\n(even if it is in Test Model).\nEach API webhook is associated with one API application, go to\n<a href="/api-management/" target="_blank">here</a> to set up both API applications and webhooks!\n\nOnce you registered an API application, you will see webhook section in each saved API applications.\nCreate a webhook and register some events there and save all the changes, then you are good to go!\n\n## Webhooks setup\n\nAll fields under webhooks section are required.\n\n**Callback URL**\nCallback URl is used to receive all hooks when subscribed events are triggered. This should be an URL under your control.\n\n**Secret token**\nSecret token is used to verify webhooks, this is very important, please set something with high entropy. Also we will\ntalk more about this later.\n\n**Events**\n\nEvents is used to register events you want to receiver notification when they happen. Currently we support following events.\n\nEvent name | Event description\n---------- | -----------------\n`APPOINTMENT_CREATE` | We will deliver a hook any time an appointment is created\n`APPOINTMENT_MODIFY` | We will deliver a hook any time an appointment is modified\n`PATIENT_CREATE` | We will deliver a hook any time a patient is created\n`PATIENT_MODIFY` | We will deliver a hook any time a patient is modified\n`PATIENT_PROBLEM_CREATE` | We will deliver a hook any time a patient problem is created\n`PATIENT_PROBLEM_MODIFY` | We will deliver a hook any time a patient problem is modified\n`PATIENT_ALLERGY_CREATE` | We will deliver a hook any time a patient allergy is created\n`PATIENT_ALLERGY_MODIFY` | We will deliver a hook any time a patient allergy is modified\n`PATIENT_MEDICATION_CREATE` | We will deliver a hook any time a patient medication is created\n`PATIENT_MEDICATION_MODIFY` | We will deliver a hook any time a patient medication is modified\n`CLINICAL_NOTE_LOCK` | We will deliver a hook any time a clinical note is locked\n`CLINICAL_NOTE_UNLOCK` | We will deliver a hook any time a clinical note is unlocked\n`TASK_CREATE` | We will deliver a hook any time a task is created\n`TASK_MODIFY` | We will deliver a hook any time a task is modified and any time creation, modification and deletion of task notes, associated task item\n`TASK_DELETE` | We will deliver a hook any time a task is deleted\n\n\n## Webhooks verification\n\nIn order to make sure the callback URL in webhook is under your control, we added a verification\nstep before we send any hooks out to you.\n\nVerification can be done by clicking "Verify webhook" button in webhooks setup page. After you click\nthe button, we will send a `GET` request to the callback URL, along with a parameter called `msg`.\n\nPlease use your webhook\'s secret token as hash key and SHA-256 as digest constructor, hash the `msg` value with\n<a href="https://tools.ietf.org/html/rfc2104.html">HMAC algorithm</a>.\nAnd we expect a `200` JSON response, in JSON response body, there should be a key called `secret_token` existing, and its value should be\nequal to the <strong>hashed</strong> `msg`. Otherwise, verification will fail.\n\nHere is an example webhook verification in Python:\n\n    import hashlib, hmac\n\n    def webhook_verify(request):\n        secret_token = hmac.new(WEBHOOK_SECRET_TOKEN, request.GET[\'msg\'], hashlib.sha256).hexdigest()\n        return json_response({\n            \'secret_token\': secret_token\n        })\n\n<div class="alert alert-warning">\n<b>Note:</b> Verification will be needed when webhook is first created and anytime callback URl is changed.\n</div>\n\n\n## Webhooks header and body\n\n**Header**\n\nKey | Value\n--- | -----\n`X-drchrono-event` | Event that triggered this hook, could be any one event above or `PING`\n`X-drchrono-signature` | Secret token associated with this webhook\n`X-drchrono-delivery` | ID of this delivery\n\n**Body**\n\nKey | Value\n--- | -----\n`receiver` | This will be an JSON representation of the webhook\n`object` | This will be an JSON representation of the object related to the triggered event, this would share same serializer as drchrono API\n\n## Webhooks ping and deliveries\n\nWebhooks ping and deliveries will be sent as `POST` requests.\n\n**PING**:\n\nYou can always ping your webhook to check things, by clicking the "Ping webhook" button in webhook setup page. And a hook with header `X-drchrono-event: PING` would be sent to the callback URL.\n\n**Deliveries**:\n\nYou can check recent deliveries by clicking the "deliveries" link in webhook setup page. And you can resend a hook by clicking "redeliver" button after select a specific delivery.\n\n## Webhooks delivery mechanism\n\nWe will delivery a hook the moment a subscribed event is triggered. We will not record any response header or body you send back after you receive the hook.\nHowever we only consider the response status code. We will consider any `2xx` responses as successfully delivered.\nAny other responses, like `302` would be considered failing.\nAnd we will try to redeliver unsuccessfully delivered hooks 3 times, first redeliver happens at 1 hour after the initial event,\nsecond receliver happens 3 hours after the initial event, and the third redeliver happens 7 hours after the initial event.\nAfter these redeliveries, if the delivery is still unsuccessful, you have to redeliver it by hand.\n\n\n## Webhooks security\n\nYou may want to secure your webhooks to only consider requests send out from drchrono. And this is where <code>secret_token</code> is needed in\nrequest header.\nTry to set the <code>secret_token</code> to something with high entropy, a good example could be taking the output of\n<code>ruby -rsecurerandom -e \'puts SecureRandom.hex(20)\'</code>.\nAfter this, you might want to verify all request headers you received on your server with this token.\n\n\n# iframe integration\n\nSome API apps provide additional functionality for interacting with patient data\nnot offered by drchrono, and can benefit by being incorporated into drchrono\'s\npatient information page via iframe.  We have created a simple API to make this\npossible.\n\nTo make an existing API application accessible via an iframe on the patient\npage, you need to update either "Patient iframe" or "Clinical note iframe" section in API management page,\nto make the iframe to appear on (either the patient page or the clinical note page),\nwith the URL that the iframe will use for each page, and the height it should\nhave. The application will be reviewed before it is approved to ensure that it\nis functional and secure.\n\n## Register a Doctor\n\niframe applications will appear as choices on the left-hand menu of the patient\npage for doctors registered with your application.  To register a doctor with\nyour application, make a `POST` request to the `/api/iframe_integration`\nendpoint using the access token for the corresponding doctor. This endpoint does not\nexpect any payload.\n\nTo disable your iframe application for a doctor, make a `DELETE` request to the\nsame endpoint.\n\n## Populating the iframe\n\nThere are two places where the iframe can be displayed, either within the\npatient detail page or the clinical note page, shown below respectively:\n\n<img src="{% asset \'public/images/iframe_patient_page.png\' %}" alt="Iframe on the patient page"/>\n\n<img src="{% asset \'public/images/iframe_clinical_note.png\' %}" alt="Iframe on the clinical note page"/>\n\nWhen requesting approval for your iframe app, you must specify a URL for one or\nboth of these pages which will serve as the base URL for your IFrame\ncontents. When a doctor views your iframe, the source URL will have various\nquery parameters appended to it, for example for the patient page the `src`\nparameter of the IFrame will be:\n\n```\n<iframe_url>?doctor_id=<doctor_id>&patient_id=<patient_id>&practice_id=<practice_id>&iat=<iat>&jwt=<jwt>\n```\n\nThe `jwt` parameter is crucial if your application transfers any sort of PHI and\ndoes not implement its own login system.  It encapsulates the other parameters\nin a [JSON web token (JWT)](http://jwt.io) and signs them using SHA-256 HMAC\nwith your `client_secret` as the key.  This verifies that the iframe is being\nloaded within one of drchrono\'s pages by an authorized user.  In production, you\nshould validate the JWT using an approved library (which are listed on the\n[official site](http://jwt.io)), and only use the parameters extracted from the\nJWT.  Using Python and Django, this might look like:\n\n    import jwt\n\n    CLIENT_SECRET = <client_secret>\n    MAX_TIME_DRIFT_SECONDS = 60\n\n    def validate_parameters(request):\n        token = request.GET[\'jwt\']\n\n        return jwt.decode(token, CLIENT_SECRET, algorithms=[\'HS256\'], leeway=MAX_TIME_DRIFT_SECONDS)\n\nModern browsers\' same-origin policy means that data cannot be passed between\nyour application and drchrono\'s page through the iframe.  Therefore, interaction\nmust happen through the API, using information provided in JWT.\n\n# Versions and deprecation\n\n## Stability Policy\n\nChanges to this API version will be limited to adding endpoints, or adding fields to existing\nendpoints, or adding optional query parameters. Any new fields which are not read-only will be optional.\n\n## Deprecation Policy\n\nThe drchrono API is versioned. Versions can be in the following states:\n\n* **Active:** This is our latest and greatest version of the API. It is actively supported by\nour API team and is improved upon with new features, bug fixes and optimizations that do\nnot break backwards compatibility.\n\n* **Deprecated:** A deprecated API version is considered second best--having been\nsurpassed by our active API version. An API version remains in this state for one year,\nafter which time it falls to the not supported state. A deprecated API version is passively supported;\nwhile it won\'t be removed until becoming unsupported, it may not receive new features but will likely\nbe subject to security updates and performance improvements.\n\n* **Unsupported:** An API version in the not supported state may be deactivated at any\ntime. An application using an unsupported API version should migrate to an active API version.\n\n## Version Map\n| Version Name | Previous Name | Start Date | Deprecation Date |\n|--------------|---------------|------------|------------------|\n| v2           | v2015_08      | 08/2015    | TBA              |\n| v3           | v2016_06      | 06/2016    |                  |\n| v4           | N/A           | 09/2018    |                  |\n\nIf you are looking for documentation for an older version\n\n- [V4(Hunt Valley)](/api-docs-old/v4/documentation) (old V4 documentation)\n- [V3(Sunnyvale)](/api-docs-old/v3/documentation)\n- [V2(Mountain View)](/api-docs-old/v2/documentation)\n\n# Changelog\n\nHere\'s changelog for different versions\n\n- [V4 Changelog](/api-docs-old/v4/changelog)\n- [V3 changelog](/api-docs-old/v3/changelog)\n\n',
    title='',
    version='v4 (Hunt Valley)',
    servers=[{'url': 'https://app.drchrono.com'}],
)


@app.get(
    '/api/allergies',
    description=""" Retrieve or search patient allergies """,
    tags=['appointments_management', 'patient_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def allergies_list(
    cursor: Optional[str] = None,
    page_size: Optional[int] = None,
    patient: Optional[int] = None,
    doctor: Optional[int] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/allergies',
    description=""" Create patient allergy """,
    tags=['patient_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def allergies_create(patient: Optional[int] = None, doctor: Optional[int] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/allergies/{id}',
    description=""" Retrieve an existing patient allergy """,
    tags=['patient_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def allergies_read(
    id: str, patient: Optional[int] = None, doctor: Optional[int] = None
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/api/allergies/{id}',
    description=""" Update an existing patient allergy """,
    tags=['user_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def allergies_partial_update(
    id: str, patient: Optional[int] = None, doctor: Optional[int] = None
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/allergies/{id}',
    description=""" Update an existing patient allergy """,
    tags=['patient_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def allergies_update(
    id: str, patient: Optional[int] = None, doctor: Optional[int] = None
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/amendments',
    description=""" Retrieve or search patient amendments. You can only interact with amendments created by your API application """,
    tags=['appointments_management', 'appointment_management', 'patient_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def amendments_list(
    cursor: Optional[str] = None,
    page_size: Optional[int] = None,
    appointment: Optional[int] = None,
    patient: Optional[int] = None,
    doctor: Optional[int] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/amendments',
    description=""" Create patient amendments to a patient's clinical records """,
    tags=['appointments_management', 'appointment_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def amendments_create(
    appointment: Optional[int] = None,
    patient: Optional[int] = None,
    doctor: Optional[int] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/amendments/{id}',
    description=""" Delete an existing patient amendment, you can only interact with amendments created by your API application """,
    tags=['appointments_management', 'appointment_management', 'amendments_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def amendments_delete(
    id: str,
    appointment: Optional[int] = None,
    patient: Optional[int] = None,
    doctor: Optional[int] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/amendments/{id}',
    description=""" Retrieve an existing patient amendment, you can only interact with amendments created by your API application """,
    tags=['appointments_management', 'appointment_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def amendments_read(
    id: str,
    appointment: Optional[int] = None,
    patient: Optional[int] = None,
    doctor: Optional[int] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/api/amendments/{id}',
    description=""" Update an existing patient amendment, you can only interact with amendments created by your API application """,
    tags=['appointments_management', 'appointment_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def amendments_partial_update(
    id: str,
    appointment: Optional[int] = None,
    patient: Optional[int] = None,
    doctor: Optional[int] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/amendments/{id}',
    description=""" Update an existing patient amendment, you can only interact with amendments created by your API application """,
    tags=['appointments_management', 'appointment_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def amendments_update(
    id: str,
    appointment: Optional[int] = None,
    patient: Optional[int] = None,
    doctor: Optional[int] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/appointment_profiles',
    description=""" Retrieve or search appointment profiles for a doctor's calendar """,
    tags=['appointment_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def appointment_profiles_list(
    cursor: Optional[str] = None,
    page_size: Optional[int] = None,
    doctor: Optional[int] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/appointment_profiles',
    description=""" Create appointment profiles for a doctor's calendar """,
    tags=['doctor_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def appointment_profiles_create(doctor: Optional[int] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/appointment_profiles/{id}',
    description=""" Delete an existing appointment profile """,
    tags=['doctor_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def appointment_profiles_delete(id: str, doctor: Optional[int] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/appointment_profiles/{id}',
    description=""" Retrieve an existing appointment profile """,
    tags=['appointment_management', 'appointments_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def appointment_profiles_read(id: str, doctor: Optional[int] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/api/appointment_profiles/{id}',
    description=""" Update an existing appointment profile """,
    tags=['doctor_management', 'appointments_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def appointment_profiles_partial_update(id: str, doctor: Optional[int] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/appointment_profiles/{id}',
    description=""" Update an existing appointment profile """,
    tags=['appointment_management', 'appointment_profiles_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def appointment_profiles_update(id: str, doctor: Optional[int] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/appointment_templates',
    description=""" Retrieve or search appointment templates for a doctor's calendar """,
    tags=['appointment_profiles_management', 'appointment_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def appointment_templates_list(
    cursor: Optional[str] = None,
    page_size: Optional[int] = None,
    profile: Optional[int] = None,
    office: Optional[int] = None,
    doctor: Optional[int] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/appointment_templates',
    description=""" Create appointment templates for a doctor's calendar """,
    tags=['appointment_profiles_management', 'doctor_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def appointment_templates_create(
    profile: Optional[int] = None,
    office: Optional[int] = None,
    doctor: Optional[int] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/appointment_templates/{id}',
    description=""" Delete an existing appointment template """,
    tags=['appointment_profiles_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def appointment_templates_delete(
    id: str,
    profile: Optional[int] = None,
    office: Optional[int] = None,
    doctor: Optional[int] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/appointment_templates/{id}',
    description=""" Retrieve an existing appointment template """,
    tags=['appointment_profiles_management', 'doctor_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def appointment_templates_read(
    id: str,
    profile: Optional[int] = None,
    office: Optional[int] = None,
    doctor: Optional[int] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/api/appointment_templates/{id}',
    description=""" Update an existing appointment template """,
    tags=['appointment_profiles_management', 'doctor_management', 'patient_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def appointment_templates_partial_update(
    id: str,
    profile: Optional[int] = None,
    office: Optional[int] = None,
    doctor: Optional[int] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/appointment_templates/{id}',
    description=""" Update an existing appointment template """,
    tags=['appointment_profiles_management', 'doctor_management', 'patient_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def appointment_templates_update(
    id: str,
    profile: Optional[int] = None,
    office: Optional[int] = None,
    doctor: Optional[int] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/appointments',
    description=""" Retrieve or search appointment or breaks.
<b>Note:</b> Either `since`, `date` or `date_range` parameter must be specified.
             """,
    tags=['appointments_management', 'appointment_management', 'patient_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def appointments_list(
    cursor: Optional[str] = None,
    page_size: Optional[int] = None,
    status: Optional[str] = None,
    patient: Optional[int] = None,
    office: Optional[int] = None,
    doctor: Optional[int] = None,
    since: Optional[str] = None,
    date_range: Optional[str] = None,
    date: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/appointments',
    description=""" Create a new appointment or break on doctor's calendar """,
    tags=[
        'appointments_management',
        'appointment_management',
        'appointment_profiles_management',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def appointments_create(
    status: Optional[str] = None,
    patient: Optional[int] = None,
    office: Optional[int] = None,
    doctor: Optional[int] = None,
    since: Optional[str] = None,
    date_range: Optional[str] = None,
    date: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/appointments/{id}',
    description=""" Delete an existing appointment or break """,
    tags=['appointments_management', 'appointment_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def appointments_delete(
    id: str,
    status: Optional[str] = None,
    patient: Optional[int] = None,
    office: Optional[int] = None,
    doctor: Optional[int] = None,
    since: Optional[str] = None,
    date_range: Optional[str] = None,
    date: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/appointments/{id}',
    description=""" Retrieve an existing appointment or break """,
    tags=['appointments_management', 'appointment_management', 'patient_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def appointments_read(
    id: str,
    status: Optional[str] = None,
    patient: Optional[int] = None,
    office: Optional[int] = None,
    doctor: Optional[int] = None,
    since: Optional[str] = None,
    date_range: Optional[str] = None,
    date: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/api/appointments/{id}',
    description=""" Update an existing appointment or break """,
    tags=['appointments_management', 'appointment_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def appointments_partial_update(
    id: str,
    status: Optional[str] = None,
    patient: Optional[int] = None,
    office: Optional[int] = None,
    doctor: Optional[int] = None,
    since: Optional[str] = None,
    date_range: Optional[str] = None,
    date: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/appointments/{id}',
    description=""" Update an existing appointment or break """,
    tags=['appointments_management', 'appointment_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def appointments_update(
    id: str,
    status: Optional[str] = None,
    patient: Optional[int] = None,
    office: Optional[int] = None,
    doctor: Optional[int] = None,
    since: Optional[str] = None,
    date_range: Optional[str] = None,
    date: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/billing_profiles',
    description=""" Retrieve or search billing profiles """,
    tags=[
        'appointments_management',
        'appointment_profiles_management',
        'appointment_management',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def billing_profiles_list(
    cursor: Optional[str] = None,
    page_size: Optional[int] = None,
    doctor: Optional[int] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/billing_profiles/{id}',
    description=""" Retrieve an existing billing profiles """,
    tags=['doctor_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def billing_profiles_read(id: str, doctor: Optional[int] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/care_plans',
    description=""" Retrieve or search care plans """,
    tags=['care_plans_management', 'patient_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def care_plans_list(
    cursor: Optional[str] = None,
    page_size: Optional[int] = None,
    patient: Optional[int] = None,
    plan_type: Optional[int] = None,
    doctor: Optional[int] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/care_plans/{id}',
    description=""" Retrieve an existing care plan """,
    tags=['care_plans_management', 'patient_management', 'appointments_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def care_plans_read(
    id: str,
    patient: Optional[int] = None,
    plan_type: Optional[int] = None,
    doctor: Optional[int] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/care_team_members',
    tags=['appointments_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def care_team_members_list(
    cursor: Optional[str] = None,
    page_size: Optional[int] = None,
    patient: Optional[int] = None,
    appointment: Optional[int] = None,
    doctor: Optional[int] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/care_team_members/{id}',
    tags=['appointments_management', 'appointment_management', 'patient_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def care_team_members_read(
    id: str,
    patient: Optional[int] = None,
    appointment: Optional[int] = None,
    doctor: Optional[int] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/claim_billing_notes',
    description=""" Retrieve or search billing notes """,
    tags=['appointments_management', 'appointment_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def claim_billing_notes_list(
    cursor: Optional[str] = None,
    page_size: Optional[int] = None,
    appointment: Optional[int] = None,
    doctor: Optional[int] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/claim_billing_notes',
    description=""" Create a new billing note """,
    tags=[
        'appointment_management',
        'appointments_management',
        'appointment_profiles_management',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def claim_billing_notes_create(
    appointment: Optional[int] = None, doctor: Optional[int] = None
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/claim_billing_notes/{id}',
    description=""" Retrieve an existing billing note """,
    tags=['appointments_management', 'appointment_management', 'amendments_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def claim_billing_notes_read(
    id: str, appointment: Optional[int] = None, doctor: Optional[int] = None
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/clinical_note_field_types',
    description=""" Retrieve or search clinical note field types """,
    tags=['clinical_notes_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def clinical_note_field_types_list(
    cursor: Optional[str] = None,
    page_size: Optional[int] = None,
    clinical_note_template: Optional[int] = None,
    doctor: Optional[int] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/clinical_note_field_types/{id}',
    description=""" Retrieve an existing clinial note field type """,
    tags=['clinical_notes_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def clinical_note_field_types_read(
    id: str, clinical_note_template: Optional[int] = None, doctor: Optional[int] = None
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/clinical_note_field_values',
    description=""" Retrieve or search clinical note field values """,
    tags=['clinical_notes_management', 'appointments_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def clinical_note_field_values_list(
    cursor: Optional[str] = None,
    page_size: Optional[int] = None,
    clinical_note_field: Optional[int] = None,
    since: Optional[str] = None,
    appointment: Optional[int] = None,
    clinical_note_template: Optional[int] = None,
    doctor: Optional[int] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/clinical_note_field_values',
    description=""" Create clinical note field value """,
    tags=['clinical_notes_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def clinical_note_field_values_create(
    clinical_note_field: Optional[int] = None,
    since: Optional[str] = None,
    appointment: Optional[int] = None,
    clinical_note_template: Optional[int] = None,
    doctor: Optional[int] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/clinical_note_field_values/{id}',
    description=""" Retrieve an existing clinical note field value """,
    tags=['clinical_notes_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def clinical_note_field_values_read(
    id: str,
    clinical_note_field: Optional[int] = None,
    since: Optional[str] = None,
    appointment: Optional[int] = None,
    clinical_note_template: Optional[int] = None,
    doctor: Optional[int] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/api/clinical_note_field_values/{id}',
    description=""" Update an existing clinical note field value """,
    tags=['clinical_notes_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def clinical_note_field_values_partial_update(
    id: str,
    clinical_note_field: Optional[int] = None,
    since: Optional[str] = None,
    appointment: Optional[int] = None,
    clinical_note_template: Optional[int] = None,
    doctor: Optional[int] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/clinical_note_field_values/{id}',
    description=""" Update an existing clinical note field value """,
    tags=['clinical_notes_management', 'appointments_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def clinical_note_field_values_update(
    id: str,
    clinical_note_field: Optional[int] = None,
    since: Optional[str] = None,
    appointment: Optional[int] = None,
    clinical_note_template: Optional[int] = None,
    doctor: Optional[int] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/clinical_note_templates',
    description=""" Retrieve or search clinical note templates """,
    tags=['appointment_profiles_management', 'doctor_management', 'patient_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def clinical_note_templates_list(
    cursor: Optional[str] = None,
    page_size: Optional[int] = None,
    doctor: Optional[int] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/clinical_note_templates/{id}',
    description=""" Retrieve an existing clinical note tempalte """,
    tags=['appointment_management', 'appointments_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def clinical_note_templates_read(id: str, doctor: Optional[int] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/clinical_notes',
    tags=['appointments_management', 'appointment_management', 'patient_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def clinical_notes_list(
    cursor: Optional[str] = None,
    page_size: Optional[int] = None,
    patient: Optional[int] = None,
    office: Optional[int] = None,
    doctor: Optional[int] = None,
    since: Optional[str] = None,
    date_range: Optional[str] = None,
    date: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/clinical_notes/{id}',
    tags=[
        'appointments_management',
        'appointment_management',
        'appointment_profiles_management',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def clinical_notes_read(
    id: str,
    patient: Optional[int] = None,
    office: Optional[int] = None,
    doctor: Optional[int] = None,
    since: Optional[str] = None,
    date_range: Optional[str] = None,
    date: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/comm_logs',
    description=""" Retrieve or search communicatioin (phone call) logs """,
    tags=['appointments_management', 'patient_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def comm_logs_list(
    cursor: Optional[str] = None,
    page_size: Optional[int] = None,
    since: Optional[str] = None,
    patient: Optional[int] = None,
    doctor: Optional[int] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/comm_logs',
    description=""" Create communication (phone call) logs """,
    tags=['patient_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def comm_logs_create(
    since: Optional[str] = None,
    patient: Optional[int] = None,
    doctor: Optional[int] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/comm_logs/{id}',
    description=""" Retrieve an existing communication (phone call) logs """,
    tags=['patient_management', 'appointments_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def comm_logs_read(
    id: str,
    since: Optional[str] = None,
    patient: Optional[int] = None,
    doctor: Optional[int] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/api/comm_logs/{id}',
    description=""" Update an existing communication (phone call) logs """,
    tags=['appointments_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def comm_logs_partial_update(
    id: str,
    since: Optional[str] = None,
    patient: Optional[int] = None,
    doctor: Optional[int] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/comm_logs/{id}',
    description=""" Update an existing communication (phone call) logs """,
    tags=['appointment_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def comm_logs_update(
    id: str,
    since: Optional[str] = None,
    patient: Optional[int] = None,
    doctor: Optional[int] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/consent_forms',
    description=""" Retrieve or search patient consent forms """,
    tags=['appointment_management', 'appointments_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def consent_forms_list(
    cursor: Optional[str] = None,
    page_size: Optional[int] = None,
    doctor: Optional[int] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/consent_forms',
    description=""" Create a patient consent form """,
    tags=['doctor_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def consent_forms_create(doctor: Optional[int] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/consent_forms/{id}',
    description=""" Retrieve an existing patient consent form """,
    tags=['doctor_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def consent_forms_read(id: str, doctor: Optional[int] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/api/consent_forms/{id}',
    description=""" Update an existing patient consent form """,
    tags=['doctor_management', 'patient_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def consent_forms_partial_update(id: str, doctor: Optional[int] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/consent_forms/{id}',
    description=""" Update an existing patient consent form """,
    tags=['doctor_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def consent_forms_update(id: str, doctor: Optional[int] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/consent_forms/{id}/apply_to_appointment',
    description=""" Assign (apply) a consent form to appointment """,
    tags=['doctor_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def consent_forms_apply_to_appointment(id: str, doctor: Optional[int] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/consent_forms/{id}/unapply_from_appointment',
    description=""" Unassign (unapply) a consent form from appointment """,
    tags=['doctor_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def consent_forms_unapply_from_appointment(id: str, doctor: Optional[int] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/custom_appointment_fields',
    description=""" Retrieve or search custom appointment fields """,
    tags=['appointments_management', 'appointment_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def custom_appointment_fields_list(
    cursor: Optional[str] = None,
    page_size: Optional[int] = None,
    doctor: Optional[int] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/custom_appointment_fields',
    description=""" Create custom appointment fields """,
    tags=['doctor_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def custom_appointment_fields_create(doctor: Optional[int] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/custom_appointment_fields/{id}',
    description=""" Retrieve an existing custom appointment field """,
    tags=['patient_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def custom_appointment_fields_read(id: str, doctor: Optional[int] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/api/custom_appointment_fields/{id}',
    description=""" Update an existing custom appointment field """,
    tags=['user_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def custom_appointment_fields_partial_update(id: str, doctor: Optional[int] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/custom_appointment_fields/{id}',
    description=""" Update an existing custom appointment field """,
    tags=['appointment_management', 'appointment_profiles_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def custom_appointment_fields_update(id: str, doctor: Optional[int] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/custom_demographics',
    description=""" Retrieve or search custom demographics fields """,
    tags=[
        'appointment_profiles_management',
        'doctor_management',
        'appointments_management',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def custom_demographics_list(
    cursor: Optional[str] = None,
    page_size: Optional[int] = None,
    doctor: Optional[int] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/custom_demographics',
    description=""" Create custom demographics fields """,
    tags=['doctor_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def custom_demographics_create(doctor: Optional[int] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/custom_demographics/{id}',
    description=""" Retrieve an existing custom demographics field """,
    tags=['appointment_profiles_management', 'doctor_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def custom_demographics_read(id: str, doctor: Optional[int] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/api/custom_demographics/{id}',
    description=""" Update an existing custom demographics field """,
    tags=['doctor_management', 'appointments_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def custom_demographics_partial_update(id: str, doctor: Optional[int] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/custom_demographics/{id}',
    description=""" Update an existing custom demographics field """,
    tags=['appointment_management', 'doctor_management', 'appointments_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def custom_demographics_update(id: str, doctor: Optional[int] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/custom_insurance_plan_names',
    description=""" Retrieve or search custom insurance plan names """,
    tags=['user_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def custom_insurance_plan_names_list(
    cursor: Optional[str] = None,
    page_size: Optional[int] = None,
    since: Optional[str] = None,
    user: Optional[int] = None,
    name: Optional[str] = None,
    doctor: Optional[int] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/custom_insurance_plan_names/{id}',
    description=""" Retrieve an existing custom insurance plan name """,
    tags=['user_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def custom_insurance_plan_names_read(
    id: str,
    since: Optional[str] = None,
    user: Optional[int] = None,
    name: Optional[str] = None,
    doctor: Optional[int] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/custom_vitals',
    description=""" Retrieve or search custom vital types """,
    tags=['appointment_management', 'appointments_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def custom_vitals_list(
    cursor: Optional[str] = None,
    page_size: Optional[int] = None,
    doctor: Optional[int] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/custom_vitals/{id}',
    description=""" Retrieve an existing custom vital type """,
    tags=['doctor_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def custom_vitals_read(id: str, doctor: Optional[int] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/doctors',
    description=""" Retrieve or search doctors within practice group """,
    tags=['patient_management', 'doctor_management', 'appointments_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def doctors_list(
    cursor: Optional[str] = None,
    page_size: Optional[int] = None,
    doctor: Optional[int] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/doctors/{id}',
    description=""" Retrieve an existing dcotor """,
    tags=['appointment_profiles_management', 'doctor_management', 'patient_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def doctors_read(id: str, doctor: Optional[int] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/documents',
    description=""" Retrieve or search documents """,
    tags=[
        'appointment_management',
        'appointments_management',
        'reminder_profile_management',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def documents_list(
    cursor: Optional[str] = None,
    page_size: Optional[int] = None,
    since: Optional[str] = None,
    patient: Optional[int] = None,
    doctor: Optional[int] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/documents',
    description=""" Create documents """,
    tags=['patient_management', 'patient_physical_exams', 'patient_risk_assessments'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def documents_create(
    since: Optional[str] = None,
    patient: Optional[int] = None,
    doctor: Optional[int] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/documents/{id}',
    description=""" Delete an existing appointment template """,
    tags=['appointments_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def documents_delete(
    id: str,
    since: Optional[str] = None,
    patient: Optional[int] = None,
    doctor: Optional[int] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/documents/{id}',
    description=""" Retrieve an existing appointment template """,
    tags=['patient_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def documents_read(
    id: str,
    since: Optional[str] = None,
    patient: Optional[int] = None,
    doctor: Optional[int] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/api/documents/{id}',
    description=""" Update an existing appointment template """,
    tags=[
        'appointment_management',
        'appointment_profiles_management',
        'appointments_management',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def documents_partial_update(
    id: str,
    since: Optional[str] = None,
    patient: Optional[int] = None,
    doctor: Optional[int] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/documents/{id}',
    description=""" Update an existing appointment template """,
    tags=['appointments_management', 'appointment_management', 'patient_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def documents_update(
    id: str,
    since: Optional[str] = None,
    patient: Optional[int] = None,
    doctor: Optional[int] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/eligibility_checks',
    description=""" Retrieve or search past eligibility checks for patient """,
    tags=['appointments_management', 'appointment_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def eligibility_checks_list(
    cursor: Optional[str] = None,
    page_size: Optional[int] = None,
    appointment: Optional[int] = None,
    appointment_date: Optional[str] = None,
    doctor: Optional[int] = None,
    query_date_range: Optional[str] = None,
    appointment_date_range: Optional[str] = None,
    query_date: Optional[str] = None,
    patient: Optional[int] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/eligibility_checks/{id}',
    description=""" Retrieve an existing past eligibility check """,
    tags=['appointments_management', 'appointment_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def eligibility_checks_read(
    id: str,
    appointment: Optional[int] = None,
    appointment_date: Optional[str] = None,
    doctor: Optional[int] = None,
    query_date_range: Optional[str] = None,
    appointment_date_range: Optional[str] = None,
    query_date: Optional[str] = None,
    patient: Optional[int] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/eobs',
    description=""" Retrieve or search EOB objects """,
    tags=['appointments_management', 'appointment_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def eobs_list(
    cursor: Optional[str] = None,
    page_size: Optional[int] = None,
    doctor: Optional[int] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/eobs',
    description=""" Create EOB object """,
    tags=['doctor_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def eobs_create(doctor: Optional[int] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/eobs/{id}',
    description=""" Retrieve an existing EOB object """,
    tags=['appointment_management', 'doctor_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def eobs_read(id: str, doctor: Optional[int] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/fee_schedules',
    tags=['appointments_management', 'appointment_management', 'patient_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def fee_schedules_list(
    cursor: Optional[str] = None,
    page_size: Optional[int] = None,
    code: Optional[str] = None,
    code_type: Optional[str] = None,
    since: Optional[str] = None,
    payer_id: Optional[str] = None,
    doctor: Optional[int] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/fee_schedules/{id}',
    tags=['user_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def fee_schedules_read(
    id: str,
    code: Optional[str] = None,
    code_type: Optional[str] = None,
    since: Optional[str] = None,
    payer_id: Optional[str] = None,
    doctor: Optional[int] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/implantable_devices',
    description=""" Retrieve or search implantable devices """,
    tags=['appointments_management', 'appointment_management', 'patient_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def implantable_devices_list(
    cursor: Optional[str] = None,
    page_size: Optional[int] = None,
    mu_date: Optional[str] = None,
    patient: Optional[int] = None,
    mu_date_range: Optional[str] = None,
    doctor: Optional[int] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/implantable_devices/{id}',
    description=""" Retrieve an existing implantable device """,
    tags=['appointments_management', 'appointment_management', 'doctor_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def implantable_devices_read(
    id: str,
    mu_date: Optional[str] = None,
    patient: Optional[int] = None,
    mu_date_range: Optional[str] = None,
    doctor: Optional[int] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/insurances',
    tags=['appointments_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def insurances_list(
    cursor: Optional[str] = None,
    page_size: Optional[int] = None,
    payer_type: str = ...,
    term: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/insurances/{id}',
    tags=['billing_management', 'billing_profiles_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def insurances_read(id: str, payer_type: str = ..., term: Optional[str] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/inventory_categories',
    description=""" Retrieve or search inventory categories """,
    tags=['doctor_management', 'appointments_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def inventory_categories_list(
    cursor: Optional[str] = None,
    page_size: Optional[int] = None,
    since: Optional[str] = None,
    doctor: Optional[int] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/inventory_categories/{id}',
    description=""" Retrieve an existing inventory category """,
    tags=['patient_management', 'appointment_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def inventory_categories_read(
    id: str, since: Optional[str] = None, doctor: Optional[int] = None
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/inventory_vaccines',
    description=""" Retrieve or search vaccine inventories """,
    tags=[
        'appointments_management',
        'appointment_management',
        'appointment_templates_management',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def inventory_vaccines_list(
    cursor: Optional[str] = None,
    page_size: Optional[int] = None,
    status: Optional[str] = None,
    cvx_code: Optional[str] = None,
    since: Optional[str] = None,
    doctor: Optional[int] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/inventory_vaccines',
    description=""" Create vaccine inventory """,
    tags=['appointments_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def inventory_vaccines_create(
    status: Optional[str] = None,
    cvx_code: Optional[str] = None,
    since: Optional[str] = None,
    doctor: Optional[int] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/inventory_vaccines/{id}',
    description=""" Retrieve an existing vaccine inventory """,
    tags=['appointments_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def inventory_vaccines_read(
    id: str,
    status: Optional[str] = None,
    cvx_code: Optional[str] = None,
    since: Optional[str] = None,
    doctor: Optional[int] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/lab_documents',
    description=""" Retrieve or search lab order documents """,
    tags=['appointments_management', 'appointment_management', 'doctor_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def lab_documents_list(
    cursor: Optional[str] = None,
    page_size: Optional[int] = None,
    since: Optional[str] = None,
    doctor: Optional[int] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/lab_documents',
    description=""" Create lab order documents. An example lab workflow is as following:

- When you get orders, submit them via `/api/lab_orders`, such that doctors can see them in drchrono.

- When results come in, submit the result document PDF via `/api/lab_documents` and submit the results data via `/api/lab_results`

- Update `/api/lab_orders` status
 """,
    tags=[
        'appointments_management',
        'appointment_management',
        'appointment_profiles_management',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def lab_documents_create(since: Optional[str] = None, doctor: Optional[int] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/lab_documents/{id}',
    description=""" Delete an existing lab order document """,
    tags=['appointment_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def lab_documents_delete(
    id: str, since: Optional[str] = None, doctor: Optional[int] = None
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/lab_documents/{id}',
    description=""" Retrieve an existing lab order document """,
    tags=['appointments_management', 'doctor_management', 'patient_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def lab_documents_read(
    id: str, since: Optional[str] = None, doctor: Optional[int] = None
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/api/lab_documents/{id}',
    description=""" Update an existing lab order document """,
    tags=['appointment_management', 'appointments_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def lab_documents_partial_update(
    id: str, since: Optional[str] = None, doctor: Optional[int] = None
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/lab_documents/{id}',
    description=""" Update an existing lab order document """,
    tags=[
        'appointments_management',
        'appointment_management',
        'appointment_profiles_management',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def lab_documents_update(
    id: str, since: Optional[str] = None, doctor: Optional[int] = None
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/lab_orders',
    description=""" Retrieve or search lab orders """,
    tags=[
        'appointment_management',
        'appointments_management',
        'appointment_profiles_management',
        'doctor_management',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def lab_orders_list(
    cursor: Optional[str] = None,
    page_size: Optional[int] = None,
    since: Optional[str] = None,
    doctor: Optional[int] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/lab_orders',
    description=""" Create lab orders. An example lab workflow is as following:

- When you get orders, submit them via `/api/lab_orders`, such that doctors can see them in drchrono.

- When results come in, submit the result document PDF via `/api/lab_documents` and submit the results data via `/api/lab_results`

- Update `/api/lab_orders` status
 """,
    tags=['appointments_management', 'appointment_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def lab_orders_create(since: Optional[str] = None, doctor: Optional[int] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/lab_orders/{id}',
    description=""" Delete an existing lab order """,
    tags=['appointments_management', 'appointment_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def lab_orders_delete(
    id: str, since: Optional[str] = None, doctor: Optional[int] = None
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/lab_orders/{id}',
    description=""" Retrieve an existing lab order """,
    tags=['appointments_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def lab_orders_read(id: str, since: Optional[str] = None, doctor: Optional[int] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/api/lab_orders/{id}',
    description=""" Update an existing lab order """,
    tags=['appointments_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def lab_orders_partial_update(
    id: str, since: Optional[str] = None, doctor: Optional[int] = None
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/lab_orders/{id}',
    description=""" Update an existing lab order """,
    tags=['appointment_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def lab_orders_update(
    id: str, since: Optional[str] = None, doctor: Optional[int] = None
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/lab_orders_summary',
    tags=['patient_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def lab_orders_summary_list(
    cursor: Optional[str] = None,
    page_size: Optional[int] = None,
    since: Optional[str] = None,
    patient: Optional[int] = None,
    doctor: Optional[int] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/lab_orders_summary/{id}',
    tags=['patient_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def lab_orders_summary_read(
    id: str,
    since: Optional[str] = None,
    patient: Optional[int] = None,
    doctor: Optional[int] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/lab_results',
    description=""" Retrieve or search lab results """,
    tags=['appointment_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def lab_results_list(
    cursor: Optional[str] = None,
    page_size: Optional[int] = None,
    order: Optional[int] = None,
    doctor: Optional[int] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/lab_results',
    description=""" Create lab results. An example lab workflow is as following:

- When you get orders, submit them via `/api/lab_orders`, such that doctors can see them in drchrono.

- When results come in, submit the result document PDF via `/api/lab_documents` and submit the results data via `/api/lab_results`

- Update `/api/lab_orders` status
 """,
    tags=['appointments_management', 'appointment_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def lab_results_create(order: Optional[int] = None, doctor: Optional[int] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/lab_results/{id}',
    description=""" Delete an existing lab result """,
    tags=['appointments_management', 'appointment_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def lab_results_delete(
    id: str, order: Optional[int] = None, doctor: Optional[int] = None
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/lab_results/{id}',
    description=""" Retrieve an existing lab result """,
    tags=['appointments_management', 'appointment_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def lab_results_read(
    id: str, order: Optional[int] = None, doctor: Optional[int] = None
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/api/lab_results/{id}',
    description=""" Update an existing lab result """,
    tags=['appointments_management', 'appointment_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def lab_results_partial_update(
    id: str, order: Optional[int] = None, doctor: Optional[int] = None
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/lab_results/{id}',
    description=""" Update an existing lab result """,
    tags=['appointment_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def lab_results_update(
    id: str, order: Optional[int] = None, doctor: Optional[int] = None
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/lab_tests',
    description=""" Retrieve or search lab tests """,
    tags=[
        'appointments_management',
        'appointment_profiles_management',
        'appointment_templates_management',
        'appointment_management',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def lab_tests_list(
    cursor: Optional[str] = None,
    page_size: Optional[int] = None,
    order: Optional[int] = None,
    doctor: Optional[int] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/lab_tests',
    description=""" Create lab tests. An example lab workflow is as following:

- When you get orders, submit them via `/api/lab_orders`, such that doctors can see them in drchrono.

- When results come in, submit the result document PDF via `/api/lab_documents` and submit the results data via `/api/lab_results`

- Update `/api/lab_orders` status
 """,
    tags=['appointments_management', 'appointment_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def lab_tests_create(order: Optional[int] = None, doctor: Optional[int] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/lab_tests/{id}',
    description=""" Delete an existing lab test """,
    tags=['appointments_management', 'appointment_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def lab_tests_delete(
    id: str, order: Optional[int] = None, doctor: Optional[int] = None
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/lab_tests/{id}',
    description=""" Retrieve an existing lab test """,
    tags=['appointments_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def lab_tests_read(id: str, order: Optional[int] = None, doctor: Optional[int] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/api/lab_tests/{id}',
    description=""" Update an existing lab test """,
    tags=['appointments_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def lab_tests_partial_update(
    id: str, order: Optional[int] = None, doctor: Optional[int] = None
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/lab_tests/{id}',
    description=""" Update an existing lab test """,
    tags=[
        'appointments_management',
        'appointment_profiles_management',
        'appointment_management',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def lab_tests_update(
    id: str, order: Optional[int] = None, doctor: Optional[int] = None
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/line_items',
    description=""" Retrieve or search billing line items """,
    tags=['appointments_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def line_items_list(
    cursor: Optional[str] = None,
    page_size: Optional[int] = None,
    posted_date: Optional[str] = None,
    patient: Optional[int] = None,
    office: Optional[int] = None,
    doctor: Optional[int] = None,
    since: Optional[str] = None,
    appointment: Optional[int] = None,
    service_date: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/line_items',
    description=""" Create billing line item for appointments """,
    tags=['appointments_management', 'appointment_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def line_items_create(
    posted_date: Optional[str] = None,
    patient: Optional[int] = None,
    office: Optional[int] = None,
    doctor: Optional[int] = None,
    since: Optional[str] = None,
    appointment: Optional[int] = None,
    service_date: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/line_items/{id}',
    tags=['appointments_management', 'appointment_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def line_items_delete(
    id: str,
    posted_date: Optional[str] = None,
    patient: Optional[int] = None,
    office: Optional[int] = None,
    doctor: Optional[int] = None,
    since: Optional[str] = None,
    appointment: Optional[int] = None,
    service_date: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/line_items/{id}',
    description=""" Retrieve an existing billing line item """,
    tags=['appointments_management', 'appointment_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def line_items_read(
    id: str,
    posted_date: Optional[str] = None,
    patient: Optional[int] = None,
    office: Optional[int] = None,
    doctor: Optional[int] = None,
    since: Optional[str] = None,
    appointment: Optional[int] = None,
    service_date: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/api/line_items/{id}',
    tags=['appointments_management', 'appointment_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def line_items_partial_update(
    id: str,
    posted_date: Optional[str] = None,
    patient: Optional[int] = None,
    office: Optional[int] = None,
    doctor: Optional[int] = None,
    since: Optional[str] = None,
    appointment: Optional[int] = None,
    service_date: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/line_items/{id}',
    tags=['appointments_management', 'appointment_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def line_items_update(
    id: str,
    posted_date: Optional[str] = None,
    patient: Optional[int] = None,
    office: Optional[int] = None,
    doctor: Optional[int] = None,
    since: Optional[str] = None,
    appointment: Optional[int] = None,
    service_date: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/medications',
    description=""" Retrieve or search patient medications """,
    tags=['appointments_management', 'appointment_management', 'patient_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def medications_list(
    cursor: Optional[str] = None,
    page_size: Optional[int] = None,
    patient: Optional[int] = None,
    doctor: Optional[int] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/medications',
    description=""" Create patient medications """,
    tags=['patient_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def medications_create(patient: Optional[int] = None, doctor: Optional[int] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/medications/{id}',
    description=""" Retrieve an existing patient medications """,
    tags=['appointments_management', 'appointment_management', 'patient_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def medications_read(
    id: str, patient: Optional[int] = None, doctor: Optional[int] = None
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/api/medications/{id}',
    description=""" Update an existing patient medications """,
    tags=['demographics_management', 'doctor_management', 'patient_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def medications_partial_update(
    id: str, patient: Optional[int] = None, doctor: Optional[int] = None
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/medications/{id}',
    description=""" Update an existing patient medications """,
    tags=['patient_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def medications_update(
    id: str, patient: Optional[int] = None, doctor: Optional[int] = None
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/api/medications/{id}/append_to_pharmacy_note',
    description=""" Append a message to the "pharmacy_note" section of the prescription, in a new paragraph """,
    tags=['patient_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def medications_append_to_pharmacy_note(
    id: str, patient: Optional[int] = None, doctor: Optional[int] = None
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/messages',
    description=""" Retrieve or search messages in doctor's message center """,
    tags=['patient_management', 'appointments_management', 'appointments_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def messages_list(
    cursor: Optional[str] = None,
    page_size: Optional[int] = None,
    patient: Optional[int] = None,
    doctor: Optional[int] = None,
    responsible_user: Optional[int] = None,
    updated_since: Optional[str] = None,
    received_since: Optional[str] = None,
    owner: Optional[int] = None,
    type: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/messages',
    description=""" Create messages in doctor's message center """,
    tags=[
        'patient_management',
        'doctor_management',
        'patient_communications_management',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def messages_create(
    patient: Optional[int] = None,
    doctor: Optional[int] = None,
    responsible_user: Optional[int] = None,
    updated_since: Optional[str] = None,
    received_since: Optional[str] = None,
    owner: Optional[int] = None,
    type: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/messages/{id}',
    description=""" Delete an existing message in doctor's message center """,
    tags=['patient_management', 'appointments_management', 'doctor_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def messages_delete(
    id: str,
    patient: Optional[int] = None,
    doctor: Optional[int] = None,
    responsible_user: Optional[int] = None,
    updated_since: Optional[str] = None,
    received_since: Optional[str] = None,
    owner: Optional[int] = None,
    type: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/messages/{id}',
    description=""" Retrieve an existing message in doctor's message center """,
    tags=['user_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def messages_read(
    id: str,
    patient: Optional[int] = None,
    doctor: Optional[int] = None,
    responsible_user: Optional[int] = None,
    updated_since: Optional[str] = None,
    received_since: Optional[str] = None,
    owner: Optional[int] = None,
    type: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/api/messages/{id}',
    description=""" Update an existing message in doctor's message center """,
    tags=['user_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def messages_partial_update(
    id: str,
    patient: Optional[int] = None,
    doctor: Optional[int] = None,
    responsible_user: Optional[int] = None,
    updated_since: Optional[str] = None,
    received_since: Optional[str] = None,
    owner: Optional[int] = None,
    type: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/messages/{id}',
    description=""" Update an existing message in doctor's message center """,
    tags=['patient_management', 'doctor_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def messages_update(
    id: str,
    patient: Optional[int] = None,
    doctor: Optional[int] = None,
    responsible_user: Optional[int] = None,
    updated_since: Optional[str] = None,
    received_since: Optional[str] = None,
    owner: Optional[int] = None,
    type: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/offices',
    description=""" Retrieve or search offices """,
    tags=['appointment_profiles_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def offices_list(
    cursor: Optional[str] = None,
    page_size: Optional[int] = None,
    doctor: Optional[int] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/offices/{id}',
    description=""" Retrieve an existing office """,
    tags=['appointment_management', 'doctor_management', 'patient_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def offices_read(id: str, doctor: Optional[int] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/api/offices/{id}',
    description=""" Update an existing office """,
    tags=['doctor_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def offices_partial_update(id: str, doctor: Optional[int] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/offices/{id}',
    description=""" Update an existing office """,
    tags=['appointment_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def offices_update(id: str, doctor: Optional[int] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/offices/{id}/add_exam_room',
    description=""" Add an exam room to the office """,
    tags=['appointment_management', 'patient_management', 'doctor_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def offices_add_exam_room(id: str, doctor: Optional[int] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/patient_communications',
    description=""" Retrieve or search patient communications for CQM """,
    tags=['patient_management', 'appointments_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def patient_communications_list(
    cursor: Optional[str] = None,
    page_size: Optional[int] = None,
    patient: Optional[int] = None,
    doctor: Optional[int] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/patient_communications',
    description=""" Create patient communication for CQM """,
    tags=['patient_management', 'appointments_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def patient_communications_create(
    patient: Optional[int] = None, doctor: Optional[int] = None
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/patient_communications/{id}',
    description=""" Retrieve an existing patient communication for CQM """,
    tags=['patient_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def patient_communications_read(
    id: str, patient: Optional[int] = None, doctor: Optional[int] = None
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/api/patient_communications/{id}',
    description=""" Update an existing patient communication for CQM """,
    tags=['patient_management', 'doctor_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def patient_communications_partial_update(
    id: str, patient: Optional[int] = None, doctor: Optional[int] = None
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/patient_communications/{id}',
    description=""" Update an existing patient communication for CQM """,
    tags=['patient_management', 'user_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def patient_communications_update(
    id: str, patient: Optional[int] = None, doctor: Optional[int] = None
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/patient_flag_types',
    description=""" Retrieve or search patient flag types """,
    tags=['appointment_management', 'appointments_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def patient_flag_types_list(
    cursor: Optional[str] = None,
    page_size: Optional[int] = None,
    doctor: Optional[int] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/patient_flag_types',
    description=""" Create patient flag types """,
    tags=['doctor_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def patient_flag_types_create(doctor: Optional[int] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/patient_flag_types/{id}',
    description=""" Retrieve an existing patient flag type """,
    tags=['doctor_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def patient_flag_types_read(id: str, doctor: Optional[int] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/api/patient_flag_types/{id}',
    description=""" Update an existing patient flag type """,
    tags=['doctor_management', 'appointments_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def patient_flag_types_partial_update(id: str, doctor: Optional[int] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/patient_flag_types/{id}',
    description=""" Update an existing patient flag type """,
    tags=['doctor_management', 'appointment_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def patient_flag_types_update(id: str, doctor: Optional[int] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/patient_interventions',
    description=""" Retrieve or search patient interventions for CQM """,
    tags=['appointment_management', 'appointments_management', 'patient_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def patient_interventions_list(
    cursor: Optional[str] = None,
    page_size: Optional[int] = None,
    patient: Optional[int] = None,
    doctor: Optional[int] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/patient_interventions',
    description=""" Create patient intervention for CQM """,
    tags=['patient_management', 'doctor_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def patient_interventions_create(
    patient: Optional[int] = None, doctor: Optional[int] = None
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/patient_interventions/{id}',
    description=""" Retrieve an existing patient intervention for CQM """,
    tags=['patient_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def patient_interventions_read(
    id: str, patient: Optional[int] = None, doctor: Optional[int] = None
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/api/patient_interventions/{id}',
    description=""" Update an existing patient intervention for CQM """,
    tags=['patient_management', 'user_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def patient_interventions_partial_update(
    id: str, patient: Optional[int] = None, doctor: Optional[int] = None
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/patient_interventions/{id}',
    description=""" Update an existing patient intervention for CQM """,
    tags=['patient_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def patient_interventions_update(
    id: str, patient: Optional[int] = None, doctor: Optional[int] = None
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/patient_lab_results',
    tags=['appointment_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def patient_lab_results_list(
    cursor: Optional[str] = None,
    page_size: Optional[int] = None,
    ordering_doctor: Optional[int] = None,
    since: Optional[str] = None,
    patient: Optional[int] = None,
    doctor: Optional[int] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/patient_lab_results',
    tags=['appointments_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def patient_lab_results_create(
    ordering_doctor: Optional[int] = None,
    since: Optional[str] = None,
    patient: Optional[int] = None,
    doctor: Optional[int] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/patient_lab_results/{id}',
    tags=['appointments_management', 'appointment_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def patient_lab_results_delete(
    id: str,
    ordering_doctor: Optional[int] = None,
    since: Optional[str] = None,
    patient: Optional[int] = None,
    doctor: Optional[int] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/patient_lab_results/{id}',
    tags=['appointment_management', 'appointments_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def patient_lab_results_read(
    id: str,
    ordering_doctor: Optional[int] = None,
    since: Optional[str] = None,
    patient: Optional[int] = None,
    doctor: Optional[int] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/api/patient_lab_results/{id}',
    tags=['appointments_management', 'appointment_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def patient_lab_results_partial_update(
    id: str,
    ordering_doctor: Optional[int] = None,
    since: Optional[str] = None,
    patient: Optional[int] = None,
    doctor: Optional[int] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/patient_lab_results/{id}',
    tags=[
        'appointments_management',
        'appointment_management',
        'appointment_profiles_management',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def patient_lab_results_update(
    id: str,
    ordering_doctor: Optional[int] = None,
    since: Optional[str] = None,
    patient: Optional[int] = None,
    doctor: Optional[int] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/patient_messages',
    tags=['patient_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def patient_messages_list(
    cursor: Optional[str] = None,
    page_size: Optional[int] = None,
    since: Optional[str] = None,
    patient: Optional[int] = None,
    doctor: Optional[int] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/patient_messages',
    tags=['appointments_management', 'appointment_management', 'patient_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def patient_messages_create(
    since: Optional[str] = None,
    patient: Optional[int] = None,
    doctor: Optional[int] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/patient_messages/{id}',
    tags=['patient_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def patient_messages_read(
    id: str,
    since: Optional[str] = None,
    patient: Optional[int] = None,
    doctor: Optional[int] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/api/patient_messages/{id}',
    tags=['patient_management', 'appointments_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def patient_messages_partial_update(
    id: str,
    since: Optional[str] = None,
    patient: Optional[int] = None,
    doctor: Optional[int] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/patient_messages/{id}',
    tags=['appointments_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def patient_messages_update(
    id: str,
    since: Optional[str] = None,
    patient: Optional[int] = None,
    doctor: Optional[int] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/patient_payment_log',
    description=""" Retrieve or search patient payment logs """,
    tags=['patient_management', 'appointments_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def patient_payment_log_list(
    cursor: Optional[str] = None,
    page_size: Optional[int] = None,
    since: Optional[str] = None,
    office: Optional[int] = None,
    doctor: Optional[int] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/patient_payment_log/{id}',
    description=""" Retrieve an existing patient payment log """,
    tags=['appointments_management', 'appointment_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def patient_payment_log_read(
    id: str,
    since: Optional[str] = None,
    office: Optional[int] = None,
    doctor: Optional[int] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/patient_payments',
    description=""" Retrieve or search patient payments """,
    tags=['patient_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def patient_payments_list(
    cursor: Optional[str] = None,
    page_size: Optional[int] = None,
    since: Optional[str] = None,
    patient: Optional[int] = None,
    doctor: Optional[int] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/patient_payments',
    description=""" Create patient payment """,
    tags=['patient_management', 'doctor_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def patient_payments_create(
    since: Optional[str] = None,
    patient: Optional[int] = None,
    doctor: Optional[int] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/patient_payments/{id}',
    description=""" Retrieve an existing patient payment """,
    tags=['patient_management', 'appointments_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def patient_payments_read(
    id: str,
    since: Optional[str] = None,
    patient: Optional[int] = None,
    doctor: Optional[int] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/patient_physical_exams',
    description=""" Retrieve or search patient physical exams for CQM """,
    tags=['appointments_management', 'patient_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def patient_physical_exams_list(
    cursor: Optional[str] = None,
    page_size: Optional[int] = None,
    patient: Optional[int] = None,
    doctor: Optional[int] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/patient_physical_exams',
    description=""" Create patient physical exam for CQM """,
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def patient_physical_exams_create(
    patient: Optional[int] = None, doctor: Optional[int] = None
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/patient_physical_exams/{id}',
    description=""" Retrieve an existing patient physical exam for CQM """,
    tags=['patient_management', 'appointments_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def patient_physical_exams_read(
    id: str, patient: Optional[int] = None, doctor: Optional[int] = None
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/api/patient_physical_exams/{id}',
    description=""" Update an existing patient physical exam for CQM """,
    tags=['patient_management', 'doctor_management', 'appointments_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def patient_physical_exams_partial_update(
    id: str, patient: Optional[int] = None, doctor: Optional[int] = None
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/patient_physical_exams/{id}',
    description=""" Update an existing patient physical exam for CQM """,
    tags=['patient_management', 'doctor_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def patient_physical_exams_update(
    id: str, patient: Optional[int] = None, doctor: Optional[int] = None
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/patient_risk_assessments',
    tags=['appointments_management', 'appointment_management', 'patient_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def patient_risk_assessments_list(
    cursor: Optional[str] = None,
    page_size: Optional[int] = None,
    patient: Optional[int] = None,
    doctor: Optional[int] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/patient_risk_assessments',
    tags=['patient_management', 'doctor_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def patient_risk_assessments_create(
    patient: Optional[int] = None, doctor: Optional[int] = None
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/patient_risk_assessments/{id}',
    tags=['patient_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def patient_risk_assessments_read(
    id: str, patient: Optional[int] = None, doctor: Optional[int] = None
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/api/patient_risk_assessments/{id}',
    tags=['patient_management', 'demographics_management', 'appointments_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def patient_risk_assessments_partial_update(
    id: str, patient: Optional[int] = None, doctor: Optional[int] = None
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/patient_risk_assessments/{id}',
    tags=['appointments_management', 'appointment_management', 'patient_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def patient_risk_assessments_update(
    id: str, patient: Optional[int] = None, doctor: Optional[int] = None
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/patient_vaccine_records',
    description=""" Retrieve or search patient vaccine records """,
    tags=['patient_management', 'appointments_management', 'demographics_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def patient_vaccine_records_list(
    cursor: Optional[str] = None,
    page_size: Optional[int] = None,
    cvx_code: Optional[str] = None,
    patient: Optional[int] = None,
    since: Optional[str] = None,
    doctor: Optional[int] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/patient_vaccine_records',
    description=""" Create patient vaccine records """,
    tags=['patient_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def patient_vaccine_records_create(
    cvx_code: Optional[str] = None,
    patient: Optional[int] = None,
    since: Optional[str] = None,
    doctor: Optional[int] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/patient_vaccine_records/{id}',
    description=""" Retrieve an existing patient vaccine records """,
    tags=['patient_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def patient_vaccine_records_read(
    id: str,
    cvx_code: Optional[str] = None,
    patient: Optional[int] = None,
    since: Optional[str] = None,
    doctor: Optional[int] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/api/patient_vaccine_records/{id}',
    description=""" Update an existing patient vaccine records """,
    tags=['patient_management', 'appointments_management', 'appointment_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def patient_vaccine_records_partial_update(
    id: str,
    cvx_code: Optional[str] = None,
    patient: Optional[int] = None,
    since: Optional[str] = None,
    doctor: Optional[int] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/patient_vaccine_records/{id}',
    description=""" Update an existing patient vaccine records """,
    tags=['appointments_management', 'appointment_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def patient_vaccine_records_update(
    id: str,
    cvx_code: Optional[str] = None,
    patient: Optional[int] = None,
    since: Optional[str] = None,
    doctor: Optional[int] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/patients',
    description=""" Retrieve or search patients """,
    tags=['demographics_management', 'patient_management', 'doctor_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def patients_list(
    cursor: Optional[str] = None,
    page_size: Optional[int] = None,
    first_name: Optional[str] = None,
    last_name: Optional[str] = None,
    preferred_language: Optional[str] = None,
    doctor: Optional[int] = None,
    gender: Optional[str] = None,
    since: Optional[str] = None,
    date_of_birth: Optional[str] = None,
    race: Optional[str] = None,
    chart_id: Optional[str] = None,
    email: Optional[str] = None,
    ethnicity: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/patients',
    description=""" Create patient """,
    tags=['demographics_management', 'patient_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def patients_create(
    first_name: Optional[str] = None,
    last_name: Optional[str] = None,
    preferred_language: Optional[str] = None,
    doctor: Optional[int] = None,
    gender: Optional[str] = None,
    since: Optional[str] = None,
    date_of_birth: Optional[str] = None,
    race: Optional[str] = None,
    chart_id: Optional[str] = None,
    email: Optional[str] = None,
    ethnicity: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/patients/{id}',
    description=""" Delete an existing patient """,
    tags=['demographics_management', 'patient_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def patients_delete(
    id: str,
    first_name: Optional[str] = None,
    last_name: Optional[str] = None,
    preferred_language: Optional[str] = None,
    doctor: Optional[int] = None,
    gender: Optional[str] = None,
    since: Optional[str] = None,
    date_of_birth: Optional[str] = None,
    race: Optional[str] = None,
    chart_id: Optional[str] = None,
    email: Optional[str] = None,
    ethnicity: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/patients/{id}',
    description=""" Retrieve an existing patient """,
    tags=['demographics_management', 'patient_management', 'user_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def patients_read(
    id: str,
    first_name: Optional[str] = None,
    last_name: Optional[str] = None,
    preferred_language: Optional[str] = None,
    doctor: Optional[int] = None,
    gender: Optional[str] = None,
    since: Optional[str] = None,
    date_of_birth: Optional[str] = None,
    race: Optional[str] = None,
    chart_id: Optional[str] = None,
    email: Optional[str] = None,
    ethnicity: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/api/patients/{id}',
    description=""" Update an existing patient """,
    tags=['demographics_management', 'user_management', 'patient_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def patients_partial_update(
    id: str,
    first_name: Optional[str] = None,
    last_name: Optional[str] = None,
    preferred_language: Optional[str] = None,
    doctor: Optional[int] = None,
    gender: Optional[str] = None,
    since: Optional[str] = None,
    date_of_birth: Optional[str] = None,
    race: Optional[str] = None,
    chart_id: Optional[str] = None,
    email: Optional[str] = None,
    ethnicity: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/patients/{id}',
    description=""" Update an existing patient """,
    tags=['demographics_management', 'patient_management', 'user_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def patients_update(
    id: str,
    first_name: Optional[str] = None,
    last_name: Optional[str] = None,
    preferred_language: Optional[str] = None,
    doctor: Optional[int] = None,
    gender: Optional[str] = None,
    since: Optional[str] = None,
    date_of_birth: Optional[str] = None,
    race: Optional[str] = None,
    chart_id: Optional[str] = None,
    email: Optional[str] = None,
    ethnicity: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/patients/{id}/ccda',
    description=""" Retrieve patient CCDA """,
    tags=['demographics_management', 'patient_management', 'doctor_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def patients_ccda(
    id: str,
    first_name: Optional[str] = None,
    last_name: Optional[str] = None,
    preferred_language: Optional[str] = None,
    doctor: Optional[int] = None,
    gender: Optional[str] = None,
    since: Optional[str] = None,
    date_of_birth: Optional[str] = None,
    race: Optional[str] = None,
    chart_id: Optional[str] = None,
    email: Optional[str] = None,
    ethnicity: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/patients/{id}/onpatient_access',
    description=""" Revoke sent onpatient invites """,
    tags=['demographics_management', 'patient_management', 'user_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def patients_onpatient_access_delete(
    id: str,
    first_name: Optional[str] = None,
    last_name: Optional[str] = None,
    preferred_language: Optional[str] = None,
    doctor: Optional[int] = None,
    gender: Optional[str] = None,
    since: Optional[str] = None,
    date_of_birth: Optional[str] = None,
    race: Optional[str] = None,
    chart_id: Optional[str] = None,
    email: Optional[str] = None,
    ethnicity: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/patients/{id}/onpatient_access',
    description=""" Retrieve or search existing onpatient access invites """,
    tags=['demographics_management', 'patient_management', 'user_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def patients_onpatient_access_read(
    id: str,
    first_name: Optional[str] = None,
    last_name: Optional[str] = None,
    preferred_language: Optional[str] = None,
    doctor: Optional[int] = None,
    gender: Optional[str] = None,
    since: Optional[str] = None,
    date_of_birth: Optional[str] = None,
    race: Optional[str] = None,
    chart_id: Optional[str] = None,
    email: Optional[str] = None,
    ethnicity: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/patients/{id}/onpatient_access',
    description=""" Send new onpatient invite to patient """,
    tags=['demographics_management', 'patient_management', 'user_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def patients_onpatient_access_create(
    id: str,
    first_name: Optional[str] = None,
    last_name: Optional[str] = None,
    preferred_language: Optional[str] = None,
    doctor: Optional[int] = None,
    gender: Optional[str] = None,
    since: Optional[str] = None,
    date_of_birth: Optional[str] = None,
    race: Optional[str] = None,
    chart_id: Optional[str] = None,
    email: Optional[str] = None,
    ethnicity: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/patients/{id}/qrda1',
    description=""" Retrieve patient QRDA1 """,
    tags=['demographics_management', 'patient_management', 'user_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def patients_qrda1(
    id: str,
    first_name: Optional[str] = None,
    last_name: Optional[str] = None,
    preferred_language: Optional[str] = None,
    doctor: Optional[int] = None,
    gender: Optional[str] = None,
    since: Optional[str] = None,
    date_of_birth: Optional[str] = None,
    race: Optional[str] = None,
    chart_id: Optional[str] = None,
    email: Optional[str] = None,
    ethnicity: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/patients_summary',
    tags=['demographics_management', 'doctor_management', 'patient_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def patients_summary_list(
    cursor: Optional[str] = None,
    page_size: Optional[int] = None,
    first_name: Optional[str] = None,
    last_name: Optional[str] = None,
    doctor: Optional[int] = None,
    gender: Optional[str] = None,
    since: Optional[str] = None,
    date_of_birth: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/patients_summary',
    tags=['demographics_management', 'doctor_management', 'patient_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def patients_summary_create(
    first_name: Optional[str] = None,
    last_name: Optional[str] = None,
    doctor: Optional[int] = None,
    gender: Optional[str] = None,
    since: Optional[str] = None,
    date_of_birth: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/patients_summary/{id}',
    tags=['demographics_management', 'doctor_management', 'patient_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def patients_summary_delete(
    id: str,
    first_name: Optional[str] = None,
    last_name: Optional[str] = None,
    doctor: Optional[int] = None,
    gender: Optional[str] = None,
    since: Optional[str] = None,
    date_of_birth: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/patients_summary/{id}',
    tags=['demographics_management', 'doctor_management', 'patient_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def patients_summary_read(
    id: str,
    first_name: Optional[str] = None,
    last_name: Optional[str] = None,
    doctor: Optional[int] = None,
    gender: Optional[str] = None,
    since: Optional[str] = None,
    date_of_birth: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/api/patients_summary/{id}',
    tags=['demographics_management', 'doctor_management', 'patient_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def patients_summary_partial_update(
    id: str,
    first_name: Optional[str] = None,
    last_name: Optional[str] = None,
    doctor: Optional[int] = None,
    gender: Optional[str] = None,
    since: Optional[str] = None,
    date_of_birth: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/patients_summary/{id}',
    tags=['demographics_management', 'doctor_management', 'patient_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def patients_summary_update(
    id: str,
    first_name: Optional[str] = None,
    last_name: Optional[str] = None,
    doctor: Optional[int] = None,
    gender: Optional[str] = None,
    since: Optional[str] = None,
    date_of_birth: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/prescription_messages',
    description=""" Retrieve or search prescription messages """,
    tags=[
        'appointments_management',
        'appointment_management',
        'care_plans_management',
        'patient_management',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def prescription_messages_list(
    cursor: Optional[str] = None,
    page_size: Optional[int] = None,
    parent_message: Optional[int] = None,
    since: Optional[str] = None,
    patient: Optional[int] = None,
    doctor: Optional[int] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/prescription_messages/{id}',
    description=""" Retrieve an existing prescription message """,
    tags=['messages_management', 'patient_messages'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def prescription_messages_read(
    id: str,
    parent_message: Optional[int] = None,
    since: Optional[str] = None,
    patient: Optional[int] = None,
    doctor: Optional[int] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/problems',
    description=""" Retrieve or search patient problems """,
    tags=['appointments_management', 'appointment_management', 'patient_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def problems_list(
    cursor: Optional[str] = None,
    page_size: Optional[int] = None,
    patient: Optional[int] = None,
    doctor: Optional[int] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/problems',
    description=""" Create patient problems """,
    tags=['patient_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def problems_create(patient: Optional[int] = None, doctor: Optional[int] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/problems/{id}',
    description=""" Retrieve an existing patient problems """,
    tags=['patient_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def problems_read(id: str, patient: Optional[int] = None, doctor: Optional[int] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/api/problems/{id}',
    description=""" Update an existing patient problems """,
    tags=['patient_management', 'appointments_management', 'clinical_notes_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def problems_partial_update(
    id: str, patient: Optional[int] = None, doctor: Optional[int] = None
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/problems/{id}',
    description=""" Update an existing patient problems """,
    tags=['patient_management', 'appointment_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def problems_update(
    id: str, patient: Optional[int] = None, doctor: Optional[int] = None
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/procedures',
    tags=['appointments_management', 'appointment_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def procedures_list(
    cursor: Optional[str] = None,
    page_size: Optional[int] = None,
    mu_date: Optional[str] = None,
    patient: Optional[int] = None,
    doctor: Optional[int] = None,
    mu_date_range: Optional[str] = None,
    appointment: Optional[int] = None,
    service_date: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/procedures/{id}',
    tags=['appointments_management', 'appointment_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def procedures_read(
    id: str,
    mu_date: Optional[str] = None,
    patient: Optional[int] = None,
    doctor: Optional[int] = None,
    mu_date_range: Optional[str] = None,
    appointment: Optional[int] = None,
    service_date: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/reminder_profiles',
    description=""" Retrieve or search reminder profiles """,
    tags=['appointments_management', 'patient_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def reminder_profiles_list(
    cursor: Optional[str] = None,
    page_size: Optional[int] = None,
    doctor: Optional[int] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/reminder_profiles',
    description=""" Create reminder profile """,
    tags=['doctor_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def reminder_profiles_create(doctor: Optional[int] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/reminder_profiles/{id}',
    description=""" Delete an existing reminder profile """,
    tags=['appointment_management', 'doctor_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def reminder_profiles_delete(id: str, doctor: Optional[int] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/reminder_profiles/{id}',
    description=""" Retrieve an existing reminder profile """,
    tags=['appointment_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def reminder_profiles_read(id: str, doctor: Optional[int] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/api/reminder_profiles/{id}',
    description=""" Update an existing reminder profile """,
    tags=['doctor_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def reminder_profiles_partial_update(id: str, doctor: Optional[int] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/reminder_profiles/{id}',
    description=""" Update an existing reminder profile """,
    tags=['user_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def reminder_profiles_update(id: str, doctor: Optional[int] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/sublabs',
    description=""" Retrieve or search sub vendors """,
    tags=[
        'appointments_management',
        'appointment_management',
        'appointment_profiles_management',
        'appointment_templates_management',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def sublabs_list(cursor: Optional[str] = None, page_size: Optional[int] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/sublabs',
    description=""" Create sub-vendors

- When you get orders, submit them via `/api/lab_orders`, such that doctors can see them in drchrono.

- When results come in, submit the result document PDF via `/api/lab_documents` and submit the results data via `/api/lab_results`

- Update `/api/lab_orders` status
 """,
    tags=['appointments_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def sublabs_create():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/sublabs/{id}',
    description=""" Delete an existing sub vendor """,
    tags=['patient_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def sublabs_delete(id: int):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/sublabs/{id}',
    description=""" Retrieve an existing sub vendor """,
    tags=['user_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def sublabs_read(id: int):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/api/sublabs/{id}',
    description=""" Update an existing sub vendor """,
    tags=['appointments_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def sublabs_partial_update(id: int):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/sublabs/{id}',
    description=""" Update an existing sub vendor """,
    tags=['user_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def sublabs_update(id: int):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/task_categories',
    description=""" Retrieve or search task categories """,
    tags=['appointments_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def task_categories_list(
    cursor: Optional[str] = None,
    page_size: Optional[int] = None,
    since: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/task_categories',
    description=""" Create a task category """,
    tags=['patient_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def task_categories_create(since: Optional[str] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/task_categories/{id}',
    description=""" Retrieve an existing task category """,
    tags=['appointments_management', 'appointment_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def task_categories_read(id: str, since: Optional[str] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/api/task_categories/{id}',
    description=""" Update an existing task category """,
    tags=['patient_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def task_categories_partial_update(id: str, since: Optional[str] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/task_categories/{id}',
    description=""" Update an existing task category """,
    tags=['appointments_management', 'patient_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def task_categories_update(id: str, since: Optional[str] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/task_notes',
    description=""" Retrieve or search task notes """,
    tags=['tasks_management', 'task_templates_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def task_notes_list(
    cursor: Optional[str] = None,
    page_size: Optional[int] = None,
    task: Optional[int] = None,
    since: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/task_notes',
    description=""" Create a task note """,
    tags=[
        'tasks_management',
        'task_note_management',
        'task_notes_management',
        'task_templates_management',
        'task_statuses_management',
        'task_category_management',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def task_notes_create(task: Optional[int] = None, since: Optional[str] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/task_notes/{id}',
    description=""" Retrieve an existing task note """,
    tags=['tasks_management', 'task_note_management', 'task_notes_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def task_notes_read(id: str, task: Optional[int] = None, since: Optional[str] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/api/task_notes/{id}',
    description=""" Update an existing task note """,
    tags=[
        'tasks_management',
        'task_category_management',
        'task_note_management',
        'task_notes_management',
        'task_templates_management',
        'task_statuses_management',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def task_notes_partial_update(
    id: str, task: Optional[int] = None, since: Optional[str] = None
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/task_notes/{id}',
    description=""" Update an existing task note """,
    tags=['tasks_management', 'task_templates_management', 'task_statuses_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def task_notes_update(id: str, task: Optional[int] = None, since: Optional[str] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/task_statuses',
    description=""" Retrieve or search task statuses """,
    tags=['appointments_management', 'appointment_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def task_statuses_list(
    cursor: Optional[str] = None,
    page_size: Optional[int] = None,
    since: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/task_statuses',
    description=""" Create a task status """,
    tags=['patient_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def task_statuses_create(since: Optional[str] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/task_statuses/{id}',
    description=""" Retrieve an existing task status """,
    tags=['user_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def task_statuses_read(id: str, since: Optional[str] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/api/task_statuses/{id}',
    description=""" Update an existing task status """,
    tags=['patient_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def task_statuses_partial_update(id: str, since: Optional[str] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/task_statuses/{id}',
    description=""" Update an existing task status """,
    tags=['patient_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def task_statuses_update(id: str, since: Optional[str] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/task_templates',
    description=""" Retrieve or search task templates """,
    tags=['tasks_management', 'user_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def task_templates_list(
    cursor: Optional[str] = None,
    page_size: Optional[int] = None,
    assignee_user: Optional[int] = None,
    status: Optional[int] = None,
    assignee_group: Optional[int] = None,
    since: Optional[str] = None,
    category: Optional[int] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/task_templates',
    description=""" Create a task template """,
    tags=['task_statuses_management', 'tasks_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def task_templates_create(
    assignee_user: Optional[int] = None,
    status: Optional[int] = None,
    assignee_group: Optional[int] = None,
    since: Optional[str] = None,
    category: Optional[int] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/task_templates/{id}',
    description=""" Retrieve an existing task template """,
    tags=['tasks_management', 'task_statuses_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def task_templates_read(
    id: str,
    assignee_user: Optional[int] = None,
    status: Optional[int] = None,
    assignee_group: Optional[int] = None,
    since: Optional[str] = None,
    category: Optional[int] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/api/task_templates/{id}',
    description=""" Update an existing task template """,
    tags=['tasks_management', 'task_statuses_management', 'task_category_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def task_templates_partial_update(
    id: str,
    assignee_user: Optional[int] = None,
    status: Optional[int] = None,
    assignee_group: Optional[int] = None,
    since: Optional[str] = None,
    category: Optional[int] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/task_templates/{id}',
    description=""" Update an existing task template """,
    tags=['tasks_management', 'task_statuses_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def task_templates_update(
    id: str,
    assignee_user: Optional[int] = None,
    status: Optional[int] = None,
    assignee_group: Optional[int] = None,
    since: Optional[str] = None,
    category: Optional[int] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/tasks',
    description=""" Retrieve or search tasks """,
    tags=['tasks_management', 'task_category_management', 'task_statuses_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def tasks_list(
    cursor: Optional[str] = None,
    page_size: Optional[int] = None,
    status: Optional[int] = None,
    category: Optional[int] = None,
    due_at_date: Optional[str] = None,
    due_at_unknown: Optional[str] = None,
    since: Optional[str] = None,
    due_at_since: Optional[str] = None,
    assignee_user: Optional[int] = None,
    assignee_group: Optional[int] = None,
    due_at_range: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/tasks',
    description=""" Create a task """,
    tags=['appointments_management', 'appointment_management', 'tasks_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def tasks_create(
    status: Optional[int] = None,
    category: Optional[int] = None,
    due_at_date: Optional[str] = None,
    due_at_unknown: Optional[str] = None,
    since: Optional[str] = None,
    due_at_since: Optional[str] = None,
    assignee_user: Optional[int] = None,
    assignee_group: Optional[int] = None,
    due_at_range: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/tasks/{id}',
    description=""" Retrieve an existing task """,
    tags=[
        'tasks_management',
        'appointments_management',
        'task_statuses_management',
        'task_category_management',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def tasks_read(
    id: str,
    status: Optional[int] = None,
    category: Optional[int] = None,
    due_at_date: Optional[str] = None,
    due_at_unknown: Optional[str] = None,
    since: Optional[str] = None,
    due_at_since: Optional[str] = None,
    assignee_user: Optional[int] = None,
    assignee_group: Optional[int] = None,
    due_at_range: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/api/tasks/{id}',
    description=""" Update an existing task """,
    tags=['tasks_management', 'task_statuses_management', 'task_category_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def tasks_partial_update(
    id: str,
    status: Optional[int] = None,
    category: Optional[int] = None,
    due_at_date: Optional[str] = None,
    due_at_unknown: Optional[str] = None,
    since: Optional[str] = None,
    due_at_since: Optional[str] = None,
    assignee_user: Optional[int] = None,
    assignee_group: Optional[int] = None,
    due_at_range: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/tasks/{id}',
    description=""" Update an existing task """,
    tags=[
        'tasks_management',
        'task_statuses_management',
        'task_templates_management',
        'task_category_management',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def tasks_update(
    id: str,
    status: Optional[int] = None,
    category: Optional[int] = None,
    due_at_date: Optional[str] = None,
    due_at_unknown: Optional[str] = None,
    since: Optional[str] = None,
    due_at_since: Optional[str] = None,
    assignee_user: Optional[int] = None,
    assignee_group: Optional[int] = None,
    due_at_range: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transactions',
    description=""" Retrieve or search insurance transactions associated with billing line items """,
    tags=['appointments_management', 'appointment_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def transactions_list(
    cursor: Optional[str] = None,
    page_size: Optional[int] = None,
    line_item: Optional[int] = None,
    posted_date: Optional[str] = None,
    appointment: Optional[int] = None,
    since: Optional[str] = None,
    doctor: Optional[int] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transactions/{id}',
    description=""" Retrieve an existing insurance transaction """,
    tags=['appointments_management', 'appointment_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def transactions_read(
    id: str,
    line_item: Optional[int] = None,
    posted_date: Optional[str] = None,
    appointment: Optional[int] = None,
    since: Optional[str] = None,
    doctor: Optional[int] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/user_groups',
    description=""" Retrieve or search user groups """,
    tags=[
        'appointment_profiles_management',
        'doctor_management',
        'appointment_management',
        'appointments_management',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def user_groups_list(
    cursor: Optional[str] = None,
    page_size: Optional[int] = None,
    doctor: Optional[int] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/user_groups/{id}',
    description=""" Retrieve an existing user group """,
    tags=['doctor_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def user_groups_read(id: str, doctor: Optional[int] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/users',
    description=""" Retrieve or search users, `/api/users/current` can be used to identify logged in user, it will redirect to `/api/users/{current_user_id}` """,
    tags=[
        'appointments_management',
        'appointment_management',
        'appointment_profiles_management',
        'appointment_templates_management',
        'amendments_management',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def users_list(
    cursor: Optional[str] = None,
    page_size: Optional[int] = None,
    doctor: Optional[int] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/users/{id}',
    description=""" Retrieve an existing user, `/api/users/current` can be used to identify logged in user, it will redirect to `/api/users/{current_user_id}` """,
    tags=['doctor_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def users_read(id: str, doctor: Optional[int] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
