# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T18:47:53+00:00

from __future__ import annotations

from enum import Enum
from typing import List, Optional

from pydantic import BaseModel, Field


class BillingNote(BaseModel):
    appointment: Optional[int] = Field(None, description='', title='Appointment')
    created_at: Optional[str] = Field(None, description='', title='Created at')
    created_by: Optional[str] = Field(None, description='', title='Created by')
    id: Optional[int] = Field(None, description='ID of the billing note', title='ID')
    text: Optional[str] = Field(None, description='Content of the note', title='Text')


class ClinicalNote(BaseModel):
    locked: Optional[bool] = Field(None, description='', title='Locked')
    pdf: Optional[str] = Field(None, description='', title='Pdf')
    updated_at: Optional[str] = Field(None, description='', title='Updated at')


class CustomField(BaseModel):
    created_at: Optional[str] = Field(None, description='', title='Created at')
    field_type: Optional[int] = Field(None, description='', title='Field type')
    field_value: Optional[str] = Field(None, description='', title='Field value')
    updated_at: Optional[str] = Field(None, description='', title='Updated at')


class CustomVital(BaseModel):
    value: Optional[str] = Field(None, description='', title='Value')
    vital_type: Optional[int] = Field(None, description='', title='Vital type')


class Ins1Status(Enum):
    field_ = ''
    Incomplete_Information = 'Incomplete Information'
    In_Process_Emdeon = 'In Process Emdeon'
    Rejected_Emdeon = 'Rejected Emdeon'
    Rejected_Jopari = 'Rejected Jopari'
    In_Process_Payor = 'In Process Payor'
    Rejected_Waystar_Professional = 'Rejected Waystar Professional'
    Rejected_Waystar_Institutional = 'Rejected Waystar Institutional'
    In_Process_Payer = 'In Process Payer'
    Payer_Acknowledged = 'Payer Acknowledged'
    Rejected_Payor = 'Rejected Payor'
    Rejected_Payer = 'Rejected Payer'
    Paid_in_Full = 'Paid in Full'
    Partially_Paid = 'Partially Paid'
    Coordination_of_Benefits = 'Coordination of Benefits'
    ERA_Received = 'ERA Received'
    ERA_Denied = 'ERA Denied'
    HCFA_Form_Faxed = 'HCFA Form Faxed'


class Ins2Status(Enum):
    field_ = ''
    Incomplete_Information = 'Incomplete Information'
    In_Process_Emdeon = 'In Process Emdeon'
    Rejected_Emdeon = 'Rejected Emdeon'
    Rejected_Jopari = 'Rejected Jopari'
    In_Process_Payor = 'In Process Payor'
    Rejected_Waystar_Professional = 'Rejected Waystar Professional'
    Rejected_Waystar_Institutional = 'Rejected Waystar Institutional'
    In_Process_Payer = 'In Process Payer'
    Payer_Acknowledged = 'Payer Acknowledged'
    Rejected_Payor = 'Rejected Payor'
    Rejected_Payer = 'Rejected Payer'
    Paid_in_Full = 'Paid in Full'
    Partially_Paid = 'Partially Paid'
    Coordination_of_Benefits = 'Coordination of Benefits'
    ERA_Received = 'ERA Received'
    ERA_Denied = 'ERA Denied'
    HCFA_Form_Faxed = 'HCFA Form Faxed'


class Type(Enum):
    email = 'email'
    sms = 'sms'
    phone = 'phone'
    auto_call = 'auto_call'


class Reminder(BaseModel):
    id: Optional[int] = Field(None, description='', title='ID')
    scheduled_time: Optional[str] = Field(None, description='', title='Scheduled time')
    type: Optional[Type] = Field(None, description='', title='Type')


class Status(Enum):
    field_ = ''
    Arrived = 'Arrived'
    Checked_In = 'Checked In'
    Checked_In_Online = 'Checked In Online'
    In_Room = 'In Room'
    In_Session = 'In Session'
    Complete = 'Complete'
    Confirmed = 'Confirmed'
    Not_Confirmed = 'Not Confirmed'
    Rescheduled = 'Rescheduled'
    Cancelled = 'Cancelled'
    No_Show = 'No Show'


class StatusTransition(BaseModel):
    appointment: Optional[str] = Field(None, description='', title='Appointment')
    datetime: Optional[str] = Field(None, description='', title='Datetime')
    from_status: Optional[str] = Field(None, description='', title='From status')
    to_status: Optional[str] = Field(None, description='', title='To status')


class SmokingStatus(Enum):
    blank = 'blank'
    field_449868002 = '449868002'
    field_428041000124106 = '428041000124106'
    field_8517006 = '8517006'
    field_266919005 = '266919005'
    field_77176002 = '77176002'
    field_266927001 = '266927001'
    field_428071000124103 = '428071000124103'
    field_428061000124105 = '428061000124105'


class Vitals(BaseModel):
    blood_pressure_1: Optional[int] = Field(
        None, description='', title='Blood pressure 1'
    )
    blood_pressure_2: Optional[int] = Field(
        None, description='', title='Blood pressure 2'
    )
    bmi: Optional[str] = Field(None, description='', title='Bmi')
    head_circumference: Optional[float] = Field(
        None, description='', title='Head circumference'
    )
    head_circumference_units: Optional[str] = Field(
        None, description='', title='Head circumference units'
    )
    height: Optional[float] = Field(None, description='', title='Height')
    height_units: Optional[str] = Field(None, description='', title='Height units')
    oxygen_saturation: Optional[float] = Field(
        None, description='', title='Oxygen saturation'
    )
    pain: Optional[str] = Field(None, description='1-10 pain scale.', title='Pain')
    pulse: Optional[int] = Field(None, description='Beats per minute.', title='Pulse')
    respiratory_rate: Optional[int] = Field(
        None, description='Breathes per minute.', title='Respiratory rate'
    )
    smoking_status: Optional[SmokingStatus] = Field(
        None, description='', title='Smoking status'
    )
    temperature: Optional[float] = Field(None, description='', title='Temperature')
    temperature_units: Optional[str] = Field(
        None, description='', title='Temperature units'
    )
    weight: Optional[float] = Field(None, description='', title='Weight')
    weight_units: Optional[str] = Field(None, description='', title='Weight units')


class Appointment(BaseModel):
    allow_overlapping: Optional[bool] = Field(
        None, description='Bypass overlap check.', title='Allow overlapping'
    )
    appt_is_break: Optional[bool] = Field(None, description='', title='Appt is break')
    base_recurring_appointment: Optional[str] = Field(
        None,
        description='ID of base appointment of a recurrign series',
        title='Base recurring appointment',
    )
    billing_notes: Optional[List[BillingNote]] = Field(
        None,
        description='Billing notes of the appointment. For writing, check `/api/claim_billing_notes`',
        title='Billing notes',
    )
    billing_provider: Optional[str] = Field(
        None, description='', title='Billing provider'
    )
    billing_status: Optional[str] = Field(
        None,
        description="Should be one of `Auto Accident Claim`, `Balance Due`, `Bill Insurance`, `Bill Secondary Insurance`, `Durable Medical Equipment Claim`, `Internal Review`, `Paid In Full`, `Settled`, `Worker's Comp Claim` or one of the custom billing status",
        title='Billing status',
    )
    clinical_note: Optional[ClinicalNote] = Field(
        None, description='Associated clinical note object', title='ClinicalNote'
    )
    cloned_from: Optional[int] = Field(
        None,
        description='ID of the original appointment which this appointment cloned from. Will be null if the appointment is not cloned.',
        title='Cloned From',
    )
    color: Optional[str] = Field(None, description='', title='Color')
    created_at: Optional[str] = Field(None, description='', title='Created at')
    custom_fields: Optional[List[CustomField]] = Field(
        None, description='Custom appointment fields', title='Custom fields'
    )
    custom_vitals: Optional[List[CustomVital]] = Field(
        None,
        description='Custom vitals associated with this appointment.',
        title='Custom vitals',
    )
    deleted_flag: Optional[bool] = Field(
        None, description='Whether the appointmetn is deleted.', title='Deleted flag'
    )
    doctor: int = Field(..., description='Doctor ID', title='Doctor')
    duration: Optional[int] = Field(
        None,
        description='Length of the appointment in minutes. Optional if `profile` is provided.',
        title='Duration',
    )
    exam_room: int = Field(
        ...,
        description='Index of the exam room that this appointment occurs in. See `/api/offices`',
        title='Exam room',
    )
    extended_updated_at: Optional[str] = Field(
        None,
        description='The most recent update time among appointment itself, its vitals and its custom vitals',
        title='Extended updated at',
    )
    first_billed_date: Optional[str] = Field(
        None, description='', title='First billed date'
    )
    icd10_codes: Optional[List[str]] = Field(None, description='', title='Icd10 codes')
    icd9_codes: Optional[List[str]] = Field(None, description='', title='ICD9 Codes')
    id: Optional[str] = Field(
        None,
        description='Unique identifier. Usually numeric, but not always',
        title='Id',
    )
    ins1_status: Optional[Ins1Status] = Field(
        None, description='Billing status of primary insurer', title='Ins1 status'
    )
    ins2_status: Optional[Ins2Status] = Field(
        None, description='Billing status of secondary insurer', title='Ins2 status'
    )
    is_virtual_base: Optional[bool] = Field(
        None, description='', title='Is virtual base'
    )
    is_walk_in: Optional[bool] = Field(
        None,
        description='Whether the appointment is a walk-in appointment',
        title='Is walk in',
    )
    last_billed_date: Optional[str] = Field(
        None, description='', title='Last billed date'
    )
    notes: Optional[str] = Field(None, description='', title='Notes')
    office: int = Field(..., description='Office ID', title='Office')
    patient: int = Field(
        ...,
        description="ID of this appointment's patient. Breaks have a null patient field.",
        title='Patient',
    )
    primary_insurance_id_number: Optional[str] = Field(
        None, description='', title='Primary insurance id number'
    )
    primary_insurer_name: Optional[str] = Field(
        None, description='', title='Primary insurer name'
    )
    primary_insurer_payer_id: Optional[str] = Field(
        None, description='', title='Primary insurer payer id'
    )
    profile: Optional[int] = Field(
        None,
        description='ID of an `/api/appointment_profiles` instance. The profile sets default values for `color`, `duration`, and `reason` on creation, which can be overriden by setting these values explicitly.',
        title='Profile',
    )
    reason: Optional[str] = Field(None, description='Default to `""`', title='Reason')
    recurring_appointment: Optional[bool] = Field(
        None,
        description='Whether the appointment is a recurring appointment or not',
        title='Recurring appointment',
    )
    reminder_profile: Optional[str] = Field(
        None,
        description='Write-only. ID of an `/api/reminder_profiles` instance. Set this to apply a reminder profile to the appointment. Cannot be applied to an appointment with reminders.',
        title='Reminder profile',
    )
    reminders: Optional[List[Reminder]] = Field(
        None, description='Scheduled reminders of the appointment', title='Reminders'
    )
    scheduled_time: str = Field(
        ..., description='The starting time of the appointment', title='Scheduled time'
    )
    secondary_insurance_id_number: Optional[str] = Field(
        None, description='', title='Secondary insurance id number'
    )
    secondary_insurer_name: Optional[str] = Field(
        None, description='', title='Secondary insurer name'
    )
    secondary_insurer_payer_id: Optional[str] = Field(
        None, description='', title='Secondary insurer payer id'
    )
    status: Optional[Status] = Field(
        None,
        description='One of ``, `Arrived`, `Checked In`, `In Room`, `Cancelled`, `Complete`, `Confirmed`, `In Session`, `No Show`, `Not Confirmed`, or `Rescheduled`. Or one of the custom statuses.',
        title='Status',
    )
    status_transitions: Optional[List[StatusTransition]] = Field(
        None, description='', title='Status transitions'
    )
    supervising_provider: Optional[str] = Field(
        None,
        description='Supervising provider of appointment if set.',
        title='Supervising provider',
    )
    updated_at: Optional[str] = Field(None, description='', title='Updated at')
    vitals: Optional[Vitals] = Field(
        None,
        description='Clinical vitals associated with the appointment',
        title='SystemVitals',
    )


class AppointmentProfile(BaseModel):
    archived: Optional[bool] = Field(
        None,
        description='Indicates that the object has been soft-deleted and should not be used',
        title='Archived',
    )
    color: str = Field(..., description='', title='Color')
    doctor: Optional[int] = Field(None, description='', title='Doctor')
    duration: Optional[int] = Field(
        None, description='Length of an appointment in minutes', title='Duration'
    )
    id: Optional[int] = Field(None, description='', title='ID')
    name: str = Field(..., description='', title='Name')
    online_scheduling: bool = Field(
        ...,
        description='Whether this profile should be available for online scheduling',
        title='Online scheduling',
    )
    reason: Optional[str] = Field(None, description='', title='Reason')
    sort_order: Optional[int] = Field(
        None,
        description="Override the usual ordering ordering of appointments in the patient's appointments page. Lower values are shown at the top",
        title='Sort order',
    )


class OpenSlot(BaseModel):
    end: Optional[str] = Field(None, description='', title='End')
    start: Optional[str] = Field(None, description='', title='Start')


class AppointmentTemplate(BaseModel):
    archived: Optional[bool] = Field(
        None,
        description='Indicats that the object has been soft-deleted and should not be used',
        title='Archived',
    )
    date_end: Optional[str] = Field(None, description='', title='Date end')
    date_start: Optional[str] = Field(None, description='', title='Date start')
    duration: Optional[int] = Field(
        None, description='Length of an appointment in minutes', title='Duration'
    )
    exam_room: int = Field(
        ..., description='**1-based** index for the exam room', title='Exam room'
    )
    id: Optional[int] = Field(None, description='', title='ID')
    office: int = Field(..., description='', title='Office')
    open_slots: Optional[List[OpenSlot]] = Field(
        None,
        description='Array of time intervals during which the template is available. Only computed if the available and verbose query parameters are passed. Note that only slots long enough to fit an appointment with the corresponding profile are included.',
        title='Open Slots',
    )
    profile: int = Field(
        ..., description='ID of the appointment profile to default to', title='Profile'
    )
    scheduled_time: str = Field(..., description='', title='Scheduled time')
    week_days: List[int] = Field(
        ...,
        description='Array of integers that indicate week days (`0` = Monday, ..., `6` = Sunday)',
        title='Week days',
    )


class BillingStatus(Enum):
    field_ = ''
    Incomplete_Information = 'Incomplete Information'
    In_Process_Emdeon = 'In Process Emdeon'
    In_Process_iHCFA = 'In Process iHCFA'
    In_Process_Gateway = 'In Process Gateway'
    In_Process_Jopari = 'In Process Jopari'
    In_Process_Waystar = 'In Process Waystar'
    Rejected_Emdeon = 'Rejected Emdeon'
    Rejected_iHCFA = 'Rejected iHCFA'
    Rejected_Gateway = 'Rejected Gateway'
    Rejected_Jopari = 'Rejected Jopari'
    Rejected_Waystar = 'Rejected Waystar'
    In_Process_Payer = 'In Process Payer'
    Payer_Acknowledged = 'Payer Acknowledged'
    Rejected_Payer = 'Rejected Payer'
    Paid_in_Full = 'Paid in Full'
    Partially_Paid = 'Partially Paid'
    Coordination_of_Benefits = 'Coordination of Benefits'
    ERA_Received = 'ERA Received'
    ERA_Denied = 'ERA Denied'


class ProcedureType(Enum):
    C = 'C'
    H = 'H'
    U = 'U'
    S = 'S'


class BillingLineItem(BaseModel):
    adjustment: Optional[float] = Field(
        None, description='Adjustment from total billed', title='Adjustment'
    )
    allowed: Optional[float] = Field(
        None, description='Amount allowed by insurance', title='Allowed'
    )
    appointment: int = Field(..., description='Appointment ID', title='Appointment')
    balance_ins: Optional[float] = Field(
        None, description='Insurance balance', title='Balance ins'
    )
    balance_pt: Optional[float] = Field(
        None, description='Patient balance', title='Balance pt'
    )
    balance_total: Optional[str] = Field(
        None, description='Total balance', title='Balance total'
    )
    billed: Optional[float] = Field(None, description='Total billed', title='Billed')
    billing_status: Optional[BillingStatus] = Field(
        None,
        description='One of `""`, `"Incomplete Information"`, `"In Process Emdeon"`, `"In Process iHCFA"`, `"In Process Gateway"`, `"Rejected Emdeon"`, `"Rejected iHCFA"`, `"Rejected Gateway"`, `"In Process Payer"`, `"Payer Acknowledged"`, `"Rejected Payer"`, `"Paid in Full"`,  `"Partially Paid"`,  `"Coordination of Benefits"`,  `"ERA Received"`,  `"ERA Denied"`',
        title='Billing status',
    )
    code: str = Field(..., description='', title='Code')
    denied_flag: Optional[bool] = Field(None, description='', title='Denied flag')
    description: Optional[str] = Field(None, description='', title='Description')
    diagnosis_pointers: List[str] = Field(
        ..., description='List of 4 diagnosis pointers', title='Diagnosis pointers'
    )
    doctor: Optional[str] = Field(None, description='Doctor ID', title='Doctor')
    expected_reimbursement: Optional[float] = Field(
        None, description='', title='Expected reimbursement'
    )
    id: Optional[int] = Field(None, description='', title='ID')
    ins1_paid: Optional[float] = Field(
        None, description="Amount paid by patient's primary insurer", title='Ins1 paid'
    )
    ins2_paid: Optional[float] = Field(
        None,
        description="Amount paid by patient's secondary insurer",
        title='Ins2 paid',
    )
    ins3_paid: Optional[float] = Field(
        None, description="Amount paid by patinet's tertiary insurer", title='Ins3 paid'
    )
    ins_total: Optional[str] = Field(
        None, description="Total amount paid by patient's insurers", title='Ins total'
    )
    insurance_status: Optional[str] = Field(
        None,
        description='This corresponds to the "Status/Adj Type" from billing detail screen',
        title='Insurance status',
    )
    modifiers: Optional[List[str]] = Field(
        None, description='List of 4 code modifiers', title='Modifiers'
    )
    paid_total: Optional[str] = Field(
        None, description='Total amount paid', title='Paid total'
    )
    patient: Optional[str] = Field(None, description='Patient ID', title='Patient')
    posted_date: Optional[str] = Field(None, description='', title='Posted date')
    price: Optional[float] = Field(
        None, description='Price of procedure', title='Price'
    )
    procedure_type: ProcedureType = Field(
        ...,
        description='One of `"CPT(C)"`, `"HCPCS(H)"`, `"Custom(U)"`, use 1 character identifier when using `POST`',
        title='Procedure type',
    )
    pt_paid: Optional[float] = Field(
        None, description='Amount paid by patient', title='Pt paid'
    )
    quantity: Optional[float] = Field(None, description='', title='Quantity')
    service_date: Optional[str] = Field(
        None, description='Date on which the service was rendered', title='Service date'
    )
    units: Optional[str] = Field(None, description='Default to "UN"', title='Units')
    updated_at: Optional[str] = Field(None, description='', title='Updated at')


class Units(Enum):
    F2 = 'F2'
    GR = 'GR'
    ME = 'ME'
    ML = 'ML'
    UN = 'UN'


class NdcCodeItem(BaseModel):
    ndc_package_code: Optional[str] = Field(
        None, description='', title='Ndc package code'
    )
    quantity: Optional[str] = Field(None, description='', title='Quantity')
    units: Optional[Units] = Field(
        None,
        description='Can be one of `F2`(International Unit), `GR`(Gram), `ME`(Milligram), `ML`(Millimeter) or `UN`(Unit)',
        title='Units',
    )


class CptCode(BaseModel):
    code: Optional[str] = Field(None, description='', title='Code')
    diagnosis_pointers_icd10: Optional[List[str]] = Field(
        None,
        description='ICD10 codes represented in strings',
        title='Diagnosis pointers icd10',
    )
    diagnosis_pointers_icd9: Optional[List[str]] = Field(
        None,
        description='ICD9 codes represented in strings',
        title='Diagnosis pointers icd9',
    )
    modifiers: Optional[List[str]] = Field(
        None, description='Modifiers represented in strings', title='Modifiers'
    )
    ndc_code: Optional[List[NdcCodeItem]] = Field(
        None, description='Array of NDC Code objects', title='Ndc code'
    )
    price: Optional[str] = Field(
        None, description='This field is represented in string format', title='Price'
    )
    quantity: Optional[str] = Field(
        None, description='This field is represented in string format', title='Quantity'
    )


class CustomProcedureCode(BaseModel):
    code: Optional[str] = Field(None, description='', title='Code')
    price: Optional[str] = Field(
        None, description='This field is represented in string format', title='Price'
    )
    quantity: Optional[str] = Field(
        None, description='This field is represented in string format', title='Quantity'
    )


class NdcCodeItem1(BaseModel):
    ndc_package_code: Optional[str] = Field(
        None, description='', title='Ndc package code'
    )
    quantity: Optional[str] = Field(None, description='', title='Quantity')
    units: Optional[Units] = Field(
        None,
        description='Can be one of `F2`(International Unit), `GR`(Gram), `ME`(Milligram), `ML`(Millimeter) or `UN`(Unit)',
        title='Units',
    )


class HcpcsCode(BaseModel):
    code: Optional[str] = Field(None, description='', title='Code')
    diagnosis_pointers_icd10: Optional[List[str]] = Field(
        None,
        description='ICD10 codes represented in array of strings',
        title='Diagnosis pointers icd10',
    )
    diagnosis_pointers_icd9: Optional[List[str]] = Field(
        None,
        description='ICD9 codes represented in array of strings',
        title='Diagnosis pointers icd9',
    )
    modifiers: Optional[List[str]] = Field(
        None, description='Modifiers represented in array of strings', title='Modifiers'
    )
    ndc_code: Optional[List[NdcCodeItem1]] = Field(
        None, description='Array of NDC Code objects', title='Ndc code'
    )
    price: Optional[str] = Field(
        None, description='This field is represented in string format', title='Price'
    )
    quantity: Optional[str] = Field(
        None, description='This field is represented in string format', title='Quantity'
    )


class BillingProfile(BaseModel):
    archived: Optional[bool] = Field(None, description='', title='Archived')
    cpt_codes: Optional[List[CptCode]] = Field(
        None, description='Array of CPT Code objects', title='Cpt codes'
    )
    created_at: Optional[str] = Field(None, description='', title='Created at')
    custom_procedure_codes: Optional[List[CustomProcedureCode]] = Field(
        None,
        description='Array of custom procedure code objects',
        title='Custom procedure codes',
    )
    doctor: Optional[str] = Field(None, description='', title='Doctor')
    hcpcs_codes: Optional[List[HcpcsCode]] = Field(
        None, description='Array of HCPCS Code objects', title='Hcpcs codes'
    )
    icd10_codes: Optional[List[str]] = Field(
        None,
        description='ICD10 Codes represented in string format',
        title='Icd10 codes',
    )
    icd9_codes: Optional[List[str]] = Field(
        None, description='ICD9 Codes represented in string format', title='Icd9 codes'
    )
    id: Optional[int] = Field(None, description='', title='ID')
    name: Optional[str] = Field(None, description='', title='Name')
    updated_at: Optional[str] = Field(None, description='', title='Updated at')


class PlanType(Enum):
    field_1 = '1'
    field_2 = '2'
    field_3 = '3'
    field_4 = '4'
    field_5 = '5'
    field_6 = '6'


class CarePlan(BaseModel):
    appointment: Optional[str] = Field(None, description='', title='Appointment')
    code: Optional[str] = Field(None, description='', title='Code')
    code_system: Optional[str] = Field(None, description='', title='Code system')
    created_at: Optional[str] = Field(None, description='', title='Created at')
    description: Optional[str] = Field(None, description='', title='Description')
    id: Optional[int] = Field(None, description='', title='ID')
    instructions: Optional[str] = Field(None, description='', title='Instructions')
    patient: Optional[str] = Field(None, description='', title='Patient')
    plan_type: Optional[PlanType] = Field(
        None,
        description='Can be one of the following: `1`(Goal), `2`(Patient education), `3`(Patient decision aid), `4`(Patient clinical instruction), `5`(Referral to other doctor), `6`(Health concerns)',
        title='Plan type',
    )
    scheduled_date: Optional[str] = Field(None, description='', title='Scheduled date')
    title: Optional[str] = Field(None, description='', title='Title')
    updated_at: Optional[str] = Field(None, description='', title='Updated at')


class CareTeamMember(BaseModel):
    appointment: Optional[str] = Field(None, description='', title='Appointment')
    created_at: Optional[str] = Field(None, description='', title='Created at')
    id: Optional[int] = Field(None, description='', title='ID')
    patient: Optional[str] = Field(None, description='', title='Patient')
    user: Optional[str] = Field(None, description='', title='User')


class PaymentMethod(Enum):
    CASH = 'CASH'
    CHCK = 'CHCK'
    DBIT = 'DBIT'
    CRDT = 'CRDT'
    AMEX = 'AMEX'
    VISA = 'VISA'
    MSTR = 'MSTR'
    DISC = 'DISC'
    SQR1 = 'SQR1'
    SQRE = 'SQRE'
    PTPA = 'PTPA'
    ONPT = 'ONPT'
    OTHR = 'OTHR'


class PaymentTransactionType(Enum):
    field_ = ''
    REF = 'REF'
    COR = 'COR'
    COPAY = 'COPAY'
    COINSR = 'COINSR'
    OTHR = 'OTHR'


class CashPayment(BaseModel):
    amount: Optional[float] = Field(
        None,
        description='Amount of cash for this payment, cannot be zero',
        title='Amount',
    )
    appointment: Optional[int] = Field(
        None,
        description='If this is absent, the apponitment will be inferred from line item',
        title='Appointment',
    )
    created_at: Optional[str] = Field(None, description='', title='Created at')
    created_by: Optional[str] = Field(None, description='', title='Created by')
    doctor: Optional[int] = Field(None, description='', title='Doctor')
    id: Optional[int] = Field(None, description='', title='ID')
    line_item: Optional[int] = Field(None, description='', title='Line item')
    notes: Optional[str] = Field(None, description='', title='Notes')
    patient: int = Field(..., description='', title='Patient')
    payment_method: Optional[PaymentMethod] = Field(
        None,
        description='`"CASH", "CHCK" for Check, "DBIT" for Debit, "CRDT" for Credit Card, "AMEX" for American Express, "VISA", "MSTR" for Mastercard, "DISC" for Discover, "SQR1" for Square (legacy), "SQRE" for Square, "PTPA" for Patient Payments, "ONPT" for onpatient, "OTHR" for Other`',
        title='Payment method',
    )
    payment_transaction_type: Optional[PaymentTransactionType] = Field(
        None,
        description='`"" for Credit, "REF" for Refund, "COR" for Correction, "COPAY" for Copay, "COINSR" for Coinsurance, "OTHR" for Other`',
        title='Payment transaction type',
    )
    posted_date: Optional[str] = Field(None, description='', title='Posted date')
    received_date: Optional[str] = Field(None, description='', title='Received date')
    trace_number: Optional[str] = Field(None, description='', title='Trace number')
    updated_at: Optional[str] = Field(None, description='', title='Updated at')


class Action(Enum):
    C = 'C'
    U = 'U'
    D = 'D'
    F = 'F'
    A = 'A'


class CashPaymentLog(BaseModel):
    action: Optional[Action] = Field(
        None,
        description='`C`(Create), `U`(Update), `D`(Delete), `F`(Fill), `A`(Autofill)',
        title='Action',
    )
    amount: Optional[float] = Field(None, description='', title='Amount')
    appointment: Optional[str] = Field(
        None,
        description='ID of appointment associated with the payment',
        title='Appointment',
    )
    created_by: Optional[str] = Field(
        None, description='ID of user who created the payment', title='Created by'
    )
    doctor: Optional[str] = Field(None, description='', title='Doctor')
    id: Optional[int] = Field(None, description='', title='ID')
    patient: Optional[str] = Field(None, description='', title='Patient')
    payment_method: Optional[PaymentMethod] = Field(
        None,
        description='`"CASH", "CHCK" for Check, "DBIT" for Debit, "CRDT" for Credit Card, "AMEX" for American Express, "VISA", "MSTR" for Mastercard, "DISC" for Discover, "SQR1" for Square (legacy), "SQRE" for Square, "PTPA" for Patient Payments, "ONPT" for onpatient, "OTHR" for Other`',
        title='Payment method',
    )
    source: Optional[str] = Field(None, description='', title='Source')
    updated_at: Optional[str] = Field(None, description='', title='Updated at')


class ClaimBillingNotes(BaseModel):
    appointment: int = Field(..., description='', title='Appointment')
    created_at: Optional[str] = Field(None, description='', title='Created at')
    created_by: Optional[str] = Field(
        None, description='ID of `/users` when created the note', title='Created by'
    )
    id: Optional[int] = Field(None, description='', title='ID')
    text: Optional[str] = Field(None, description='', title='Text')


class Value(BaseModel):
    clinical_note_field: Optional[int] = Field(
        None, description='', title='Clinical Note Field'
    )
    id: Optional[int] = Field(None, description='', title='Id')
    value: Optional[str] = Field(None, description='', title='')


class ClinicalNoteSection(BaseModel):
    clinical_note_template: Optional[int] = Field(
        None, description='', title='Clinical Note Template'
    )
    name: Optional[str] = Field(None, description='', title='Name')
    values: Optional[List[Value]] = Field(None, description='', title='Values')


class ClinicalNote1(BaseModel):
    appointment: Optional[str] = Field(None, description='', title='Appointment')
    archived: Optional[bool] = Field(None, description='', title='Archived')
    clinical_note_sections: Optional[List[ClinicalNoteSection]] = Field(
        None, description='', title='Clinical Note Sections'
    )
    patient: Optional[str] = Field(None, description='', title='Patient')


class ConsentForm(BaseModel):
    archived: Optional[bool] = Field(None, description='', title='Archived')
    assign_by_default: bool = Field(
        ...,
        description='If true, consent form will always be automatically assigned to appointments',
        title='Assign by default',
    )
    created_at: Optional[str] = Field(None, description='', title='Created at')
    doctor: int = Field(..., description='', title='Doctor')
    id: Optional[int] = Field(None, description='', title='ID')
    is_mandatory: bool = Field(
        ...,
        description='If true, consent form must be signed prior to appointment check in',
        title='Is mandatory',
    )
    order: Optional[int] = Field(
        None,
        description='The order of consent forms that will show in management screen',
        title='Order',
    )
    title: str = Field(..., description='', title='Title')
    updated_at: Optional[str] = Field(None, description='', title='Updated at')
    uri: str = Field(
        ...,
        description='Files are passed using `multipart/form-data` encoding, but returned as URLs.',
        title='Uri',
    )


class RequestServiceType(Enum):
    field_1 = '1'
    field_2 = '2'
    field_3 = '3'
    field_4 = '4'
    field_5 = '5'
    field_6 = '6'
    field_7 = '7'
    field_8 = '8'
    field_9 = '9'
    field_10 = '10'
    field_11 = '11'
    field_12 = '12'
    field_13 = '13'
    field_14 = '14'
    field_15 = '15'
    field_16 = '16'
    field_17 = '17'
    field_18 = '18'
    field_19 = '19'
    field_20 = '20'
    field_21 = '21'
    field_22 = '22'
    field_23 = '23'
    field_24 = '24'
    field_25 = '25'
    field_26 = '26'
    field_27 = '27'
    field_28 = '28'
    field_30 = '30'
    field_32 = '32'
    field_33 = '33'
    field_34 = '34'
    field_35 = '35'
    field_36 = '36'
    field_37 = '37'
    field_38 = '38'
    field_39 = '39'
    field_40 = '40'
    field_41 = '41'
    field_42 = '42'
    field_43 = '43'
    field_44 = '44'
    field_45 = '45'
    field_46 = '46'
    field_47 = '47'
    field_48 = '48'
    field_49 = '49'
    field_50 = '50'
    field_51 = '51'
    field_52 = '52'
    field_53 = '53'
    field_54 = '54'
    field_55 = '55'
    field_56 = '56'
    field_57 = '57'
    field_58 = '58'
    field_59 = '59'
    field_60 = '60'
    field_61 = '61'
    field_62 = '62'
    field_63 = '63'
    field_64 = '64'
    field_65 = '65'
    field_66 = '66'
    field_67 = '67'
    field_68 = '68'
    field_69 = '69'
    field_70 = '70'
    field_71 = '71'
    field_72 = '72'
    field_73 = '73'
    field_74 = '74'
    field_75 = '75'
    field_76 = '76'
    field_77 = '77'
    field_78 = '78'
    field_79 = '79'
    field_80 = '80'
    field_81 = '81'
    field_82 = '82'
    field_83 = '83'
    field_84 = '84'
    field_85 = '85'
    field_86 = '86'
    field_87 = '87'
    field_88 = '88'
    field_89 = '89'
    field_90 = '90'
    field_91 = '91'
    field_92 = '92'
    field_93 = '93'
    field_94 = '94'
    field_95 = '95'
    field_96 = '96'
    field_97 = '97'
    field_98 = '98'
    field_99 = '99'
    A0 = 'A0'
    A1 = 'A1'
    A2 = 'A2'
    A3 = 'A3'
    A4 = 'A4'
    A5 = 'A5'
    A6 = 'A6'
    A7 = 'A7'
    A8 = 'A8'
    A9 = 'A9'
    AA = 'AA'
    AB = 'AB'
    AC = 'AC'
    AD = 'AD'
    AE = 'AE'
    AF = 'AF'
    AG = 'AG'
    AH = 'AH'
    AI = 'AI'
    AJ = 'AJ'
    AK = 'AK'
    AL = 'AL'
    AM = 'AM'
    AN = 'AN'
    AO = 'AO'
    AQ = 'AQ'
    AR = 'AR'
    B1 = 'B1'
    B2 = 'B2'
    B3 = 'B3'
    BA = 'BA'
    BB = 'BB'
    BC = 'BC'
    BD = 'BD'
    BE = 'BE'
    BF = 'BF'
    BG = 'BG'
    BH = 'BH'
    BI = 'BI'
    BJ = 'BJ'
    BK = 'BK'
    BL = 'BL'
    BM = 'BM'
    BN = 'BN'
    BP = 'BP'
    BQ = 'BQ'
    BR = 'BR'
    BS = 'BS'
    BT = 'BT'
    BU = 'BU'
    BV = 'BV'
    BW = 'BW'
    BX = 'BX'
    BY = 'BY'
    BZ = 'BZ'
    C1 = 'C1'
    CA = 'CA'
    CB = 'CB'
    CC = 'CC'
    CD = 'CD'
    CE = 'CE'
    CF = 'CF'
    CG = 'CG'
    CH = 'CH'
    CI = 'CI'
    CJ = 'CJ'
    CK = 'CK'
    CL = 'CL'
    CM = 'CM'
    CN = 'CN'
    CO = 'CO'
    CP = 'CP'
    CQ = 'CQ'
    DG = 'DG'
    DM = 'DM'
    DS = 'DS'
    GF = 'GF'
    GN = 'GN'
    GY = 'GY'
    IC = 'IC'
    MH = 'MH'
    NI = 'NI'
    ON = 'ON'
    PT = 'PT'
    PU = 'PU'
    RN = 'RN'
    RT = 'RT'
    TC = 'TC'
    TN = 'TN'
    UC = 'UC'


class Coverage(BaseModel):
    appointment: Optional[str] = Field(None, description='', title='Appointment')
    cob_level: Optional[str] = Field(
        None,
        description='The level of insurance the eligibility check was run on. Can be one of the following: `Primary Insurance` or `Secondary Insurance`',
        title='Cob level',
    )
    coverage_details: Optional[str] = Field(
        None,
        description='A variable size object containing the details of the eligibility check, if returned by the clearinghouse that ran the eligibility check',
        title='Coverage details',
    )
    coverage_subscriber: Optional[str] = Field(
        None,
        description='A variable size object containing subscriber information, if returned by the clearinghouse that ran the eligibility check',
        title='Coverage subscriber',
    )
    eligibility: Optional[str] = Field(
        None,
        description="\nValue | Description\n--- | ----\n`'1'` | Active Coverage\n`'2'` | Active - Full Risk Capitation\n`'3'` | Active - Services Capitated\n`'4'` | Active - Services Capitated to Primary Care Physician\n`'5'` | Active - Pending Investigation\n`'6'` | Inactive\n`'7'` | Inactive - Pending Eligibility Update\n`'8'` | Inactive - Pending Investigation\n`'A'` | Co-Insurance\n`'B'` | Co-Payment\n`'C'` | Deductible\n`'CB'` | Coverage Basis\n`'D'` | Benefit Description\n`'E'` | Exclusions\n`'F'` | Limitations\n`'G'` | Out of Pocket (Stop Loss)\n`'H'` | Unlimited\n`'I'` | Non-Covered\n`'J'` | Cost Containment\n`'K'` | Reserve\n`'L'` | Primary Care Provider\n`'M'` | Pre-existing Condition\n`'MC'` | Managed Care Coordinator\n`'N'` | Services Restricted to Following Provider\n`'O'` | Not Deemed a Medical Necessity\n`'P'` | Benefit Disclaimer\n`'Q'` | Second Surgical Opinion Required\n`'R'` | Other or Additional Payor\n`'S'` | Prior Year(s) History\n`'T'` | Card(s) Reported Lost/Stolen\n`'U'` | Contact Following Entity for Eligibility or Benefit Information\n`'V'` | Cannot Process\n`'W'` | Other Source of Data\n`'X'` | Health Care Facility\n`'Y'` | Spend Down\n",
        title='Eligibility',
    )
    patient: Optional[str] = Field(None, description='', title='Patient')
    payer_name: Optional[str] = Field(
        None,
        description='The name of the payer as returned by the clearinghouse that ran the eligibility check',
        title='Payer name',
    )
    query_date: Optional[str] = Field(
        None, description='The time at which the request was made', title='Query date'
    )
    request_service_type: Optional[RequestServiceType] = Field(
        None,
        description="\nValue | Description\n--- | ----\n`'1'` | Medical Care\n`'2'` | Surgical\n`'3'` | Consultation\n`'4'` | Diagnostic X-Ray\n`'5'` | Diagnostic Lab\n`'6'` | Radiation Therapy\n`'7'` | Anesthesia\n`'8'` | Surgical Assistance\n`'9'` | Other Medical\n`'10'` | Blood Charges\n`'11'` | Used Durable Medical Equipment\n`'12'` | Durable Medical Equipment Purchase\n`'13'` | Ambulatory Service Center Facility\n`'14'` | Renal Supplies in the Home\n`'15'` | Alternate Method Dialysis\n`'16'` | Chronic Renal Disease (CRD) Equipment\n`'17'` | Pre-Admission Testing\n`'18'` | Durable Medical Equipment Rental\n`'19'` | Pneumonia Vaccine\n`'20'` | Second Surgical Opinion\n`'21'` | Third Surgical Opinion\n`'22'` | Social Work\n`'23'` | Diagnostic Dental\n`'24'` | Periodontics\n`'25'` | Restorative\n`'26'` | Endodontics\n`'27'` | Maxillofacial Prosthetics\n`'28'` | Adjunctive Dental Services\n`'30'` | Health Benefit Plan Coverage\n`'32'` | Plan Waiting Period\n`'33'` | Chiropractic\n`'34'` | Chiropractic Office Visits\n`'35'` | Dental Care\n`'36'` | Dental Crowns\n`'37'` | Dental Accident\n`'38'` | Orthodontics\n`'39'` | Prosthodontics\n`'40'` | Oral Surgery\n`'41'` | Routine (Preventive) Dental\n`'42'` | Home Health Care\n`'43'` | Home Health Prescriptions\n`'44'` | Home Health Visits\n`'45'` | Hospice\n`'46'` | Respite Care\n`'47'` | Hospital\n`'48'` | Hospital - Inpatient\n`'49'` | Hospital - Room and Board\n`'50'` | Hospital - Outpatient\n`'51'` | Hospital - Emergency Accident\n`'52'` | Hospital - Emergency Medical\n`'53'` | Hospital - Ambulatory Surgical\n`'54'` | Long Term Care\n`'55'` | Major Medical\n`'56'` | Medically Related Transportation\n`'57'` | Air Transportation\n`'58'` | Cabulance\n`'59'` | Licensed Ambulance\n`'60'` | General Benefits\n`'61'` | In-vitro Fertilization\n`'62'` | MRI/CAT Scan\n`'63'` | Donor Procedures\n`'64'` | Acupuncture\n`'65'` | Newborn Care\n`'66'` | Pathology\n`'67'` | Smoking Cessation\n`'68'` | Well Baby Care\n`'69'` | Maternity\n`'70'` | Transplants\n`'71'` | Audiology Exam\n`'72'` | Inhalation Therapy\n`'73'` | Diagnostic Medical\n`'74'` | Private Duty Nursing\n`'75'` | Prosthetic Device\n`'76'` | Dialysis\n`'77'` | Otological Exam\n`'78'` | Chemotherapy\n`'79'` | Allergy Testing\n`'80'` | Immunizations\n`'81'` | Routine Physical\n`'82'` | Family Planning\n`'83'` | Infertility\n`'84'` | Abortion\n`'85'` | AIDS\n`'86'` | Emergency Services\n`'87'` | Cancer\n`'88'` | Pharmacy\n`'89'` | Free Standing Prescription Drug\n`'90'` | Mail Order Prescription Drug\n`'91'` | Brand Name Prescription Drug\n`'92'` | Generic Prescription Drug\n`'93'` | Podiatry\n`'94'` | Podiatry - Office Visits\n`'95'` | Podiatry - Nursing Home Visits\n`'96'` | Professional (Physician)\n`'97'` | Anesthesiologist\n`'98'` | Professional (Physician) Visit - Office\n`'99'` | Professional (Physician) Visit - Inpatient\n`'A0'` | Professional (Physician) Visit - Outpatient\n`'A1'` | Professional (Physician) Visit - Nursing Home\n`'A2'` | Professional (Physician) Visit - Skilled Nursing Facility\n`'A3'` | Professional (Physician) Visit - Home\n`'A4'` | Psychiatric\n`'A5'` | Psychiatric - Room and Board\n`'A6'` | Psychotherapy\n`'A7'` | Psychiatric - Inpatient\n`'A8'` | Psychiatric - Outpatient\n`'A9'` | Rehabilitation\n`'AA'` | Rehabilitation - Room and Board\n`'AB'` | Rehabilitation - Inpatient\n`'AC'` | Rehabilitation - Outpatient\n`'AD'` | Occupational Therapy\n`'AE'` | Physical Medicine\n`'AF'` | Speech Therapy\n`'AG'` | Skilled Nursing Care\n`'AH'` | Skilled Nursing Care - Room and Board\n`'AI'` | Substance Abuse\n`'AJ'` | Alcoholism\n`'AK'` | Drug Addiction\n`'AL'` | Vision (Optometry)\n`'AM'` | Frames\n`'AN'` | Routine Exam\n`'AO'` | Lenses\n`'AQ'` | Nonmedically Necessary Physical\n`'AR'` | Experimental Drug Therapy\n`'B1'` | Burn Care\n`'B2'` | Brand Name Prescription Drug - Formulary\n`'B3'` | Brand Name Prescription Drug - Non-Formulary\n`'BA'` | Independent Medical Evaluation\n`'BB'` | Partial Hospitalization (Psychiatric)\n`'BC'` | Day Care (Psychiatric)\n`'BD'` | Cognitive Therapy\n`'BE'` | Massage Therapy\n`'BF'` | Pulmonary Rehabilitation\n`'BG'` | Cardiac Rehabilitation\n`'BH'` | Pediatric\n`'BI'` | Nursery\n`'BJ'` | Skin\n`'BK'` | Orthopedic\n`'BL'` | Cardiac\n`'BM'` | Lymphatic\n`'BN'` | Gastrointestinal\n`'BP'` | Endocrine\n`'BQ'` | Neurology\n`'BR'` | Eye\n`'BS'` | Invasive Procedures\n`'BT'` | Gynecological\n`'BU'` | Obstetrical\n`'BV'` | Obstetrical/Gynecological\n`'BW'` | Mail Order Prescription Drug: Brand Name\n`'BX'` | Mail Order Prescription Drug: Generic\n`'BY'` | Physician Visit - Office: Sick\n`'BZ'` | Physician Visit - Office: Well\n`'C1'` | Coronary Care\n`'CA'` | Private Duty Nursing - Inpatient\n`'CB'` | Private Duty Nursing - Home\n`'CC'` | Surgical Benefits - Professional (Physician)\n`'CD'` | Surgical Benefits - Facility\n`'CE'` | Mental Health Provider - Inpatient\n`'CF'` | Mental Health Provider - Outpatient\n`'CG'` | Mental Health Facility - Inpatient\n`'CH'` | Mental Health Facility - Outpatient\n`'CI'` | Substance Abuse Facility - Inpatient\n`'CJ'` | Substance Abuse Facility - Outpatient\n`'CK'` | Screening X-ray\n`'CL'` | Screening laboratory\n`'CM'` | Mammogram, High Risk Patient\n`'CN'` | Mammogram, Low Risk Patient\n`'CO'` | Flu Vaccination\n`'CP'` | Eyewear and Eyewear Accessories\n`'CQ'` | Case Management\n`'DG'` | Dermatology\n`'DM'` | Durable Medical Equipment\n`'DS'` | Diabetic Supplies\n`'GF'` | Generic Prescription Drug - Formulary\n`'GN'` | Generic Prescription Drug - Non-Formulary\n`'GY'` | Allergy\n`'IC'` | Intensive Care\n`'MH'` | Mental Health\n`'NI'` | Neonatal Intensive Care\n`'ON'` | Oncology\n`'PT'` | Physical Therapy\n`'PU'` | Pulmonary\n`'RN'` | Renal\n`'RT'` | Residential Psychiatric Treatment\n`'TC'` | Transitional Care\n`'TN'` | Transitional Nursery Care\n`'UC'` | Urgent Care\n",
        title='Request service type',
    )
    service_type_description: Optional[str] = Field(
        None, description='', title='Service type description'
    )


class CustomAppointmentFieldType(BaseModel):
    archived: Optional[bool] = Field(
        None,
        description='Indicates that the object has been soft-deleted and should not be used',
        title='Archived',
    )
    created_at: Optional[str] = Field(None, description='', title='Created at')
    doctor: Optional[str] = Field(None, description='', title='Doctor')
    field_desc: Optional[str] = Field(
        None, description='Description of the custom field', title='Field desc'
    )
    field_name: Optional[str] = Field(None, description='', title='Field name')
    id: Optional[int] = Field(None, description='', title='ID')
    order: Optional[int] = Field(
        None, description="displayed order in patient's demographic page", title='Order'
    )
    updated_at: Optional[str] = Field(None, description='', title='Updated at')


class CustomInsurancePlanName(BaseModel):
    archived: Optional[bool] = Field(None, description='', title='Archived')
    created_at: Optional[str] = Field(None, description='', title='Created at')
    doctor: Optional[str] = Field(
        None,
        description='List custom appointment fields defined by the doctor with the given ID',
        title='Doctor',
    )
    id: Optional[int] = Field(None, description='', title='ID')
    insurance_plan_name: Optional[str] = Field(
        None, description='Custom name', title='Insurance plan name'
    )
    updated_at: Optional[str] = Field(None, description='', title='Updated at')
    user: Optional[str] = Field(
        None,
        description='User who created the custom insurance plan name',
        title='User',
    )


class CustomPatientFieldType(BaseModel):
    allowed_values: Optional[str] = Field(
        None,
        description='Allowed values if needed. Values must be separated by comma `,`',
        title='Allowed values',
    )
    archived: Optional[bool] = Field(
        None,
        description='Indicates that the object has been soft-deleted, and should not be used',
        title='Archived',
    )
    description: Optional[str] = Field(None, description='', title='Description')
    doctor: int = Field(..., description='', title='Doctor')
    id: Optional[int] = Field(None, description='', title='ID')
    name: str = Field(..., description='', title='Name')
    template_name: Optional[str] = Field(
        None,
        description='Custom Patient Demographics with `template_name` set can be inserted into clinical notes via Form Builder. Only letters (a-z or A-Z), numbers (0-9) or underscore(_) are allowed for template name.',
        title='Template name',
    )


class DataType(Enum):
    text = 'text'
    number = 'number'
    single_sel = 'single_sel'


class CustomVitalType(BaseModel):
    allowed_values: Optional[List[str]] = Field(
        None,
        description="If `data_type` is `single_sel`, this is the array of values in the select's dropdown.",
        title='Allowed values',
    )
    archived: Optional[bool] = Field(
        None,
        description='Indicates that the object has been soft-deleted and should not be used',
        title='Archived',
    )
    data_type: Optional[DataType] = Field(
        None, description='One of `text`, `number`, or `single_sel`', title='Data type'
    )
    description: Optional[str] = Field(None, description='', title='Description')
    doctor: Optional[str] = Field(
        None,
        description='ID of the doctor who created the custom vital',
        title='Doctor',
    )
    fraction_delimiter: Optional[str] = Field(
        None,
        description='If `is_fraction_field` is true, this is the character separating the numerator and denominator',
        title='Fraction delimiter',
    )
    id: Optional[int] = Field(None, description='', title='ID')
    is_fraction_field: Optional[bool] = Field(
        None, description='', title='Is fraction field'
    )
    name: Optional[str] = Field(None, description='', title='Name')
    unit: Optional[str] = Field(None, description='', title='Unit')


class Country(Enum):
    BD = 'BD'
    WF = 'WF'
    BF = 'BF'
    BG = 'BG'
    BA = 'BA'
    BB = 'BB'
    BE = 'BE'
    BL = 'BL'
    BM = 'BM'
    BN = 'BN'
    BO = 'BO'
    JP = 'JP'
    BI = 'BI'
    BJ = 'BJ'
    BT = 'BT'
    JM = 'JM'
    BV = 'BV'
    JO = 'JO'
    WS = 'WS'
    BQ = 'BQ'
    BR = 'BR'
    BS = 'BS'
    JE = 'JE'
    BY = 'BY'
    BZ = 'BZ'
    RU = 'RU'
    RW = 'RW'
    RS = 'RS'
    TL = 'TL'
    RE = 'RE'
    TM = 'TM'
    TJ = 'TJ'
    RO = 'RO'
    TK = 'TK'
    GW = 'GW'
    GU = 'GU'
    GT = 'GT'
    GS = 'GS'
    GR = 'GR'
    GQ = 'GQ'
    GP = 'GP'
    BH = 'BH'
    GY = 'GY'
    GG = 'GG'
    GF = 'GF'
    GE = 'GE'
    GD = 'GD'
    GB = 'GB'
    GA = 'GA'
    GN = 'GN'
    GM = 'GM'
    GL = 'GL'
    KW = 'KW'
    GI = 'GI'
    GH = 'GH'
    OM = 'OM'
    TN = 'TN'
    BW = 'BW'
    HR = 'HR'
    HT = 'HT'
    HU = 'HU'
    HK = 'HK'
    HN = 'HN'
    HM = 'HM'
    KR = 'KR'
    AD = 'AD'
    PR = 'PR'
    PS = 'PS'
    PW = 'PW'
    PT = 'PT'
    KN = 'KN'
    PY = 'PY'
    AI = 'AI'
    PA = 'PA'
    PF = 'PF'
    PG = 'PG'
    PE = 'PE'
    PK = 'PK'
    PH = 'PH'
    PN = 'PN'
    PL = 'PL'
    PM = 'PM'
    ZM = 'ZM'
    EH = 'EH'
    EE = 'EE'
    EG = 'EG'
    ZA = 'ZA'
    EC = 'EC'
    AL = 'AL'
    AO = 'AO'
    KZ = 'KZ'
    ET = 'ET'
    ZW = 'ZW'
    KY = 'KY'
    ES = 'ES'
    ER = 'ER'
    ME = 'ME'
    MD = 'MD'
    MG = 'MG'
    MF = 'MF'
    MA = 'MA'
    MC = 'MC'
    UZ = 'UZ'
    MM = 'MM'
    ML = 'ML'
    MO = 'MO'
    MN = 'MN'
    MH = 'MH'
    MK = 'MK'
    MU = 'MU'
    MT = 'MT'
    MW = 'MW'
    MV = 'MV'
    MQ = 'MQ'
    MP = 'MP'
    MS = 'MS'
    MR = 'MR'
    AU = 'AU'
    UG = 'UG'
    MY = 'MY'
    MX = 'MX'
    MZ = 'MZ'
    FR = 'FR'
    AW = 'AW'
    AF = 'AF'
    AX = 'AX'
    FI = 'FI'
    FJ = 'FJ'
    FK = 'FK'
    FM = 'FM'
    FO = 'FO'
    NI = 'NI'
    NL = 'NL'
    NO = 'NO'
    NA = 'NA'
    VU = 'VU'
    NC = 'NC'
    NE = 'NE'
    NF = 'NF'
    NG = 'NG'
    NZ = 'NZ'
    NP = 'NP'
    NR = 'NR'
    NU = 'NU'
    CK = 'CK'
    CI = 'CI'
    CH = 'CH'
    CO = 'CO'
    CN = 'CN'
    CM = 'CM'
    CL = 'CL'
    CC = 'CC'
    CA = 'CA'
    CG = 'CG'
    CF = 'CF'
    CD = 'CD'
    CZ = 'CZ'
    CY = 'CY'
    CX = 'CX'
    CR = 'CR'
    KP = 'KP'
    CW = 'CW'
    CV = 'CV'
    CU = 'CU'
    SZ = 'SZ'
    SY = 'SY'
    SX = 'SX'
    KG = 'KG'
    KE = 'KE'
    SS = 'SS'
    SR = 'SR'
    KI = 'KI'
    KH = 'KH'
    SV = 'SV'
    KM = 'KM'
    ST = 'ST'
    SK = 'SK'
    SJ = 'SJ'
    SI = 'SI'
    SH = 'SH'
    SO = 'SO'
    SN = 'SN'
    SM = 'SM'
    SL = 'SL'
    SC = 'SC'
    SB = 'SB'
    SA = 'SA'
    SG = 'SG'
    SE = 'SE'
    SD = 'SD'
    DO = 'DO'
    DM = 'DM'
    DJ = 'DJ'
    DK = 'DK'
    DE = 'DE'
    YE = 'YE'
    AT = 'AT'
    DZ = 'DZ'
    US = 'US'
    UY = 'UY'
    YT = 'YT'
    UM = 'UM'
    LB = 'LB'
    LC = 'LC'
    LA = 'LA'
    TV = 'TV'
    TW = 'TW'
    TT = 'TT'
    TR = 'TR'
    LK = 'LK'
    LI = 'LI'
    LV = 'LV'
    TO = 'TO'
    LT = 'LT'
    LU = 'LU'
    LR = 'LR'
    LS = 'LS'
    TH = 'TH'
    TF = 'TF'
    TG = 'TG'
    TD = 'TD'
    TC = 'TC'
    LY = 'LY'
    VA = 'VA'
    VC = 'VC'
    AE = 'AE'
    VE = 'VE'
    AG = 'AG'
    VG = 'VG'
    IQ = 'IQ'
    VI = 'VI'
    IS = 'IS'
    IR = 'IR'
    AM = 'AM'
    IT = 'IT'
    VN = 'VN'
    AQ = 'AQ'
    AS = 'AS'
    AR = 'AR'
    IM = 'IM'
    IL = 'IL'
    IO = 'IO'
    IN = 'IN'
    TZ = 'TZ'
    AZ = 'AZ'
    IE = 'IE'
    ID = 'ID'
    UA = 'UA'
    QA = 'QA'


class JobTitle(Enum):
    field_ = ''
    Provider_Staff__Private_Practice_ = 'Provider/Staff (Private Practice)'
    Provider_Staff__Hospital_ = 'Provider/Staff (Hospital)'
    Patients_Interview_Candidate = 'Patients/Interview Candidate'
    Educator_Student = 'Educator/Student'
    API_Developer = 'API/Developer'
    Consultant = 'Consultant'
    Other = 'Other'


class Doctor(BaseModel):
    cell_phone: Optional[str] = Field(None, description='', title='Cell phone')
    country: Optional[Country] = Field(
        None, description='Two-letter conutry code. Default is `US`', title='Country'
    )
    email: Optional[str] = Field(None, description='', title='Email')
    first_name: Optional[str] = Field(None, description='', title='First name')
    group_npi_number: Optional[str] = Field(
        None, description='', title='Group npi number'
    )
    home_phone: Optional[str] = Field(None, description='', title='Home phone')
    id: Optional[int] = Field(None, description='', title='ID')
    is_account_suspended: Optional[bool] = Field(
        None,
        description="Indicates the doctor's account is suspended or not",
        title='Is account suspended',
    )
    job_title: Optional[JobTitle] = Field(None, description='', title='Job title')
    last_name: Optional[str] = Field(None, description='', title='Last name')
    npi_number: Optional[str] = Field(
        None,
        description='If both this field and `group_npi_number` are set, prefer this field',
        title='Npi number',
    )
    office_phone: Optional[str] = Field(None, description='', title='Office phone')
    practice_group: Optional[str] = Field(
        None,
        description='The ID of the practice group this user belongs to. This can be used to identify users in the same practice.',
        title='Practice group',
    )
    practice_group_name: Optional[str] = Field(
        None, description='', title='Practice group name'
    )
    profile_picture: Optional[str] = Field(
        None, description='', title='Profile picture'
    )
    specialty: Optional[str] = Field(None, description='', title='Specialty')
    suffix: Optional[str] = Field(None, description='', title='Suffix')
    timezone: Optional[str] = Field(None, description='', title='Timezone')
    website: Optional[str] = Field(None, description='', title='Website')


class CodeType(Enum):
    CPT = 'CPT'
    HCPCS = 'HCPCS'
    Custom = 'Custom'
    ICD9 = 'ICD9'
    ICD10 = 'ICD10'
    Revenue = 'Revenue'


class CptHcpcsModifier2(Enum):
    field_ = ''
    field_17 = '17'
    field_1D = '1D'
    field_22 = '22'
    field_23 = '23'
    field_24 = '24'
    field_25 = '25'
    field_26 = '26'
    field_29 = '29'
    field_32 = '32'
    field_33 = '33'
    field_47 = '47'
    field_50 = '50'
    field_51 = '51'
    field_52 = '52'
    field_53 = '53'
    field_54 = '54'
    field_55 = '55'
    field_56 = '56'
    field_57 = '57'
    field_58 = '58'
    field_59 = '59'
    field_62 = '62'
    field_63 = '63'
    field_66 = '66'
    field_73 = '73'
    field_74 = '74'
    field_76 = '76'
    field_77 = '77'
    field_78 = '78'
    field_79 = '79'
    field_80 = '80'
    field_81 = '81'
    field_82 = '82'
    field_83 = '83'
    field_90 = '90'
    field_91 = '91'
    field_92 = '92'
    field_93 = '93'
    field_95 = '95'
    field_96 = '96'
    field_97 = '97'
    field_99 = '99'
    A1 = 'A1'
    A2 = 'A2'
    A3 = 'A3'
    A4 = 'A4'
    A5 = 'A5'
    A6 = 'A6'
    A7 = 'A7'
    A8 = 'A8'
    A9 = 'A9'
    AA = 'AA'
    AD = 'AD'
    AE = 'AE'
    AF = 'AF'
    AG = 'AG'
    AH = 'AH'
    AI = 'AI'
    AJ = 'AJ'
    AK = 'AK'
    AM = 'AM'
    AO = 'AO'
    AP = 'AP'
    AQ = 'AQ'
    AR = 'AR'
    AS = 'AS'
    AT = 'AT'
    AU = 'AU'
    AV = 'AV'
    AW = 'AW'
    AX = 'AX'
    AY = 'AY'
    AZ = 'AZ'
    BA = 'BA'
    BL = 'BL'
    BO = 'BO'
    BP = 'BP'
    BR = 'BR'
    BU = 'BU'
    CA = 'CA'
    CB = 'CB'
    CC = 'CC'
    CD = 'CD'
    CE = 'CE'
    CF = 'CF'
    CG = 'CG'
    CH = 'CH'
    CI = 'CI'
    CJ = 'CJ'
    CK = 'CK'
    CL = 'CL'
    CM = 'CM'
    CN = 'CN'
    CO = 'CO'
    CP = 'CP'
    CQ = 'CQ'
    CR = 'CR'
    CS = 'CS'
    CT = 'CT'
    DA = 'DA'
    E1 = 'E1'
    E2 = 'E2'
    E3 = 'E3'
    E4 = 'E4'
    EA = 'EA'
    EB = 'EB'
    EC = 'EC'
    ED = 'ED'
    EE = 'EE'
    EJ = 'EJ'
    EM = 'EM'
    EP = 'EP'
    ER = 'ER'
    ET = 'ET'
    EX = 'EX'
    EY = 'EY'
    F1 = 'F1'
    F2 = 'F2'
    F3 = 'F3'
    F4 = 'F4'
    F5 = 'F5'
    F6 = 'F6'
    F7 = 'F7'
    F8 = 'F8'
    F9 = 'F9'
    FA = 'FA'
    FB = 'FB'
    FC = 'FC'
    FP = 'FP'
    FX = 'FX'
    FY = 'FY'
    G0 = 'G0'
    G1 = 'G1'
    G2 = 'G2'
    G3 = 'G3'
    G4 = 'G4'
    G5 = 'G5'
    G6 = 'G6'
    G7 = 'G7'
    G8 = 'G8'
    G9 = 'G9'
    GA = 'GA'
    GB = 'GB'
    GC = 'GC'
    GD = 'GD'
    GE = 'GE'
    GF = 'GF'
    GG = 'GG'
    GH = 'GH'
    GJ = 'GJ'
    GK = 'GK'
    GL = 'GL'
    GM = 'GM'
    GN = 'GN'
    GO = 'GO'
    GP = 'GP'
    GQ = 'GQ'
    GR = 'GR'
    GS = 'GS'
    GT = 'GT'
    GU = 'GU'
    GV = 'GV'
    GW = 'GW'
    GX = 'GX'
    GY = 'GY'
    GZ = 'GZ'
    H9 = 'H9'
    HA = 'HA'
    HB = 'HB'
    HC = 'HC'
    HD = 'HD'
    HE = 'HE'
    HF = 'HF'
    HG = 'HG'
    HH = 'HH'
    HI = 'HI'
    HJ = 'HJ'
    HK = 'HK'
    HL = 'HL'
    HM = 'HM'
    HN = 'HN'
    HO = 'HO'
    HP = 'HP'
    HQ = 'HQ'
    HR = 'HR'
    HS = 'HS'
    HT = 'HT'
    HU = 'HU'
    HV = 'HV'
    HW = 'HW'
    HX = 'HX'
    HY = 'HY'
    HZ = 'HZ'
    J1 = 'J1'
    J2 = 'J2'
    J3 = 'J3'
    J4 = 'J4'
    JA = 'JA'
    JB = 'JB'
    JC = 'JC'
    JD = 'JD'
    JE = 'JE'
    JF = 'JF'
    JG = 'JG'
    JW = 'JW'
    K0 = 'K0'
    K1 = 'K1'
    K2 = 'K2'
    K3 = 'K3'
    K4 = 'K4'
    KA = 'KA'
    KB = 'KB'
    KC = 'KC'
    KD = 'KD'
    KE = 'KE'
    KF = 'KF'
    KG = 'KG'
    KH = 'KH'
    KI = 'KI'
    KJ = 'KJ'
    KK = 'KK'
    KL = 'KL'
    KM = 'KM'
    KN = 'KN'
    KO = 'KO'
    KP = 'KP'
    KQ = 'KQ'
    KR = 'KR'
    KS = 'KS'
    KT = 'KT'
    KU = 'KU'
    KV = 'KV'
    KW = 'KW'
    KX = 'KX'
    KY = 'KY'
    KZ = 'KZ'
    L1 = 'L1'
    LC = 'LC'
    LD = 'LD'
    LL = 'LL'
    LM = 'LM'
    LR = 'LR'
    LS = 'LS'
    LT = 'LT'
    M2 = 'M2'
    ME = 'ME'
    MI = 'MI'
    MR = 'MR'
    MS = 'MS'
    NB = 'NB'
    NH = 'NH'
    NM = 'NM'
    NR = 'NR'
    NU = 'NU'
    P1 = 'P1'
    P2 = 'P2'
    P3 = 'P3'
    P4 = 'P4'
    P5 = 'P5'
    P6 = 'P6'
    PA = 'PA'
    PB = 'PB'
    PC = 'PC'
    PD = 'PD'
    PE = 'PE'
    PI = 'PI'
    PL = 'PL'
    PM = 'PM'
    PN = 'PN'
    PO = 'PO'
    PS = 'PS'
    PT = 'PT'
    Q0 = 'Q0'
    Q1 = 'Q1'
    Q2 = 'Q2'
    Q3 = 'Q3'
    Q4 = 'Q4'
    Q5 = 'Q5'
    Q6 = 'Q6'
    Q7 = 'Q7'
    Q8 = 'Q8'
    Q9 = 'Q9'
    QA = 'QA'
    QB = 'QB'
    QC = 'QC'
    QD = 'QD'
    QE = 'QE'
    QF = 'QF'
    QG = 'QG'
    QH = 'QH'
    QJ = 'QJ'
    QK = 'QK'
    QL = 'QL'
    QM = 'QM'
    QN = 'QN'
    QP = 'QP'
    QQ = 'QQ'
    QR = 'QR'
    QS = 'QS'
    QT = 'QT'
    QU = 'QU'
    QV = 'QV'
    QW = 'QW'
    QX = 'QX'
    QY = 'QY'
    QZ = 'QZ'
    RA = 'RA'
    RB = 'RB'
    RC = 'RC'
    RD = 'RD'
    RE = 'RE'
    RI = 'RI'
    RP = 'RP'
    RR = 'RR'
    RT = 'RT'
    SA = 'SA'
    SB = 'SB'
    SC = 'SC'
    SD = 'SD'
    SE = 'SE'
    SF = 'SF'
    SG = 'SG'
    SH = 'SH'
    SJ = 'SJ'
    SK = 'SK'
    SL = 'SL'
    SM = 'SM'
    SN = 'SN'
    SP = 'SP'
    SQ = 'SQ'
    SS = 'SS'
    ST = 'ST'
    SU = 'SU'
    SV = 'SV'
    SW = 'SW'
    SY = 'SY'
    SZ = 'SZ'
    T1 = 'T1'
    T2 = 'T2'
    T3 = 'T3'
    T4 = 'T4'
    T5 = 'T5'
    T6 = 'T6'
    T7 = 'T7'
    T8 = 'T8'
    T9 = 'T9'
    TA = 'TA'
    TB = 'TB'
    TC = 'TC'
    TD = 'TD'
    TE = 'TE'
    TF = 'TF'
    TG = 'TG'
    TH = 'TH'
    TJ = 'TJ'
    TK = 'TK'
    TL = 'TL'
    TM = 'TM'
    TN = 'TN'
    TP = 'TP'
    TQ = 'TQ'
    TR = 'TR'
    TS = 'TS'
    TT = 'TT'
    TU = 'TU'
    TV = 'TV'
    TW = 'TW'
    TX = 'TX'
    U1 = 'U1'
    U2 = 'U2'
    U3 = 'U3'
    U4 = 'U4'
    U5 = 'U5'
    U6 = 'U6'
    U7 = 'U7'
    U8 = 'U8'
    U9 = 'U9'
    UA = 'UA'
    UB = 'UB'
    UC = 'UC'
    UD = 'UD'
    UE = 'UE'
    UF = 'UF'
    UG = 'UG'
    UH = 'UH'
    UJ = 'UJ'
    UK = 'UK'
    UN = 'UN'
    UP = 'UP'
    UQ = 'UQ'
    UR = 'UR'
    US = 'US'
    V1 = 'V1'
    V2 = 'V2'
    V3 = 'V3'
    V4 = 'V4'
    V5 = 'V5'
    V6 = 'V6'
    V7 = 'V7'
    V8 = 'V8'
    V9 = 'V9'
    VP = 'VP'
    VR = 'VR'
    W1 = 'W1'
    W5 = 'W5'
    W6 = 'W6'
    W7 = 'W7'
    W8 = 'W8'
    W9 = 'W9'
    WC = 'WC'
    WH = 'WH'
    WP = 'WP'
    X1 = 'X1'
    X2 = 'X2'
    X3 = 'X3'
    X4 = 'X4'
    X5 = 'X5'
    XE = 'XE'
    XP = 'XP'
    XS = 'XS'
    XU = 'XU'
    VM = 'VM'
    ZA = 'ZA'
    ZB = 'ZB'
    ZL = 'ZL'
    ZS = 'ZS'
    field_1P = '1P'
    field_2P = '2P'
    field_3P = '3P'
    field_8P = '8P'


class CptHcpcsModifier3(Enum):
    field_ = ''
    field_17 = '17'
    field_1D = '1D'
    field_22 = '22'
    field_23 = '23'
    field_24 = '24'
    field_25 = '25'
    field_26 = '26'
    field_29 = '29'
    field_32 = '32'
    field_33 = '33'
    field_47 = '47'
    field_50 = '50'
    field_51 = '51'
    field_52 = '52'
    field_53 = '53'
    field_54 = '54'
    field_55 = '55'
    field_56 = '56'
    field_57 = '57'
    field_58 = '58'
    field_59 = '59'
    field_62 = '62'
    field_63 = '63'
    field_66 = '66'
    field_73 = '73'
    field_74 = '74'
    field_76 = '76'
    field_77 = '77'
    field_78 = '78'
    field_79 = '79'
    field_80 = '80'
    field_81 = '81'
    field_82 = '82'
    field_83 = '83'
    field_90 = '90'
    field_91 = '91'
    field_92 = '92'
    field_93 = '93'
    field_95 = '95'
    field_96 = '96'
    field_97 = '97'
    field_99 = '99'
    A1 = 'A1'
    A2 = 'A2'
    A3 = 'A3'
    A4 = 'A4'
    A5 = 'A5'
    A6 = 'A6'
    A7 = 'A7'
    A8 = 'A8'
    A9 = 'A9'
    AA = 'AA'
    AD = 'AD'
    AE = 'AE'
    AF = 'AF'
    AG = 'AG'
    AH = 'AH'
    AI = 'AI'
    AJ = 'AJ'
    AK = 'AK'
    AM = 'AM'
    AO = 'AO'
    AP = 'AP'
    AQ = 'AQ'
    AR = 'AR'
    AS = 'AS'
    AT = 'AT'
    AU = 'AU'
    AV = 'AV'
    AW = 'AW'
    AX = 'AX'
    AY = 'AY'
    AZ = 'AZ'
    BA = 'BA'
    BL = 'BL'
    BO = 'BO'
    BP = 'BP'
    BR = 'BR'
    BU = 'BU'
    CA = 'CA'
    CB = 'CB'
    CC = 'CC'
    CD = 'CD'
    CE = 'CE'
    CF = 'CF'
    CG = 'CG'
    CH = 'CH'
    CI = 'CI'
    CJ = 'CJ'
    CK = 'CK'
    CL = 'CL'
    CM = 'CM'
    CN = 'CN'
    CO = 'CO'
    CP = 'CP'
    CQ = 'CQ'
    CR = 'CR'
    CS = 'CS'
    CT = 'CT'
    DA = 'DA'
    E1 = 'E1'
    E2 = 'E2'
    E3 = 'E3'
    E4 = 'E4'
    EA = 'EA'
    EB = 'EB'
    EC = 'EC'
    ED = 'ED'
    EE = 'EE'
    EJ = 'EJ'
    EM = 'EM'
    EP = 'EP'
    ER = 'ER'
    ET = 'ET'
    EX = 'EX'
    EY = 'EY'
    F1 = 'F1'
    F2 = 'F2'
    F3 = 'F3'
    F4 = 'F4'
    F5 = 'F5'
    F6 = 'F6'
    F7 = 'F7'
    F8 = 'F8'
    F9 = 'F9'
    FA = 'FA'
    FB = 'FB'
    FC = 'FC'
    FP = 'FP'
    FX = 'FX'
    FY = 'FY'
    G0 = 'G0'
    G1 = 'G1'
    G2 = 'G2'
    G3 = 'G3'
    G4 = 'G4'
    G5 = 'G5'
    G6 = 'G6'
    G7 = 'G7'
    G8 = 'G8'
    G9 = 'G9'
    GA = 'GA'
    GB = 'GB'
    GC = 'GC'
    GD = 'GD'
    GE = 'GE'
    GF = 'GF'
    GG = 'GG'
    GH = 'GH'
    GJ = 'GJ'
    GK = 'GK'
    GL = 'GL'
    GM = 'GM'
    GN = 'GN'
    GO = 'GO'
    GP = 'GP'
    GQ = 'GQ'
    GR = 'GR'
    GS = 'GS'
    GT = 'GT'
    GU = 'GU'
    GV = 'GV'
    GW = 'GW'
    GX = 'GX'
    GY = 'GY'
    GZ = 'GZ'
    H9 = 'H9'
    HA = 'HA'
    HB = 'HB'
    HC = 'HC'
    HD = 'HD'
    HE = 'HE'
    HF = 'HF'
    HG = 'HG'
    HH = 'HH'
    HI = 'HI'
    HJ = 'HJ'
    HK = 'HK'
    HL = 'HL'
    HM = 'HM'
    HN = 'HN'
    HO = 'HO'
    HP = 'HP'
    HQ = 'HQ'
    HR = 'HR'
    HS = 'HS'
    HT = 'HT'
    HU = 'HU'
    HV = 'HV'
    HW = 'HW'
    HX = 'HX'
    HY = 'HY'
    HZ = 'HZ'
    J1 = 'J1'
    J2 = 'J2'
    J3 = 'J3'
    J4 = 'J4'
    JA = 'JA'
    JB = 'JB'
    JC = 'JC'
    JD = 'JD'
    JE = 'JE'
    JF = 'JF'
    JG = 'JG'
    JW = 'JW'
    K0 = 'K0'
    K1 = 'K1'
    K2 = 'K2'
    K3 = 'K3'
    K4 = 'K4'
    KA = 'KA'
    KB = 'KB'
    KC = 'KC'
    KD = 'KD'
    KE = 'KE'
    KF = 'KF'
    KG = 'KG'
    KH = 'KH'
    KI = 'KI'
    KJ = 'KJ'
    KK = 'KK'
    KL = 'KL'
    KM = 'KM'
    KN = 'KN'
    KO = 'KO'
    KP = 'KP'
    KQ = 'KQ'
    KR = 'KR'
    KS = 'KS'
    KT = 'KT'
    KU = 'KU'
    KV = 'KV'
    KW = 'KW'
    KX = 'KX'
    KY = 'KY'
    KZ = 'KZ'
    L1 = 'L1'
    LC = 'LC'
    LD = 'LD'
    LL = 'LL'
    LM = 'LM'
    LR = 'LR'
    LS = 'LS'
    LT = 'LT'
    M2 = 'M2'
    ME = 'ME'
    MI = 'MI'
    MR = 'MR'
    MS = 'MS'
    NB = 'NB'
    NH = 'NH'
    NM = 'NM'
    NR = 'NR'
    NU = 'NU'
    P1 = 'P1'
    P2 = 'P2'
    P3 = 'P3'
    P4 = 'P4'
    P5 = 'P5'
    P6 = 'P6'
    PA = 'PA'
    PB = 'PB'
    PC = 'PC'
    PD = 'PD'
    PE = 'PE'
    PI = 'PI'
    PL = 'PL'
    PM = 'PM'
    PN = 'PN'
    PO = 'PO'
    PS = 'PS'
    PT = 'PT'
    Q0 = 'Q0'
    Q1 = 'Q1'
    Q2 = 'Q2'
    Q3 = 'Q3'
    Q4 = 'Q4'
    Q5 = 'Q5'
    Q6 = 'Q6'
    Q7 = 'Q7'
    Q8 = 'Q8'
    Q9 = 'Q9'
    QA = 'QA'
    QB = 'QB'
    QC = 'QC'
    QD = 'QD'
    QE = 'QE'
    QF = 'QF'
    QG = 'QG'
    QH = 'QH'
    QJ = 'QJ'
    QK = 'QK'
    QL = 'QL'
    QM = 'QM'
    QN = 'QN'
    QP = 'QP'
    QQ = 'QQ'
    QR = 'QR'
    QS = 'QS'
    QT = 'QT'
    QU = 'QU'
    QV = 'QV'
    QW = 'QW'
    QX = 'QX'
    QY = 'QY'
    QZ = 'QZ'
    RA = 'RA'
    RB = 'RB'
    RC = 'RC'
    RD = 'RD'
    RE = 'RE'
    RI = 'RI'
    RP = 'RP'
    RR = 'RR'
    RT = 'RT'
    SA = 'SA'
    SB = 'SB'
    SC = 'SC'
    SD = 'SD'
    SE = 'SE'
    SF = 'SF'
    SG = 'SG'
    SH = 'SH'
    SJ = 'SJ'
    SK = 'SK'
    SL = 'SL'
    SM = 'SM'
    SN = 'SN'
    SP = 'SP'
    SQ = 'SQ'
    SS = 'SS'
    ST = 'ST'
    SU = 'SU'
    SV = 'SV'
    SW = 'SW'
    SY = 'SY'
    SZ = 'SZ'
    T1 = 'T1'
    T2 = 'T2'
    T3 = 'T3'
    T4 = 'T4'
    T5 = 'T5'
    T6 = 'T6'
    T7 = 'T7'
    T8 = 'T8'
    T9 = 'T9'
    TA = 'TA'
    TB = 'TB'
    TC = 'TC'
    TD = 'TD'
    TE = 'TE'
    TF = 'TF'
    TG = 'TG'
    TH = 'TH'
    TJ = 'TJ'
    TK = 'TK'
    TL = 'TL'
    TM = 'TM'
    TN = 'TN'
    TP = 'TP'
    TQ = 'TQ'
    TR = 'TR'
    TS = 'TS'
    TT = 'TT'
    TU = 'TU'
    TV = 'TV'
    TW = 'TW'
    TX = 'TX'
    U1 = 'U1'
    U2 = 'U2'
    U3 = 'U3'
    U4 = 'U4'
    U5 = 'U5'
    U6 = 'U6'
    U7 = 'U7'
    U8 = 'U8'
    U9 = 'U9'
    UA = 'UA'
    UB = 'UB'
    UC = 'UC'
    UD = 'UD'
    UE = 'UE'
    UF = 'UF'
    UG = 'UG'
    UH = 'UH'
    UJ = 'UJ'
    UK = 'UK'
    UN = 'UN'
    UP = 'UP'
    UQ = 'UQ'
    UR = 'UR'
    US = 'US'
    V1 = 'V1'
    V2 = 'V2'
    V3 = 'V3'
    V4 = 'V4'
    V5 = 'V5'
    V6 = 'V6'
    V7 = 'V7'
    V8 = 'V8'
    V9 = 'V9'
    VP = 'VP'
    VR = 'VR'
    W1 = 'W1'
    W5 = 'W5'
    W6 = 'W6'
    W7 = 'W7'
    W8 = 'W8'
    W9 = 'W9'
    WC = 'WC'
    WH = 'WH'
    WP = 'WP'
    X1 = 'X1'
    X2 = 'X2'
    X3 = 'X3'
    X4 = 'X4'
    X5 = 'X5'
    XE = 'XE'
    XP = 'XP'
    XS = 'XS'
    XU = 'XU'
    VM = 'VM'
    ZA = 'ZA'
    ZB = 'ZB'
    ZL = 'ZL'
    ZS = 'ZS'
    field_1P = '1P'
    field_2P = '2P'
    field_3P = '3P'
    field_8P = '8P'


class CptHcpcsModifier4(Enum):
    field_ = ''
    field_17 = '17'
    field_1D = '1D'
    field_22 = '22'
    field_23 = '23'
    field_24 = '24'
    field_25 = '25'
    field_26 = '26'
    field_29 = '29'
    field_32 = '32'
    field_33 = '33'
    field_47 = '47'
    field_50 = '50'
    field_51 = '51'
    field_52 = '52'
    field_53 = '53'
    field_54 = '54'
    field_55 = '55'
    field_56 = '56'
    field_57 = '57'
    field_58 = '58'
    field_59 = '59'
    field_62 = '62'
    field_63 = '63'
    field_66 = '66'
    field_73 = '73'
    field_74 = '74'
    field_76 = '76'
    field_77 = '77'
    field_78 = '78'
    field_79 = '79'
    field_80 = '80'
    field_81 = '81'
    field_82 = '82'
    field_83 = '83'
    field_90 = '90'
    field_91 = '91'
    field_92 = '92'
    field_93 = '93'
    field_95 = '95'
    field_96 = '96'
    field_97 = '97'
    field_99 = '99'
    A1 = 'A1'
    A2 = 'A2'
    A3 = 'A3'
    A4 = 'A4'
    A5 = 'A5'
    A6 = 'A6'
    A7 = 'A7'
    A8 = 'A8'
    A9 = 'A9'
    AA = 'AA'
    AD = 'AD'
    AE = 'AE'
    AF = 'AF'
    AG = 'AG'
    AH = 'AH'
    AI = 'AI'
    AJ = 'AJ'
    AK = 'AK'
    AM = 'AM'
    AO = 'AO'
    AP = 'AP'
    AQ = 'AQ'
    AR = 'AR'
    AS = 'AS'
    AT = 'AT'
    AU = 'AU'
    AV = 'AV'
    AW = 'AW'
    AX = 'AX'
    AY = 'AY'
    AZ = 'AZ'
    BA = 'BA'
    BL = 'BL'
    BO = 'BO'
    BP = 'BP'
    BR = 'BR'
    BU = 'BU'
    CA = 'CA'
    CB = 'CB'
    CC = 'CC'
    CD = 'CD'
    CE = 'CE'
    CF = 'CF'
    CG = 'CG'
    CH = 'CH'
    CI = 'CI'
    CJ = 'CJ'
    CK = 'CK'
    CL = 'CL'
    CM = 'CM'
    CN = 'CN'
    CO = 'CO'
    CP = 'CP'
    CQ = 'CQ'
    CR = 'CR'
    CS = 'CS'
    CT = 'CT'
    DA = 'DA'
    E1 = 'E1'
    E2 = 'E2'
    E3 = 'E3'
    E4 = 'E4'
    EA = 'EA'
    EB = 'EB'
    EC = 'EC'
    ED = 'ED'
    EE = 'EE'
    EJ = 'EJ'
    EM = 'EM'
    EP = 'EP'
    ER = 'ER'
    ET = 'ET'
    EX = 'EX'
    EY = 'EY'
    F1 = 'F1'
    F2 = 'F2'
    F3 = 'F3'
    F4 = 'F4'
    F5 = 'F5'
    F6 = 'F6'
    F7 = 'F7'
    F8 = 'F8'
    F9 = 'F9'
    FA = 'FA'
    FB = 'FB'
    FC = 'FC'
    FP = 'FP'
    FX = 'FX'
    FY = 'FY'
    G0 = 'G0'
    G1 = 'G1'
    G2 = 'G2'
    G3 = 'G3'
    G4 = 'G4'
    G5 = 'G5'
    G6 = 'G6'
    G7 = 'G7'
    G8 = 'G8'
    G9 = 'G9'
    GA = 'GA'
    GB = 'GB'
    GC = 'GC'
    GD = 'GD'
    GE = 'GE'
    GF = 'GF'
    GG = 'GG'
    GH = 'GH'
    GJ = 'GJ'
    GK = 'GK'
    GL = 'GL'
    GM = 'GM'
    GN = 'GN'
    GO = 'GO'
    GP = 'GP'
    GQ = 'GQ'
    GR = 'GR'
    GS = 'GS'
    GT = 'GT'
    GU = 'GU'
    GV = 'GV'
    GW = 'GW'
    GX = 'GX'
    GY = 'GY'
    GZ = 'GZ'
    H9 = 'H9'
    HA = 'HA'
    HB = 'HB'
    HC = 'HC'
    HD = 'HD'
    HE = 'HE'
    HF = 'HF'
    HG = 'HG'
    HH = 'HH'
    HI = 'HI'
    HJ = 'HJ'
    HK = 'HK'
    HL = 'HL'
    HM = 'HM'
    HN = 'HN'
    HO = 'HO'
    HP = 'HP'
    HQ = 'HQ'
    HR = 'HR'
    HS = 'HS'
    HT = 'HT'
    HU = 'HU'
    HV = 'HV'
    HW = 'HW'
    HX = 'HX'
    HY = 'HY'
    HZ = 'HZ'
    J1 = 'J1'
    J2 = 'J2'
    J3 = 'J3'
    J4 = 'J4'
    JA = 'JA'
    JB = 'JB'
    JC = 'JC'
    JD = 'JD'
    JE = 'JE'
    JF = 'JF'
    JG = 'JG'
    JW = 'JW'
    K0 = 'K0'
    K1 = 'K1'
    K2 = 'K2'
    K3 = 'K3'
    K4 = 'K4'
    KA = 'KA'
    KB = 'KB'
    KC = 'KC'
    KD = 'KD'
    KE = 'KE'
    KF = 'KF'
    KG = 'KG'
    KH = 'KH'
    KI = 'KI'
    KJ = 'KJ'
    KK = 'KK'
    KL = 'KL'
    KM = 'KM'
    KN = 'KN'
    KO = 'KO'
    KP = 'KP'
    KQ = 'KQ'
    KR = 'KR'
    KS = 'KS'
    KT = 'KT'
    KU = 'KU'
    KV = 'KV'
    KW = 'KW'
    KX = 'KX'
    KY = 'KY'
    KZ = 'KZ'
    L1 = 'L1'
    LC = 'LC'
    LD = 'LD'
    LL = 'LL'
    LM = 'LM'
    LR = 'LR'
    LS = 'LS'
    LT = 'LT'
    M2 = 'M2'
    ME = 'ME'
    MI = 'MI'
    MR = 'MR'
    MS = 'MS'
    NB = 'NB'
    NH = 'NH'
    NM = 'NM'
    NR = 'NR'
    NU = 'NU'
    P1 = 'P1'
    P2 = 'P2'
    P3 = 'P3'
    P4 = 'P4'
    P5 = 'P5'
    P6 = 'P6'
    PA = 'PA'
    PB = 'PB'
    PC = 'PC'
    PD = 'PD'
    PE = 'PE'
    PI = 'PI'
    PL = 'PL'
    PM = 'PM'
    PN = 'PN'
    PO = 'PO'
    PS = 'PS'
    PT = 'PT'
    Q0 = 'Q0'
    Q1 = 'Q1'
    Q2 = 'Q2'
    Q3 = 'Q3'
    Q4 = 'Q4'
    Q5 = 'Q5'
    Q6 = 'Q6'
    Q7 = 'Q7'
    Q8 = 'Q8'
    Q9 = 'Q9'
    QA = 'QA'
    QB = 'QB'
    QC = 'QC'
    QD = 'QD'
    QE = 'QE'
    QF = 'QF'
    QG = 'QG'
    QH = 'QH'
    QJ = 'QJ'
    QK = 'QK'
    QL = 'QL'
    QM = 'QM'
    QN = 'QN'
    QP = 'QP'
    QQ = 'QQ'
    QR = 'QR'
    QS = 'QS'
    QT = 'QT'
    QU = 'QU'
    QV = 'QV'
    QW = 'QW'
    QX = 'QX'
    QY = 'QY'
    QZ = 'QZ'
    RA = 'RA'
    RB = 'RB'
    RC = 'RC'
    RD = 'RD'
    RE = 'RE'
    RI = 'RI'
    RP = 'RP'
    RR = 'RR'
    RT = 'RT'
    SA = 'SA'
    SB = 'SB'
    SC = 'SC'
    SD = 'SD'
    SE = 'SE'
    SF = 'SF'
    SG = 'SG'
    SH = 'SH'
    SJ = 'SJ'
    SK = 'SK'
    SL = 'SL'
    SM = 'SM'
    SN = 'SN'
    SP = 'SP'
    SQ = 'SQ'
    SS = 'SS'
    ST = 'ST'
    SU = 'SU'
    SV = 'SV'
    SW = 'SW'
    SY = 'SY'
    SZ = 'SZ'
    T1 = 'T1'
    T2 = 'T2'
    T3 = 'T3'
    T4 = 'T4'
    T5 = 'T5'
    T6 = 'T6'
    T7 = 'T7'
    T8 = 'T8'
    T9 = 'T9'
    TA = 'TA'
    TB = 'TB'
    TC = 'TC'
    TD = 'TD'
    TE = 'TE'
    TF = 'TF'
    TG = 'TG'
    TH = 'TH'
    TJ = 'TJ'
    TK = 'TK'
    TL = 'TL'
    TM = 'TM'
    TN = 'TN'
    TP = 'TP'
    TQ = 'TQ'
    TR = 'TR'
    TS = 'TS'
    TT = 'TT'
    TU = 'TU'
    TV = 'TV'
    TW = 'TW'
    TX = 'TX'
    U1 = 'U1'
    U2 = 'U2'
    U3 = 'U3'
    U4 = 'U4'
    U5 = 'U5'
    U6 = 'U6'
    U7 = 'U7'
    U8 = 'U8'
    U9 = 'U9'
    UA = 'UA'
    UB = 'UB'
    UC = 'UC'
    UD = 'UD'
    UE = 'UE'
    UF = 'UF'
    UG = 'UG'
    UH = 'UH'
    UJ = 'UJ'
    UK = 'UK'
    UN = 'UN'
    UP = 'UP'
    UQ = 'UQ'
    UR = 'UR'
    US = 'US'
    V1 = 'V1'
    V2 = 'V2'
    V3 = 'V3'
    V4 = 'V4'
    V5 = 'V5'
    V6 = 'V6'
    V7 = 'V7'
    V8 = 'V8'
    V9 = 'V9'
    VP = 'VP'
    VR = 'VR'
    W1 = 'W1'
    W5 = 'W5'
    W6 = 'W6'
    W7 = 'W7'
    W8 = 'W8'
    W9 = 'W9'
    WC = 'WC'
    WH = 'WH'
    WP = 'WP'
    X1 = 'X1'
    X2 = 'X2'
    X3 = 'X3'
    X4 = 'X4'
    X5 = 'X5'
    XE = 'XE'
    XP = 'XP'
    XS = 'XS'
    XU = 'XU'
    VM = 'VM'
    ZA = 'ZA'
    ZB = 'ZB'
    ZL = 'ZL'
    ZS = 'ZS'
    field_1P = '1P'
    field_2P = '2P'
    field_3P = '3P'
    field_8P = '8P'


class NdcUnits(Enum):
    F2 = 'F2'
    GR = 'GR'
    ME = 'ME'
    ML = 'ML'
    UN = 'UN'


class DoctorFeeSchedule(BaseModel):
    allowed_amount: Optional[float] = Field(
        None,
        description='Typical allowed amount for payer. Not used if blank.',
        title='Allowed amount',
    )
    base_price: Optional[float] = Field(None, description='', title='Base price')
    billing_description: Optional[str] = Field(
        None, description='', title='Billing description'
    )
    cash_price: Optional[float] = Field(None, description='', title='Cash price')
    code: Optional[str] = Field(None, description='', title='Code')
    code_type: Optional[CodeType] = Field(None, description='', title='Code type')
    cpt_hcpcs_modifier1: Optional[str] = Field(
        None, description='', title='Cpt hcpcs modifier1'
    )
    cpt_hcpcs_modifier2: Optional[CptHcpcsModifier2] = Field(
        None, description='', title='CPT/HCPCS Modifier #2'
    )
    cpt_hcpcs_modifier3: Optional[CptHcpcsModifier3] = Field(
        None, description='', title='CPT/HCPCS Modifier #3'
    )
    cpt_hcpcs_modifier4: Optional[CptHcpcsModifier4] = Field(
        None, description='', title='CPT/HCPCS Modifier #4'
    )
    created_at: Optional[str] = Field(None, description='', title='Created at')
    description: Optional[str] = Field(None, description='', title='Description')
    doctor: Optional[int] = Field(None, description='', title='Doctor')
    id: Optional[int] = Field(None, description='', title='ID')
    insured_out_of_network_price: Optional[float] = Field(
        None, description='', title='Insured out of network price'
    )
    insured_price: Optional[float] = Field(None, description='', title='Insured price')
    ndc_code: Optional[str] = Field(None, description='', title='NDC Code')
    ndc_quantity: Optional[float] = Field(None, description='', title='NDC Quantity')
    ndc_units: Optional[NdcUnits] = Field(None, description='', title='NDC Units')
    office: Optional[int] = Field(None, description='', title='Office')
    payer_id: Optional[str] = Field(
        None,
        description='Fee Schedule pricing specific to this payer, if null, then applies as default to all payers without a more specific fee schedule.',
        title='Payer id',
    )
    picklist_category: Optional[str] = Field(
        None,
        description='Optional: Category to organize the code into.',
        title='Picklist category',
    )
    plan_name: Optional[str] = Field(
        None, description='Name of insurance plan.', title='Plan name'
    )
    updated_at: Optional[str] = Field(None, description='', title='Updated at')


class MessageNote(BaseModel):
    created_at: Optional[str] = Field(None, description='', title='Created at')
    created_by: Optional[str] = Field(
        None, description='ID of `/api/users` who created the note', title='Created by'
    )
    text: Optional[str] = Field(None, description='Content of the note', title='Text')


class Type1(Enum):
    GP = 'GP'
    GC = 'GC'
    GT = 'GT'
    GZ = 'GZ'
    IF = 'IF'
    OF = 'OF'
    IL = 'IL'
    IR = 'IR'
    OR = 'OR'
    IE = 'IE'
    OA = 'OA'
    PO = 'PO'
    PI = 'PI'
    PM = 'PM'
    OO = 'OO'
    OD = 'OD'
    ID = 'ID'
    DL = 'DL'
    CN = 'CN'


class DoctorMessage(BaseModel):
    archived: Optional[bool] = Field(
        None,
        description='If true, indicates that the message has been soft-deleted',
        title='Archived',
    )
    attachment: Optional[str] = Field(
        None,
        description='Files are passed using `multipart/form-data` encoding, but returned as URLs.',
        title='Attachment',
    )
    doctor: int = Field(..., description='', title='Doctor')
    id: Optional[int] = Field(None, description='', title='ID')
    message_notes: Optional[List[MessageNote]] = Field(
        None,
        description='Array of notes attached to the message',
        title='Message notes',
    )
    owner: Optional[str] = Field(
        None,
        description='ID of `/api/users` who owns the message, who may be the doctor themselves or one of their staff members',
        title='Owner',
    )
    patient: Optional[int] = Field(
        None,
        description='ID of patient that the message concerns, if applicable',
        title='Patient',
    )
    read: Optional[bool] = Field(None, description='', title='Read')
    received_at: Optional[str] = Field(None, description='', title='Received at')
    responsible_user: Optional[str] = Field(
        None,
        description='ID of `/api/users` who has been assigned to process the message, who may be the doctor themselves or one of their staff members',
        title='Responsible user',
    )
    starred: Optional[bool] = Field(None, description='', title='Starred')
    title: str = Field(..., description='', title='Title')
    type: Optional[Type1] = Field(
        None,
        description='\nValue | Description\n----- | -----------\n`"GP"` | Generated PDF\n`"GC"` | Generated CSV\n`"GZ"` | Generated ZIP\n`"IF"` | Incoming Fax\n`"OF"` | Outgoing Fax\n`"IL"` | Incoming Labs\n`"IR"` | Inbound Referrals\n`"OR"` | Outbound Referrals\n`"IE"` | Incoming eRx\n`"OA"` | Online Appointments\n`"PO"` | Patient Onboarding\n`"PI"` | Patient Incoming Message\n`"PM"` | Patient Outgoing Message\n`"OO"` | Demo Meeting Message\n`"OD"` | Outbound Direct Message\n`"ID"` | Inbound Direct Message\n',
        title='Type',
    )
    updated_at: Optional[str] = Field(None, description='', title='Updated at')
    workflow_step: Optional[str] = Field(
        None,
        description='Used by doctors and their staff to keep track of what step of processing the message is in',
        title='Workflow step',
    )


class PaymentMethod2(Enum):
    field_ = ''
    ACH = 'ACH'
    BOPCCP = 'BOPCCP'
    BOPCTX = 'BOPCTX'
    CHK = 'CHK'
    FWT = 'FWT'
    VPAY = 'VPAY'
    NON = 'NON'


class EOBObject(BaseModel):
    check_date: Optional[str] = Field(
        None,
        description='Date of check. If missing, default to the date when the request is made',
        title='Check date',
    )
    deposit_date: Optional[str] = Field(
        None, description='Date when EOB gets deposited.', title='Deposit date'
    )
    doctor: int = Field(..., description='', title='Doctor')
    id: Optional[int] = Field(None, description='', title='ID')
    insurance_payer_id: str = Field(..., description='', title='Insurance payer id')
    insurance_payer_name: str = Field(..., description='', title='Insurance payer name')
    insurance_payer_trace_number: str = Field(
        ..., description='', title='Insurance payer trace number'
    )
    payment_method: Optional[PaymentMethod2] = Field(
        None,
        description='`""` - Unknown, `"ACH"` - Automated Clearing House (ACH), `"BOPCCP"` - Cash Concentration/Disbursement plus Addenda (CCD+) (ACH), `"BOPCTX"` - Corporate Trade Exchange (CTX) (ACH), `"CHK"` - Check, `"FWT"` - Federal Reserve Funds/Wire Transfer - Nonrepetitive, `"VPAY"` - vPayment, `"NON"` - Non-Payment Data',
        title='Payment method',
    )
    posted_date: Optional[str] = Field(None, description='', title='Posted date')
    scanned_eob: Optional[str] = Field(None, description='', title='Scanned eob')
    total_paid: Optional[float] = Field(
        None,
        description='Total amount paid. If missing, default to 0.00',
        title='Total paid',
    )
    updated_at: Optional[str] = Field(None, description='', title='Updated at')


class Status1(Enum):
    active = 'active'
    inactive = 'inactive'


class ImplantableDevice(BaseModel):
    archived: Optional[bool] = Field(None, description='', title='Archived')
    brand_name: Optional[str] = Field(None, description='', title='Brand name')
    company_name: Optional[str] = Field(None, description='', title='Company name')
    created_at: Optional[str] = Field(None, description='', title='Created at')
    expiration_date: Optional[str] = Field(
        None, description='', title='Expiration date'
    )
    gmdn_pt_name: Optional[str] = Field(
        None,
        description='"GMDN PT Name" or "SNOMED CT Description" mapped to the attribute in  the "GMDN PT Name"',
        title='GMDN PT Name',
    )
    id: Optional[int] = Field(None, description='', title='ID')
    manufacturing_date: Optional[str] = Field(
        None, description='', title='Manufacturing date'
    )
    patient: Optional[str] = Field(None, description='', title='Patient')
    procedure: Optional[str] = Field(
        None, description='ID of `/api/procedures` object', title='Procedure'
    )
    serial_number: Optional[str] = Field(None, description='', title='Serial number')
    status: Optional[Status1] = Field(
        None, description="One of `'active'` or `'inactive'`", title='Status'
    )
    udi: Optional[str] = Field(None, description='', title='Unique Device Identifier')
    updated_at: Optional[str] = Field(None, description='', title='Updated at')
    version_or_model: Optional[str] = Field(
        None, description='', title='Version or model'
    )


class Insurance(BaseModel):
    payer_id: Optional[str] = Field(None, description='', title='payer_id')
    payer_name: Optional[str] = Field(None, description='', title='payer_name')
    state: Optional[str] = Field(None, description='', title='state')


class CategoryType(Enum):
    vaccine = 'vaccine'
    product = 'product'
    service = 'service'


class InventoryCategory(BaseModel):
    archived: Optional[bool] = Field(
        None, description='If the category is archived or not', title='Archived'
    )
    category_type: Optional[CategoryType] = Field(
        None,
        description='Can be one of `"vaccine"`, `"product"` or `"service"`',
        title='Category type',
    )
    created_at: Optional[str] = Field(None, description='', title='Created at')
    doctor: Optional[str] = Field(None, description='', title='Doctor')
    id: Optional[int] = Field(None, description='', title='ID')
    name: Optional[str] = Field(
        None, description='Name of the inventory category', title='Name'
    )
    updated_at: Optional[str] = Field(None, description='', title='Updated at')


class Status2(Enum):
    active = 'active'
    inactive = 'inactive'
    archived = 'archived'
    voided = 'voided'


class InventoryVaccine(BaseModel):
    category: Optional[int] = Field(
        None, description='ID of `/api/inventory_categories`', title='Category'
    )
    cost: Optional[float] = Field(
        None, description='Base cost for consumables.', title='Cost'
    )
    created_at: Optional[str] = Field(None, description='', title='Created at')
    current_quantity: Optional[int] = Field(
        None,
        description='This field can onlyu be changed by creating new patient vaccine record. Current quantity of an inventory vaccine is calculated by subtract number of records pointing to this inventory from the original quantity value.',
        title='Current quantity',
    )
    cvx_code: Optional[str] = Field(None, description='', title='Cvx code')
    doctor: int = Field(..., description='', title='Doctor')
    expiry: Optional[str] = Field(
        None, description='When will the vaccine expire', title='Expiry'
    )
    id: Optional[int] = Field(None, description='', title='ID')
    lot_number: Optional[str] = Field(None, description='', title='Lot number')
    manufacturer: Optional[str] = Field(None, description='', title='Manufacturer')
    manufacturer_code: str = Field(..., description='', title='Manufacturer code')
    name: str = Field(..., description='', title='Name')
    note: Optional[str] = Field(None, description='', title='Note')
    original_quantity: Optional[int] = Field(
        None, description='Default to zero', title='Original quantity'
    )
    price: Optional[float] = Field(None, description='', title='Price')
    price_with_tax: Optional[float] = Field(
        None, description='', title='Price with tax'
    )
    sales_tax_applicable: Optional[bool] = Field(
        None,
        description='Is sales tax applicable to this service/product? Default to false',
        title='Sales tax applicable',
    )
    status: Optional[Status2] = Field(
        None,
        description='Status of vaccine, could be one of `active`, `inactive`, `archived`, `voided`, default to `active`',
        title='Status',
    )
    updated_at: Optional[str] = Field(None, description='', title='Updated at')
    vaccination_type: Optional[str] = Field(
        None, description='Default to `"standard vaccine"`', title='Vaccination type'
    )


class Icd10Code(BaseModel):
    code: Optional[str] = Field(
        None, description='The numeric ICD-10 code', title='Code'
    )
    description: Optional[str] = Field(
        None, description='Short description  of the ICD-10 code', title='Description'
    )


class Priority(Enum):
    N = 'N'
    S = 'S'


class LabOrder(BaseModel):
    accession_number: Optional[str] = Field(
        None, description='For external use only', title='Accession number'
    )
    doctor: int = Field(..., description='', title='Doctor')
    documents: Optional[List[str]] = Field(
        None, description='Associated `/lab_documents` objects', title='Documents'
    )
    icd10_codes: Optional[List[Icd10Code]] = Field(
        None,
        description='ICD-10 codes of the conditions which the tests concerns.',
        title='Icd10 codes',
    )
    id: Optional[int] = Field(None, description='', title='ID')
    notes: Optional[str] = Field(None, description='', title='Notes')
    patient: int = Field(..., description='', title='Patient')
    priority: Optional[Priority] = Field(
        None, description='`"Normal"` or `"STAT"`. Default `"Normal"`', title='Priority'
    )
    requisition_id: Optional[str] = Field(
        None,
        description='The ID printed on the requisition PDF. Generally the same as id.',
        title='Requisition id',
    )
    status: Optional[str] = Field(
        None,
        description='Equivalent to HL7\'s ORC.5. Defaults to `"N"`.\nValue | Notes\n----- | -----\n`"N"` | not sent                                          |\n`"Q"` | queued for processing                             |\n`"A"` | `ABN (Advance Beneficiary Notice)` required       |\n`"S"` | send                                              |\n`"R"` | results received                                  |\n`"E"` | error                                             |\n',
        title='Status',
    )
    sublab: int = Field(..., description='', title='Sublab')
    timestamp: Optional[str] = Field(
        None,
        description='Time at which the order was submitted. Defaults to now',
        title='Timestamp',
    )


class Type2(Enum):
    REQ = 'REQ'
    ABN = 'ABN'
    R_A = 'R-A'
    RES = 'RES'


class LabOrderDocument(BaseModel):
    document: str = Field(..., description='', title='Document')
    id: Optional[int] = Field(None, description='', title='ID')
    lab_order: int = Field(
        ...,
        description='ID of the order this document is associated with',
        title='Lab order',
    )
    timestamp: Optional[str] = Field(
        None, description='Time at which the document was uploaded', title='Timestamp'
    )
    type: Type2 = Field(
        ...,
        description='\nValue | Notes\n----- | -----\n`"REQ"` | requisition form                                              |\n`"ABN"` | `ABN (Advance Beneficiary Notice)`                            |\n`"R-A"` | requisition form and :abbr:`ABN (Advance Beneficiary Notice)` |\n`"RES"` | lab results                                                   |\n',
        title='Type',
    )


class AbnormalStatus(Enum):
    L = 'L'
    LL = 'LL'
    H = 'H'
    HH = 'HH'
    field_ = '<'
    field__1 = '>'
    A = 'A'
    AA = 'AA'
    S = 'S'
    R = 'R'
    I = 'I'
    NEG = 'NEG'
    POS = 'POS'
    N = 'N'
    field__2 = ''


class Status3(Enum):
    P = 'P'
    I = 'I'
    C = 'C'
    F = 'F'
    X = 'X'


class LabResult(BaseModel):
    abnormal_status: Optional[AbnormalStatus] = Field(
        None,
        description="\nValue | Notes\n----- | -----\n`'L'` | `'low'`\n`'LL'` | `'alert low'`\n`'H'` | `'high'`\n`'HH'` | `'alert high'`\n`'<'` | `'panic low'`\n`'>'` | `'panic high'`\n`'A'` | `'abnormal'`\n`'AA'` | `'very abnormal'`\n`'S'` | `'susceptible'`\n`'R'` | `'resistant'`\n`'I'` | `'intermediate'`\n`'NEG'` | `'negative'`\n`'POS'` | `'positive'`\n`'N'` | `'normal'`\n`''` | `'no comment'`\n",
        title='Abnormal status',
    )
    comments: Optional[str] = Field(None, description='', title='Comments')
    document: int = Field(
        ...,
        description='ID of `/lab_documents` object for the result',
        title='Document',
    )
    group_code: Optional[str] = Field(
        None,
        description='This is the code used for grouping result data.',
        title='Group code',
    )
    id: Optional[int] = Field(None, description='', title='ID')
    is_abnormal: Optional[str] = Field(
        None,
        description="If true, the result will be flagged for the doctor's attention",
        title='Is abnormal',
    )
    lab_order: Optional[str] = Field(
        None,
        description='ID of `/lab_orders` object the result belongs to',
        title='Lab order',
    )
    lab_test: int = Field(
        ..., description='ID of `/lab_tests` object for the result', title='Lab test'
    )
    normal_range: Optional[str] = Field(
        None,
        description='When ``value_is_numeric`` is True, this parameter must be a string of the form ``"<lower> <upper>", where both lower and upper are numerical``',
        title='Normal range',
    )
    observation_code: Optional[str] = Field(
        None, description='', title='Observation code'
    )
    observation_description: Optional[str] = Field(
        None,
        description='For example, ``"Blood Urea Nitrogen (BUN)"``',
        title='Observation description',
    )
    specimen_received: Optional[str] = Field(
        None, description='', title='Specimen received'
    )
    status: Status3 = Field(
        ...,
        description="\nValue | Notes\n----- | -----\n`'P'` | `'preliminary'`\n`'I'` | `'pending'`\n`'C'` | `'correction'`\n`'F'` | `'final'`\n`'X'` | `'canceled'`\n",
        title='Status',
    )
    test_performed: str = Field(..., description='', title='Test performed')
    unit: Optional[str] = Field(
        None, description='Unit used for the value', title='Unit'
    )
    value: str = Field(..., description='', title='Value')
    value_is_numeric: Optional[bool] = Field(
        None, description='Default to `False`', title='Value is numeric'
    )


class LabTest(BaseModel):
    code: Optional[str] = Field(None, description='', title='Code')
    collection_date: Optional[str] = Field(
        None,
        description='The date the specimen were collected',
        title='Collection date',
    )
    description: Optional[str] = Field(
        None, description='Short description of the ICD-10 code', title='Description'
    )
    id: Optional[int] = Field(None, description='', title='ID')
    internal_notes: Optional[str] = Field(
        None,
        description='Notes which are meant for, and read by, the labs',
        title='Internal notes',
    )
    lab_order: int = Field(
        ..., description='ID of associated lab order', title='Lab order'
    )
    name: Optional[str] = Field(None, description='Name for the test', title='Name')
    report_notes: Optional[str] = Field(
        None,
        description='Notes which are not meant for labs, but are copied on the results.',
        title='Report notes',
    )
    specimen_condition: Optional[str] = Field(
        None, description='', title='Specimen condition'
    )
    specimen_source: Optional[str] = Field(
        None, description='', title='Specimen source'
    )
    specimen_total_volume: Optional[float] = Field(
        None, description='', title='Specimen total volume'
    )
    status: Optional[Status3] = Field(
        None,
        description='One of `"preliminary"`, `"pending"`, `"correction"`, `"final"` or `"canceled"`. Defaults to `"preliminary"`',
        title='Status',
    )


class LabVendorLocation(BaseModel):
    facility_code: str = Field(
        ...,
        description='Used for identifying the lab in orders and results',
        title='Facility code',
    )
    id: Optional[int] = Field(None, description='', title='ID')
    name: str = Field(..., description='', title='Name')
    vendor_name: Optional[str] = Field(None, description='', title='Vendor name')


class AdjustmentGroupCode(Enum):
    field_ = ''
    CO = 'CO'
    OA = 'OA'
    PI = 'PI'
    PR = 'PR'


class AdjustmentReason(Enum):
    field_3 = '-3'
    field_2 = '-2'
    field_4 = '-4'
    field_1 = '-1'
    field_0 = '0'
    field_1_1 = '1'
    field_2_1 = '2'
    field_3_1 = '3'
    field_4_1 = '4'
    field_5 = '5'
    field_6 = '6'
    field_7 = '7'
    field_8 = '8'
    field_9 = '9'
    field_10 = '10'
    field_11 = '11'
    field_12 = '12'
    field_13 = '13'
    field_14 = '14'
    field_15 = '15'
    field_16 = '16'
    field_18 = '18'
    field_19 = '19'
    field_20 = '20'
    field_21 = '21'
    field_22 = '22'
    field_23 = '23'
    field_24 = '24'
    field_26 = '26'
    field_27 = '27'
    field_29 = '29'
    field_31 = '31'
    field_32 = '32'
    field_33 = '33'
    field_34 = '34'
    field_35 = '35'
    field_39 = '39'
    field_40 = '40'
    field_44 = '44'
    field_45 = '45'
    field_49 = '49'
    field_50 = '50'
    field_51 = '51'
    field_53 = '53'
    field_54 = '54'
    field_55 = '55'
    field_56 = '56'
    field_58 = '58'
    field_59 = '59'
    field_60 = '60'
    field_61 = '61'
    field_66 = '66'
    field_69 = '69'
    field_70 = '70'
    field_74 = '74'
    field_75 = '75'
    field_76 = '76'
    field_78 = '78'
    field_85 = '85'
    field_87 = '87'
    field_89 = '89'
    field_90 = '90'
    field_91 = '91'
    field_94 = '94'
    field_95 = '95'
    field_96 = '96'
    field_97 = '97'
    field_100 = '100'
    field_101 = '101'
    field_102 = '102'
    field_103 = '103'
    field_104 = '104'
    field_105 = '105'
    field_106 = '106'
    field_107 = '107'
    field_108 = '108'
    field_109 = '109'
    field_110 = '110'
    field_111 = '111'
    field_112 = '112'
    field_114 = '114'
    field_115 = '115'
    field_116 = '116'
    field_117 = '117'
    field_118 = '118'
    field_119 = '119'
    field_121 = '121'
    field_122 = '122'
    field_125 = '125'
    field_128 = '128'
    field_129 = '129'
    field_130 = '130'
    field_131 = '131'
    field_132 = '132'
    field_133 = '133'
    field_134 = '134'
    field_135 = '135'
    field_136 = '136'
    field_137 = '137'
    field_138 = '138'
    field_139 = '139'
    field_140 = '140'
    field_142 = '142'
    field_143 = '143'
    field_144 = '144'
    field_146 = '146'
    field_147 = '147'
    field_148 = '148'
    field_149 = '149'
    field_150 = '150'
    field_151 = '151'
    field_152 = '152'
    field_153 = '153'
    field_154 = '154'
    field_155 = '155'
    field_157 = '157'
    field_158 = '158'
    field_159 = '159'
    field_160 = '160'
    field_161 = '161'
    field_162 = '162'
    field_163 = '163'
    field_164 = '164'
    field_165 = '165'
    field_166 = '166'
    field_167 = '167'
    field_168 = '168'
    field_169 = '169'
    field_170 = '170'
    field_171 = '171'
    field_172 = '172'
    field_173 = '173'
    field_174 = '174'
    field_175 = '175'
    field_176 = '176'
    field_177 = '177'
    field_178 = '178'
    field_179 = '179'
    field_180 = '180'
    field_181 = '181'
    field_182 = '182'
    field_183 = '183'
    field_184 = '184'
    field_185 = '185'
    field_186 = '186'
    field_187 = '187'
    field_188 = '188'
    field_189 = '189'
    field_190 = '190'
    field_191 = '191'
    field_192 = '192'
    field_193 = '193'
    field_194 = '194'
    field_195 = '195'
    field_197 = '197'
    field_198 = '198'
    field_199 = '199'
    field_200 = '200'
    field_201 = '201'
    field_202 = '202'
    field_203 = '203'
    field_204 = '204'
    field_205 = '205'
    field_206 = '206'
    field_207 = '207'
    field_208 = '208'
    field_209 = '209'
    field_210 = '210'
    field_211 = '211'
    field_212 = '212'
    field_213 = '213'
    field_214 = '214'
    field_215 = '215'
    field_216 = '216'
    field_217 = '217'
    field_218 = '218'
    field_219 = '219'
    field_220 = '220'
    field_221 = '221'
    field_222 = '222'
    field_223 = '223'
    field_224 = '224'
    field_225 = '225'
    field_226 = '226'
    field_227 = '227'
    field_228 = '228'
    field_229 = '229'
    field_230 = '230'
    field_231 = '231'
    field_232 = '232'
    field_233 = '233'
    field_234 = '234'
    field_235 = '235'
    field_236 = '236'
    field_237 = '237'
    field_238 = '238'
    field_239 = '239'
    field_240 = '240'
    field_241 = '241'
    field_242 = '242'
    field_243 = '243'
    field_244 = '244'
    field_245 = '245'
    field_246 = '246'
    field_247 = '247'
    field_248 = '248'
    field_249 = '249'
    field_250 = '250'
    field_251 = '251'
    field_252 = '252'
    field_253 = '253'
    field_254 = '254'
    field_256 = '256'
    field_257 = '257'
    field_258 = '258'
    field_259 = '259'
    field_260 = '260'
    field_261 = '261'
    field_262 = '262'
    field_263 = '263'
    field_264 = '264'
    field_265 = '265'
    field_266 = '266'
    field_267 = '267'
    field_268 = '268'
    field_269 = '269'
    field_270 = '270'
    field_271 = '271'
    field_272 = '272'
    field_273 = '273'
    field_274 = '274'
    field_275 = '275'
    field_276 = '276'
    field_277 = '277'
    field_287 = '287'
    field_288 = '288'
    A0 = 'A0'
    A1 = 'A1'
    A5 = 'A5'
    A6 = 'A6'
    A7 = 'A7'
    A8 = 'A8'
    B1 = 'B1'
    B4 = 'B4'
    B5 = 'B5'
    B7 = 'B7'
    B8 = 'B8'
    B9 = 'B9'
    B10 = 'B10'
    B11 = 'B11'
    B12 = 'B12'
    B13 = 'B13'
    B14 = 'B14'
    B15 = 'B15'
    B16 = 'B16'
    B20 = 'B20'
    B22 = 'B22'
    B23 = 'B23'
    P1 = 'P1'
    P2 = 'P2'
    P3 = 'P3'
    P4 = 'P4'
    P5 = 'P5'
    P6 = 'P6'
    P7 = 'P7'
    P8 = 'P8'
    P9 = 'P9'
    P10 = 'P10'
    P11 = 'P11'
    P12 = 'P12'
    P13 = 'P13'
    P14 = 'P14'
    P15 = 'P15'
    P16 = 'P16'
    P17 = 'P17'
    P18 = 'P18'
    P19 = 'P19'
    P20 = 'P20'
    P21 = 'P21'
    P22 = 'P22'
    P23 = 'P23'
    W1 = 'W1'
    W2 = 'W2'
    W3 = 'W3'
    W4 = 'W4'
    Y1 = 'Y1'
    Y2 = 'Y2'
    Y3 = 'Y3'


class ClaimStatus(Enum):
    field_ = ''
    field_0 = '0'
    field_1 = '1'
    field_2 = '2'
    field_3 = '3'
    field_4 = '4'
    field_5 = '5'
    field_10 = '10'
    field_13 = '13'
    field_15 = '15'
    field_16 = '16'
    field_17 = '17'
    field_19 = '19'
    field_20 = '20'
    field_21 = '21'
    field_22 = '22'
    field_23 = '23'
    field_25 = '25'
    field_27 = '27'


class LineItemTransaction(BaseModel):
    adjustment: Optional[float] = Field(
        None, description='Adjustment from total billed', title='Adjustment'
    )
    adjustment_group_code: Optional[AdjustmentGroupCode] = Field(
        None, description='Group code for adjustment', title='Adjustment group code'
    )
    adjustment_reason: Optional[AdjustmentReason] = Field(
        None, description='Reason for adjustment', title='Adjustment reason'
    )
    appointment: Optional[int] = Field(
        None, description='Appointment ID', title='Appointment'
    )
    check_date: Optional[str] = Field(
        None, description='Date of check', title='Check date'
    )
    claim_status: Optional[ClaimStatus] = Field(
        None, description='Status of claim', title='Claim status'
    )
    created_at: Optional[str] = Field(None, description='', title='Created at')
    doctor: Optional[int] = Field(None, description='Doctor ID', title='Doctor')
    id: Optional[int] = Field(None, description='', title='ID')
    ins_name: Optional[int] = Field(
        None,
        description='Can be one of the following, `1`(Primary Insurance), `2`(Secondary Insurance)',
        title='Ins name',
    )
    ins_paid: Optional[float] = Field(None, description='', title='Ins paid')
    line_item: Optional[int] = Field(
        None, description='ID of `/api/line_item` object', title='Line item'
    )
    patient: Optional[int] = Field(None, description='', title='Patient')
    posted_date: Optional[str] = Field(
        None, description='Date when transaction is created', title='Posted date'
    )
    trace_number: Optional[str] = Field(
        None, description='Check number', title='Trace number'
    )
    updated_at: Optional[str] = Field(None, description='', title='Updated at')


class Country1(Enum):
    field_ = ''
    AF = 'AF'
    AX = 'AX'
    AL = 'AL'
    DZ = 'DZ'
    AS = 'AS'
    AD = 'AD'
    AO = 'AO'
    AI = 'AI'
    AQ = 'AQ'
    AG = 'AG'
    AR = 'AR'
    AM = 'AM'
    AW = 'AW'
    AU = 'AU'
    AT = 'AT'
    AZ = 'AZ'
    BS = 'BS'
    BH = 'BH'
    BD = 'BD'
    BB = 'BB'
    BY = 'BY'
    BE = 'BE'
    BZ = 'BZ'
    BJ = 'BJ'
    BM = 'BM'
    BT = 'BT'
    BO = 'BO'
    BQ = 'BQ'
    BA = 'BA'
    BW = 'BW'
    BV = 'BV'
    BR = 'BR'
    IO = 'IO'
    BN = 'BN'
    BG = 'BG'
    BF = 'BF'
    BI = 'BI'
    KH = 'KH'
    CM = 'CM'
    CA = 'CA'
    CV = 'CV'
    KY = 'KY'
    CF = 'CF'
    TD = 'TD'
    CL = 'CL'
    CN = 'CN'
    CX = 'CX'
    CC = 'CC'
    CO = 'CO'
    KM = 'KM'
    CG = 'CG'
    CD = 'CD'
    CK = 'CK'
    CR = 'CR'
    CI = 'CI'
    HR = 'HR'
    CU = 'CU'
    CW = 'CW'
    CY = 'CY'
    CZ = 'CZ'
    CYM = 'CYM'
    DK = 'DK'
    DJ = 'DJ'
    DM = 'DM'
    DO = 'DO'
    EC = 'EC'
    EG = 'EG'
    SV = 'SV'
    GQ = 'GQ'
    ER = 'ER'
    EE = 'EE'
    ET = 'ET'
    FK = 'FK'
    FO = 'FO'
    FJ = 'FJ'
    FI = 'FI'
    FR = 'FR'
    GF = 'GF'
    PF = 'PF'
    TF = 'TF'
    GA = 'GA'
    GM = 'GM'
    GE = 'GE'
    DE = 'DE'
    GH = 'GH'
    GI = 'GI'
    GR = 'GR'
    GL = 'GL'
    GD = 'GD'
    GP = 'GP'
    GU = 'GU'
    GT = 'GT'
    GG = 'GG'
    GN = 'GN'
    GW = 'GW'
    GY = 'GY'
    HT = 'HT'
    HM = 'HM'
    VA = 'VA'
    HN = 'HN'
    HK = 'HK'
    HU = 'HU'
    IS = 'IS'
    IN = 'IN'
    ID = 'ID'
    IR = 'IR'
    IQ = 'IQ'
    IE = 'IE'
    IM = 'IM'
    IL = 'IL'
    IT = 'IT'
    JM = 'JM'
    JP = 'JP'
    JE = 'JE'
    JO = 'JO'
    KZ = 'KZ'
    KE = 'KE'
    KI = 'KI'
    KP = 'KP'
    KR = 'KR'
    XK = 'XK'
    KW = 'KW'
    KG = 'KG'
    LA = 'LA'
    LV = 'LV'
    LB = 'LB'
    LS = 'LS'
    LR = 'LR'
    LY = 'LY'
    LI = 'LI'
    LT = 'LT'
    LU = 'LU'
    MO = 'MO'
    MK = 'MK'
    MG = 'MG'
    MW = 'MW'
    MY = 'MY'
    MV = 'MV'
    ML = 'ML'
    MT = 'MT'
    MH = 'MH'
    MQ = 'MQ'
    MR = 'MR'
    MU = 'MU'
    YT = 'YT'
    MX = 'MX'
    FM = 'FM'
    MD = 'MD'
    MC = 'MC'
    MN = 'MN'
    ME = 'ME'
    MS = 'MS'
    MA = 'MA'
    MZ = 'MZ'
    MM = 'MM'
    NA = 'NA'
    NR = 'NR'
    NP = 'NP'
    NL = 'NL'
    NC = 'NC'
    NZ = 'NZ'
    NI = 'NI'
    NE = 'NE'
    NG = 'NG'
    NU = 'NU'
    NF = 'NF'
    MP = 'MP'
    NO = 'NO'
    OM = 'OM'
    PK = 'PK'
    PW = 'PW'
    PS = 'PS'
    PA = 'PA'
    PG = 'PG'
    PY = 'PY'
    PE = 'PE'
    PH = 'PH'
    PN = 'PN'
    PL = 'PL'
    PT = 'PT'
    PR = 'PR'
    QA = 'QA'
    RE = 'RE'
    RO = 'RO'
    RU = 'RU'
    RW = 'RW'
    BL = 'BL'
    SH = 'SH'
    KN = 'KN'
    LC = 'LC'
    MF = 'MF'
    PM = 'PM'
    VC = 'VC'
    WS = 'WS'
    SM = 'SM'
    ST = 'ST'
    SA = 'SA'
    SN = 'SN'
    RS = 'RS'
    SC = 'SC'
    SL = 'SL'
    SG = 'SG'
    SX = 'SX'
    SK = 'SK'
    SI = 'SI'
    SB = 'SB'
    SO = 'SO'
    ZA = 'ZA'
    GS = 'GS'
    SS = 'SS'
    ES = 'ES'
    LK = 'LK'
    SD = 'SD'
    SR = 'SR'
    SJ = 'SJ'
    SZ = 'SZ'
    SE = 'SE'
    CH = 'CH'
    SY = 'SY'
    TW = 'TW'
    TJ = 'TJ'
    TZ = 'TZ'
    TH = 'TH'
    TL = 'TL'
    TG = 'TG'
    TK = 'TK'
    TO = 'TO'
    TT = 'TT'
    TN = 'TN'
    TR = 'TR'
    TM = 'TM'
    TC = 'TC'
    TV = 'TV'
    UG = 'UG'
    UA = 'UA'
    AE = 'AE'
    GB = 'GB'
    US = 'US'
    UM = 'UM'
    UY = 'UY'
    UZ = 'UZ'
    VU = 'VU'
    VE = 'VE'
    VN = 'VN'
    VG = 'VG'
    VI = 'VI'
    WF = 'WF'
    EH = 'EH'
    YE = 'YE'
    ZM = 'ZM'
    ZW = 'ZW'


class OnlineTimeslot(BaseModel):
    day: Optional[int] = Field(
        None, description='`0`(Monday), ..., `6`(Sunday)', title='Day'
    )
    hour: Optional[int] = Field(None, description='From `0` to `23`', title='Hour')
    minute: Optional[int] = Field(
        None, description='One of `0`, `15`, `30` or `45`', title='Minute'
    )


class State(Enum):
    AL = 'AL'
    AK = 'AK'
    AS = 'AS'
    AZ = 'AZ'
    AR = 'AR'
    AA = 'AA'
    AE = 'AE'
    AP = 'AP'
    CA = 'CA'
    CO = 'CO'
    CT = 'CT'
    DE = 'DE'
    DC = 'DC'
    FL = 'FL'
    GA = 'GA'
    GU = 'GU'
    HI = 'HI'
    ID = 'ID'
    IL = 'IL'
    IN = 'IN'
    IA = 'IA'
    KS = 'KS'
    KY = 'KY'
    LA = 'LA'
    ME = 'ME'
    MD = 'MD'
    MA = 'MA'
    MI = 'MI'
    MN = 'MN'
    MS = 'MS'
    MO = 'MO'
    MT = 'MT'
    NE = 'NE'
    NV = 'NV'
    NH = 'NH'
    NJ = 'NJ'
    NM = 'NM'
    NY = 'NY'
    NC = 'NC'
    ND = 'ND'
    MP = 'MP'
    OH = 'OH'
    OK = 'OK'
    OR = 'OR'
    PA = 'PA'
    PR = 'PR'
    RI = 'RI'
    SC = 'SC'
    SD = 'SD'
    TN = 'TN'
    TX = 'TX'
    UT = 'UT'
    VT = 'VT'
    VI = 'VI'
    VA = 'VA'
    WA = 'WA'
    WV = 'WV'
    WI = 'WI'
    WY = 'WY'


class Office(BaseModel):
    address: Optional[str] = Field(None, description='', title='Address')
    archived: Optional[bool] = Field(
        None,
        description='Indicates that the object has been soft-deleted and should not be used',
        title='Archived',
    )
    city: Optional[str] = Field(None, description='', title='City')
    country: Optional[Country1] = Field(
        None, description='Two-letter country code', title='Country'
    )
    doctor: Optional[str] = Field(
        None, description='ID of the doctor who owns the office', title='Doctor'
    )
    end_time: Optional[str] = Field(
        None, description='Truncated to the hour. Default is `24:00`', title='End time'
    )
    exam_rooms: Optional[str] = Field(None, description='', title='Exam rooms')
    fax_number: Optional[str] = Field(None, description='', title='Fax number')
    id: Optional[int] = Field(None, description='', title='ID')
    name: Optional[str] = Field(None, description='', title='Name')
    online_scheduling: Optional[bool] = Field(
        None, description='Default is `false`', title='Online scheduling'
    )
    online_timeslots: Optional[List[OnlineTimeslot]] = Field(
        None, description='Array of timslots', title='Online timeslots'
    )
    phone_number: Optional[str] = Field(None, description='', title='Phone number')
    start_time: Optional[str] = Field(
        None,
        description='Truncated to the hour. Default is `00:00:00`',
        title='Start time',
    )
    state: Optional[State] = Field(
        None, description='Two-letter abbreviation', title='State'
    )
    tax_id_number_professional: Optional[str] = Field(
        None, description='Billing Tax ID #', title='Tax id number professional'
    )
    zip_code: Optional[str] = Field(None, description='', title='Zip code')


class AutoAccidentClaimRepState(Enum):
    AL = 'AL'
    AK = 'AK'
    AS = 'AS'
    AZ = 'AZ'
    AR = 'AR'
    AA = 'AA'
    AE = 'AE'
    AP = 'AP'
    CA = 'CA'
    CO = 'CO'
    CT = 'CT'
    DE = 'DE'
    DC = 'DC'
    FL = 'FL'
    GA = 'GA'
    GU = 'GU'
    HI = 'HI'
    ID = 'ID'
    IL = 'IL'
    IN = 'IN'
    IA = 'IA'
    KS = 'KS'
    KY = 'KY'
    LA = 'LA'
    ME = 'ME'
    MD = 'MD'
    MA = 'MA'
    MI = 'MI'
    MN = 'MN'
    MS = 'MS'
    MO = 'MO'
    MT = 'MT'
    NE = 'NE'
    NV = 'NV'
    NH = 'NH'
    NJ = 'NJ'
    NM = 'NM'
    NY = 'NY'
    NC = 'NC'
    ND = 'ND'
    MP = 'MP'
    OH = 'OH'
    OK = 'OK'
    OR = 'OR'
    PA = 'PA'
    PR = 'PR'
    RI = 'RI'
    SC = 'SC'
    SD = 'SD'
    TN = 'TN'
    TX = 'TX'
    UT = 'UT'
    VT = 'VT'
    VI = 'VI'
    VA = 'VA'
    WA = 'WA'
    WV = 'WV'
    WI = 'WI'
    WY = 'WY'


class AutoAccidentPatientRelationshipToSubscriber(Enum):
    field_ = ''
    field_01 = '01'
    field_04 = '04'
    field_05 = '05'
    field_07 = '07'
    field_10 = '10'
    field_15 = '15'
    field_17 = '17'
    field_19 = '19'
    field_20 = '20'
    field_21 = '21'
    field_22 = '22'
    field_23 = '23'
    field_24 = '24'
    field_29 = '29'
    field_32 = '32'
    field_33 = '33'
    field_36 = '36'
    field_39 = '39'
    field_40 = '40'
    field_41 = '41'
    field_43 = '43'
    field_53 = '53'
    field_76 = '76'
    G8 = 'G8'


class AutoAccidentPayerState(Enum):
    AL = 'AL'
    AK = 'AK'
    AS = 'AS'
    AZ = 'AZ'
    AR = 'AR'
    AA = 'AA'
    AE = 'AE'
    AP = 'AP'
    CA = 'CA'
    CO = 'CO'
    CT = 'CT'
    DE = 'DE'
    DC = 'DC'
    FL = 'FL'
    GA = 'GA'
    GU = 'GU'
    HI = 'HI'
    ID = 'ID'
    IL = 'IL'
    IN = 'IN'
    IA = 'IA'
    KS = 'KS'
    KY = 'KY'
    LA = 'LA'
    ME = 'ME'
    MD = 'MD'
    MA = 'MA'
    MI = 'MI'
    MN = 'MN'
    MS = 'MS'
    MO = 'MO'
    MT = 'MT'
    NE = 'NE'
    NV = 'NV'
    NH = 'NH'
    NJ = 'NJ'
    NM = 'NM'
    NY = 'NY'
    NC = 'NC'
    ND = 'ND'
    MP = 'MP'
    OH = 'OH'
    OK = 'OK'
    OR = 'OR'
    PA = 'PA'
    PR = 'PR'
    RI = 'RI'
    SC = 'SC'
    SD = 'SD'
    TN = 'TN'
    TX = 'TX'
    UT = 'UT'
    VT = 'VT'
    VI = 'VI'
    VA = 'VA'
    WA = 'WA'
    WV = 'WV'
    WI = 'WI'
    WY = 'WY'


class AutoAccidentSignificantInjury(Enum):
    YES = 'YES'
    NO = 'NO'
    N_A = 'N\\A'


class AutoAccidentStateOfOccurrence(Enum):
    AL = 'AL'
    AK = 'AK'
    AS = 'AS'
    AZ = 'AZ'
    AR = 'AR'
    AA = 'AA'
    AE = 'AE'
    AP = 'AP'
    CA = 'CA'
    CO = 'CO'
    CT = 'CT'
    DE = 'DE'
    DC = 'DC'
    FL = 'FL'
    GA = 'GA'
    GU = 'GU'
    HI = 'HI'
    ID = 'ID'
    IL = 'IL'
    IN = 'IN'
    IA = 'IA'
    KS = 'KS'
    KY = 'KY'
    LA = 'LA'
    ME = 'ME'
    MD = 'MD'
    MA = 'MA'
    MI = 'MI'
    MN = 'MN'
    MS = 'MS'
    MO = 'MO'
    MT = 'MT'
    NE = 'NE'
    NV = 'NV'
    NH = 'NH'
    NJ = 'NJ'
    NM = 'NM'
    NY = 'NY'
    NC = 'NC'
    ND = 'ND'
    MP = 'MP'
    OH = 'OH'
    OK = 'OK'
    OR = 'OR'
    PA = 'PA'
    PR = 'PR'
    RI = 'RI'
    SC = 'SC'
    SD = 'SD'
    TN = 'TN'
    TX = 'TX'
    UT = 'UT'
    VT = 'VT'
    VI = 'VI'
    VA = 'VA'
    WA = 'WA'
    WV = 'WV'
    WI = 'WI'
    WY = 'WY'


class AutoAccidentSubscriberState(Enum):
    AL = 'AL'
    AK = 'AK'
    AS = 'AS'
    AZ = 'AZ'
    AR = 'AR'
    AA = 'AA'
    AE = 'AE'
    AP = 'AP'
    CA = 'CA'
    CO = 'CO'
    CT = 'CT'
    DE = 'DE'
    DC = 'DC'
    FL = 'FL'
    GA = 'GA'
    GU = 'GU'
    HI = 'HI'
    ID = 'ID'
    IL = 'IL'
    IN = 'IN'
    IA = 'IA'
    KS = 'KS'
    KY = 'KY'
    LA = 'LA'
    ME = 'ME'
    MD = 'MD'
    MA = 'MA'
    MI = 'MI'
    MN = 'MN'
    MS = 'MS'
    MO = 'MO'
    MT = 'MT'
    NE = 'NE'
    NV = 'NV'
    NH = 'NH'
    NJ = 'NJ'
    NM = 'NM'
    NY = 'NY'
    NC = 'NC'
    ND = 'ND'
    MP = 'MP'
    OH = 'OH'
    OK = 'OK'
    OR = 'OR'
    PA = 'PA'
    PR = 'PR'
    RI = 'RI'
    SC = 'SC'
    SD = 'SD'
    TN = 'TN'
    TX = 'TX'
    UT = 'UT'
    VT = 'VT'
    VI = 'VI'
    VA = 'VA'
    WA = 'WA'
    WV = 'WV'
    WI = 'WI'
    WY = 'WY'


class AutoAccidentInsurance(BaseModel):
    auto_accident_case_number: Optional[str] = Field(
        None, description='', title='Auto accident case number'
    )
    auto_accident_claim_rep_address: Optional[str] = Field(
        None, description='', title='Auto accident claim rep address'
    )
    auto_accident_claim_rep_city: Optional[str] = Field(
        None, description='', title='Auto accident claim rep city'
    )
    auto_accident_claim_rep_is_insurer: Optional[bool] = Field(
        None,
        description="Is the insurer's claim representative the insurer?",
        title='Auto accident claim rep is insurer',
    )
    auto_accident_claim_rep_name: Optional[str] = Field(
        None, description='', title='Auto accident claim rep name'
    )
    auto_accident_claim_rep_state: Optional[AutoAccidentClaimRepState] = Field(
        None, description='', title='Auto accident claim rep state'
    )
    auto_accident_claim_rep_zip: Optional[str] = Field(
        None, description='', title='Auto accident claim rep zip'
    )
    auto_accident_company: Optional[str] = Field(
        None, description='', title='Auto accident company'
    )
    auto_accident_date_of_accident: Optional[str] = Field(
        None, description='', title='Auto accident date of accident'
    )
    auto_accident_disabled_from_date: Optional[str] = Field(
        None,
        description='Patient was disabled (unable to work) from',
        title='Auto accident disabled from date',
    )
    auto_accident_disabled_to_date: Optional[str] = Field(
        None,
        description='Patient was disabled (unable to work) to',
        title='Auto accident disabled to date',
    )
    auto_accident_had_similar_condition: Optional[bool] = Field(
        None,
        description='Has the patient had same or similar condition?',
        title='Auto accident had similar condition',
    )
    auto_accident_is_subscriber_the_patient: Optional[bool] = Field(
        None,
        description="True if the insurance policy is under patient's own name.",
        title='Auto accident is subscriber the patient',
    )
    auto_accident_notes: Optional[str] = Field(
        None, description='', title='Auto accident notes'
    )
    auto_accident_patient_relationship_to_subscriber: Optional[
        AutoAccidentPatientRelationshipToSubscriber
    ] = Field(
        None, description='', title='Auto accident patient relationship to subscriber'
    )
    auto_accident_payer_address: Optional[str] = Field(
        None, description='', title='Auto accident payer address'
    )
    auto_accident_payer_city: Optional[str] = Field(
        None, description='', title='Auto accident payer city'
    )
    auto_accident_payer_id: Optional[str] = Field(
        None, description='Auto Accident Payer ID', title='Auto accident payer id'
    )
    auto_accident_payer_state: Optional[AutoAccidentPayerState] = Field(
        None, description='', title='Auto accident payer state'
    )
    auto_accident_payer_zip: Optional[str] = Field(
        None, description='', title='Auto accident payer zip'
    )
    auto_accident_policy_number: Optional[str] = Field(
        None, description='', title='Auto accident policy number'
    )
    auto_accident_return_to_work_date: Optional[str] = Field(
        None,
        description='If still disabled, patient should be able to return to work on',
        title='Auto accident return to work date',
    )
    auto_accident_significant_injury: Optional[AutoAccidentSignificantInjury] = Field(
        None, description='', title='Auto accident significant injury'
    )
    auto_accident_significant_injury_notes: Optional[str] = Field(
        None, description='', title='Auto accident significant injury notes'
    )
    auto_accident_similar_condition_date: Optional[str] = Field(
        None,
        description='Date of same or similar condition',
        title='Auto accident similar condition date',
    )
    auto_accident_similar_condition_notes: Optional[str] = Field(
        None, description='', title='Auto accident similar condition notes'
    )
    auto_accident_state_of_occurrence: Optional[AutoAccidentStateOfOccurrence] = Field(
        None, description='', title='Auto accident state of occurrence'
    )
    auto_accident_still_under_care: Optional[bool] = Field(
        None,
        description='Is patient still under your care for this condition?',
        title='Auto accident still under care',
    )
    auto_accident_subscriber_address: Optional[str] = Field(
        None, description='', title='Auto accident subscriber address'
    )
    auto_accident_subscriber_city: Optional[str] = Field(
        None, description='', title='Auto accident subscriber city'
    )
    auto_accident_subscriber_date_of_birth: Optional[str] = Field(
        None, description='', title='Auto accident subscriber date of birth'
    )
    auto_accident_subscriber_first_name: Optional[str] = Field(
        None, description='', title='Auto accident subscriber first name'
    )
    auto_accident_subscriber_last_name: Optional[str] = Field(
        None, description='', title='Auto accident subscriber last name'
    )
    auto_accident_subscriber_middle_name: Optional[str] = Field(
        None, description='', title='Auto accident subscriber middle name'
    )
    auto_accident_subscriber_phone_number: Optional[str] = Field(
        None, description='', title='Auto accident subscriber phone number'
    )
    auto_accident_subscriber_social_security: Optional[str] = Field(
        None, description='', title='Auto accident subscriber social security'
    )
    auto_accident_subscriber_state: Optional[AutoAccidentSubscriberState] = Field(
        None, description='', title='Auto accident subscriber state'
    )
    auto_accident_subscriber_suffix: Optional[str] = Field(
        None, description='', title='Auto accident subscriber suffix'
    )
    auto_accident_subscriber_zip_code: Optional[str] = Field(
        None, description='', title='Auto accident subscriber zip code'
    )
    auto_accident_treatment_duration: Optional[str] = Field(
        None, description='', title='Auto accident treatment duration'
    )
    auto_accident_will_require_therapy: Optional[bool] = Field(
        None,
        description='Will the patient require rehabilitation and/or occupational therapy as a result of the injuries sustained in this accident?',
        title='Auto accident will require therapy',
    )
    auto_accident_will_require_therapy_rec: Optional[str] = Field(
        None, description='', title='Auto accident will require therapy rec'
    )


class CustomDemographic(BaseModel):
    field_type: Optional[int] = Field(
        None,
        description='ID of the `/api/custom_demographics` object',
        title='Field type',
    )
    updated_at: Optional[str] = Field(None, description='', title='Updated at')
    value: Optional[str] = Field(None, description='', title='Value')


class Ethnicity(Enum):
    blank = 'blank'
    hispanic = 'hispanic'
    not_hispanic = 'not_hispanic'
    declined = 'declined'


class Gender(Enum):
    field_ = ''
    Male = 'Male'
    Female = 'Female'
    Other = 'Other'
    UNK = 'UNK'
    ASKU = 'ASKU'


class PatientFlag(BaseModel):
    archived: Optional[bool] = Field(None, description='', title='Archived')
    color: Optional[str] = Field(None, description='', title='Color')
    created_at: Optional[str] = Field(None, description='', title='Created at')
    doctor: Optional[int] = Field(
        None, description='ID of doctor who owns the flag', title='Doctor'
    )
    id: Optional[int] = Field(None, description='', title='ID')
    name: Optional[str] = Field(None, description='', title='Name')
    priority: Optional[int] = Field(None, description='', title='Priority')
    updated_at: Optional[str] = Field(None, description='', title='Updated at')


class PatientFlagsAttachedItem(BaseModel):
    archived: Optional[bool] = Field(None, description='', title='Archived')
    created_at: Optional[str] = Field(None, description='', title='Created at')
    flag_text: Optional[str] = Field(
        None, description='Description of the patient flag', title='Flag text'
    )
    flag_type: Optional[int] = Field(
        None,
        description='ID of the associated `/api/patient_flag_types` object',
        title='Flag type',
    )
    id: Optional[int] = Field(None, description='', title='ID')
    updated_at: Optional[str] = Field(None, description='', title='Updated at')


class PatientPaymentProfile(Enum):
    field_ = ''
    Cash = 'Cash'
    Insurance = 'Insurance'
    Insurance_Out_of_Network = 'Insurance Out of Network'
    Auto_Accident = 'Auto Accident'
    Worker_s_Comp = 'Worker\'s Comp'


class PatientStatus(Enum):
    A = 'A'
    I = 'I'
    D = 'D'


class PreferredLanguage(Enum):
    blank = 'blank'
    eng = 'eng'
    zho = 'zho'
    fra = 'fra'
    ita = 'ita'
    jpn = 'jpn'
    por = 'por'
    rus = 'rus'
    spa = 'spa'
    other = 'other'
    unknown = 'unknown'
    declined = 'declined'


class InsurancePlanType(Enum):
    field_ = ''
    AM = 'AM'
    BL = 'BL'
    CH = 'CH'
    CI = 'CI'
    field_17 = '17'
    DS = 'DS'
    field_14 = '14'
    FI = 'FI'
    HM = 'HM'
    field_16 = '16'
    field_15 = '15'
    LM = 'LM'
    MC = 'MC'
    MA = 'MA'
    MB = 'MB'
    ZZ = 'ZZ'
    OF = 'OF'
    field_11 = '11'
    field_13 = '13'
    field_12 = '12'
    TV = 'TV'
    VA = 'VA'
    WC = 'WC'


class PatientRelationshipToSubscriber(Enum):
    field_ = ''
    field_01 = '01'
    field_04 = '04'
    field_05 = '05'
    field_07 = '07'
    field_10 = '10'
    field_15 = '15'
    field_17 = '17'
    field_19 = '19'
    field_20 = '20'
    field_21 = '21'
    field_22 = '22'
    field_23 = '23'
    field_24 = '24'
    field_29 = '29'
    field_32 = '32'
    field_33 = '33'
    field_36 = '36'
    field_39 = '39'
    field_40 = '40'
    field_41 = '41'
    field_43 = '43'
    field_53 = '53'
    field_76 = '76'
    G8 = 'G8'


class SubscriberCountry(Enum):
    field_ = ''
    AF = 'AF'
    AX = 'AX'
    AL = 'AL'
    DZ = 'DZ'
    AS = 'AS'
    AD = 'AD'
    AO = 'AO'
    AI = 'AI'
    AQ = 'AQ'
    AG = 'AG'
    AR = 'AR'
    AM = 'AM'
    AW = 'AW'
    AU = 'AU'
    AT = 'AT'
    AZ = 'AZ'
    BS = 'BS'
    BH = 'BH'
    BD = 'BD'
    BB = 'BB'
    BY = 'BY'
    BE = 'BE'
    BZ = 'BZ'
    BJ = 'BJ'
    BM = 'BM'
    BT = 'BT'
    BO = 'BO'
    BQ = 'BQ'
    BA = 'BA'
    BW = 'BW'
    BV = 'BV'
    BR = 'BR'
    IO = 'IO'
    BN = 'BN'
    BG = 'BG'
    BF = 'BF'
    BI = 'BI'
    KH = 'KH'
    CM = 'CM'
    CA = 'CA'
    CV = 'CV'
    KY = 'KY'
    CF = 'CF'
    TD = 'TD'
    CL = 'CL'
    CN = 'CN'
    CX = 'CX'
    CC = 'CC'
    CO = 'CO'
    KM = 'KM'
    CG = 'CG'
    CD = 'CD'
    CK = 'CK'
    CR = 'CR'
    CI = 'CI'
    HR = 'HR'
    CU = 'CU'
    CW = 'CW'
    CY = 'CY'
    CZ = 'CZ'
    CYM = 'CYM'
    DK = 'DK'
    DJ = 'DJ'
    DM = 'DM'
    DO = 'DO'
    EC = 'EC'
    EG = 'EG'
    SV = 'SV'
    GQ = 'GQ'
    ER = 'ER'
    EE = 'EE'
    ET = 'ET'
    FK = 'FK'
    FO = 'FO'
    FJ = 'FJ'
    FI = 'FI'
    FR = 'FR'
    GF = 'GF'
    PF = 'PF'
    TF = 'TF'
    GA = 'GA'
    GM = 'GM'
    GE = 'GE'
    DE = 'DE'
    GH = 'GH'
    GI = 'GI'
    GR = 'GR'
    GL = 'GL'
    GD = 'GD'
    GP = 'GP'
    GU = 'GU'
    GT = 'GT'
    GG = 'GG'
    GN = 'GN'
    GW = 'GW'
    GY = 'GY'
    HT = 'HT'
    HM = 'HM'
    VA = 'VA'
    HN = 'HN'
    HK = 'HK'
    HU = 'HU'
    IS = 'IS'
    IN = 'IN'
    ID = 'ID'
    IR = 'IR'
    IQ = 'IQ'
    IE = 'IE'
    IM = 'IM'
    IL = 'IL'
    IT = 'IT'
    JM = 'JM'
    JP = 'JP'
    JE = 'JE'
    JO = 'JO'
    KZ = 'KZ'
    KE = 'KE'
    KI = 'KI'
    KP = 'KP'
    KR = 'KR'
    XK = 'XK'
    KW = 'KW'
    KG = 'KG'
    LA = 'LA'
    LV = 'LV'
    LB = 'LB'
    LS = 'LS'
    LR = 'LR'
    LY = 'LY'
    LI = 'LI'
    LT = 'LT'
    LU = 'LU'
    MO = 'MO'
    MK = 'MK'
    MG = 'MG'
    MW = 'MW'
    MY = 'MY'
    MV = 'MV'
    ML = 'ML'
    MT = 'MT'
    MH = 'MH'
    MQ = 'MQ'
    MR = 'MR'
    MU = 'MU'
    YT = 'YT'
    MX = 'MX'
    FM = 'FM'
    MD = 'MD'
    MC = 'MC'
    MN = 'MN'
    ME = 'ME'
    MS = 'MS'
    MA = 'MA'
    MZ = 'MZ'
    MM = 'MM'
    NA = 'NA'
    NR = 'NR'
    NP = 'NP'
    NL = 'NL'
    NC = 'NC'
    NZ = 'NZ'
    NI = 'NI'
    NE = 'NE'
    NG = 'NG'
    NU = 'NU'
    NF = 'NF'
    MP = 'MP'
    NO = 'NO'
    OM = 'OM'
    PK = 'PK'
    PW = 'PW'
    PS = 'PS'
    PA = 'PA'
    PG = 'PG'
    PY = 'PY'
    PE = 'PE'
    PH = 'PH'
    PN = 'PN'
    PL = 'PL'
    PT = 'PT'
    PR = 'PR'
    QA = 'QA'
    RE = 'RE'
    RO = 'RO'
    RU = 'RU'
    RW = 'RW'
    BL = 'BL'
    SH = 'SH'
    KN = 'KN'
    LC = 'LC'
    MF = 'MF'
    PM = 'PM'
    VC = 'VC'
    WS = 'WS'
    SM = 'SM'
    ST = 'ST'
    SA = 'SA'
    SN = 'SN'
    RS = 'RS'
    SC = 'SC'
    SL = 'SL'
    SG = 'SG'
    SX = 'SX'
    SK = 'SK'
    SI = 'SI'
    SB = 'SB'
    SO = 'SO'
    ZA = 'ZA'
    GS = 'GS'
    SS = 'SS'
    ES = 'ES'
    LK = 'LK'
    SD = 'SD'
    SR = 'SR'
    SJ = 'SJ'
    SZ = 'SZ'
    SE = 'SE'
    CH = 'CH'
    SY = 'SY'
    TW = 'TW'
    TJ = 'TJ'
    TZ = 'TZ'
    TH = 'TH'
    TL = 'TL'
    TG = 'TG'
    TK = 'TK'
    TO = 'TO'
    TT = 'TT'
    TN = 'TN'
    TR = 'TR'
    TM = 'TM'
    TC = 'TC'
    TV = 'TV'
    UG = 'UG'
    UA = 'UA'
    AE = 'AE'
    GB = 'GB'
    US = 'US'
    UM = 'UM'
    UY = 'UY'
    UZ = 'UZ'
    VU = 'VU'
    VE = 'VE'
    VN = 'VN'
    VG = 'VG'
    VI = 'VI'
    WF = 'WF'
    EH = 'EH'
    YE = 'YE'
    ZM = 'ZM'
    ZW = 'ZW'


class SubscriberGender(Enum):
    field_ = ''
    Male = 'Male'
    Female = 'Female'
    Other = 'Other'
    UNK = 'UNK'
    ASKU = 'ASKU'


class SubscriberState(Enum):
    AL = 'AL'
    AK = 'AK'
    AS = 'AS'
    AZ = 'AZ'
    AR = 'AR'
    AA = 'AA'
    AE = 'AE'
    AP = 'AP'
    CA = 'CA'
    CO = 'CO'
    CT = 'CT'
    DE = 'DE'
    DC = 'DC'
    FL = 'FL'
    GA = 'GA'
    GU = 'GU'
    HI = 'HI'
    ID = 'ID'
    IL = 'IL'
    IN = 'IN'
    IA = 'IA'
    KS = 'KS'
    KY = 'KY'
    LA = 'LA'
    ME = 'ME'
    MD = 'MD'
    MA = 'MA'
    MI = 'MI'
    MN = 'MN'
    MS = 'MS'
    MO = 'MO'
    MT = 'MT'
    NE = 'NE'
    NV = 'NV'
    NH = 'NH'
    NJ = 'NJ'
    NM = 'NM'
    NY = 'NY'
    NC = 'NC'
    ND = 'ND'
    MP = 'MP'
    OH = 'OH'
    OK = 'OK'
    OR = 'OR'
    PA = 'PA'
    PR = 'PR'
    RI = 'RI'
    SC = 'SC'
    SD = 'SD'
    TN = 'TN'
    TX = 'TX'
    UT = 'UT'
    VT = 'VT'
    VI = 'VI'
    VA = 'VA'
    WA = 'WA'
    WV = 'WV'
    WI = 'WI'
    WY = 'WY'


class PrimaryInsurance(BaseModel):
    insurance_claim_office_number: Optional[str] = Field(
        None,
        description='Insurance office phone number',
        title='Insurance claim office number',
    )
    insurance_company: Optional[str] = Field(
        None, description='', title='Insurance company'
    )
    insurance_group_name: Optional[str] = Field(
        None, description='', title='Insurance group name'
    )
    insurance_group_number: Optional[str] = Field(
        None, description='', title='Insurance group number'
    )
    insurance_id_number: Optional[str] = Field(
        None, description='', title='Insurance id number'
    )
    insurance_payer_id: Optional[str] = Field(
        None, description='', title='Insurance payer id'
    )
    insurance_plan_name: Optional[str] = Field(
        None, description='Name of insurance plan.', title='Insurance plan name'
    )
    insurance_plan_type: Optional[InsurancePlanType] = Field(
        None, description='', title='Insurance plan type'
    )
    is_subscriber_the_patient: Optional[bool] = Field(
        None,
        description="True if the insurance policy is under patient's own name. Defaults to true",
        title='Is subscriber the patient',
    )
    patient_relationship_to_subscriber: Optional[PatientRelationshipToSubscriber] = (
        Field(
            None,
            description='HCFA/1500 individual relationship code',
            title='Patient relationship to subscriber',
        )
    )
    photo_back: Optional[str] = Field(
        None, description='Photo of back of insurance card', title='Photo back'
    )
    photo_front: Optional[str] = Field(
        None, description='Photo of front of insurance card', title='Photo front'
    )
    subscriber_address: Optional[str] = Field(
        None, description='', title='Subscriber address'
    )
    subscriber_city: Optional[str] = Field(
        None, description='', title='Subscriber city'
    )
    subscriber_country: Optional[SubscriberCountry] = Field(
        None, description='Two-letter country code', title='Subscriber country'
    )
    subscriber_date_of_birth: Optional[str] = Field(
        None, description='', title='Subscriber date of birth'
    )
    subscriber_first_name: Optional[str] = Field(
        None, description='', title='Subscriber first name'
    )
    subscriber_gender: Optional[SubscriberGender] = Field(
        None, description='One of `"Male"` or `"Female"`', title='Subscriber gender'
    )
    subscriber_last_name: Optional[str] = Field(
        None, description='', title='Subscriber last name'
    )
    subscriber_middle_name: Optional[str] = Field(
        None, description='', title='Subscriber middle name'
    )
    subscriber_social_security: Optional[str] = Field(
        None, description='', title='Subscriber social security'
    )
    subscriber_state: Optional[SubscriberState] = Field(
        None, description='Two-letter state code', title='Subscriber state'
    )
    subscriber_suffix: Optional[str] = Field(
        None, description='E.g. `"II"` or `"III"`', title='Subscriber suffix'
    )
    subscriber_zip_code: Optional[str] = Field(
        None, description='', title='Subscriber zip code'
    )


class Race(Enum):
    blank = 'blank'
    indian = 'indian'
    asian = 'asian'
    black = 'black'
    hawaiian = 'hawaiian'
    white = 'white'
    other = 'other'
    declined = 'declined'


class ProviderQualifier(Enum):
    field_ = ''
    field_0B = '0B'
    field_1G = '1G'
    G2 = 'G2'


class Specialty(Enum):
    field_ = ''
    Acupuncture = 'Acupuncture'
    Advanced_Practice_Midwife = 'Advanced Practice Midwife'
    Aesthetic_Medicine = 'Aesthetic Medicine'
    Aesthetician = 'Aesthetician'
    Allergist_Immunologist = 'Allergist/Immunologist'
    Anesthesiologist = 'Anesthesiologist'
    Cardiac_Electrophysiologist = 'Cardiac Electrophysiologist'
    Cardiologist = 'Cardiologist'
    Cardiothoracic_Surgeon = 'Cardiothoracic Surgeon'
    Child_Adolescent_Psychiatry = 'Child/Adolescent Psychiatry'
    Chiropractor = 'Chiropractor'
    Clinical_Social_Worker = 'Clinical Social Worker'
    Colorectal_Surgeon = 'Colorectal Surgeon'
    Correactology = 'Correactology'
    Cosmetic_Medicine = 'Cosmetic Medicine'
    Counselor_Mental_Health = 'Counselor Mental Health'
    Counselor_Professional = 'Counselor Professional'
    Counselor = 'Counselor'
    Dentist = 'Dentist'
    Diabetology = 'Diabetology'
    Dermatologist = 'Dermatologist'
    Diagnostic_Medical_Sonographer = 'Diagnostic Medical Sonographer'
    Dietitian__Registered = 'Dietitian, Registered'
    Ear_Nose_Throat_Specialist__ENT_ = 'Ear-Nose-Throat Specialist (ENT)'
    Emergency_Medicine_Physician = 'Emergency Medicine Physician'
    Endocrinologist = 'Endocrinologist'
    Endodontist = 'Endodontist'
    Epidemiologist = 'Epidemiologist'
    Family_Practitioner = 'Family Practitioner'
    Gastroenterologist = 'Gastroenterologist'
    General_Practice = 'General Practice'
    General_Surgeon = 'General Surgeon'
    Geneticist = 'Geneticist'
    Geriatrician = 'Geriatrician'
    Gerontologist = 'Gerontologist'
    Gynecologist__no_OB_ = 'Gynecologist (no OB)'
    Gynegologic_Oncologist = 'Gynegologic Oncologist'
    Hand_Surgeon = 'Hand Surgeon'
    Hematologist = 'Hematologist'
    Home_Care = 'Home Care'
    Hospice = 'Hospice'
    Hospitalist = 'Hospitalist'
    Infectious_Disease_Specialist = 'Infectious Disease Specialist'
    Integrative_and_Functional_Medicine = 'Integrative and Functional Medicine'
    Integrative_Medicine = 'Integrative Medicine'
    Internist = 'Internist'
    Interventional_Radiology = 'Interventional Radiology'
    Laboratory_Medicine_Specialist = 'Laboratory Medicine Specialist'
    Laser_Surgery = 'Laser Surgery'
    Massage_Therapist = 'Massage Therapist'
    Naturopathic_Physician = 'Naturopathic Physician'
    Neonatologist = 'Neonatologist'
    Nephrologist = 'Nephrologist'
    Neurologist = 'Neurologist'
    Neuropsychology = 'Neuropsychology'
    Neurosurgeon = 'Neurosurgeon'
    Not_Actively_Practicing = 'Not Actively Practicing'
    Nuclear_Medicine_Specialist = 'Nuclear Medicine Specialist'
    Nurse_Practitioner = 'Nurse Practitioner'
    Nursing = 'Nursing'
    Nutritionist = 'Nutritionist'
    Obstetrician_Gynecologist = 'Obstetrician/Gynecologist'
    Occupational_Medicine = 'Occupational Medicine'
    Occupational_Therapist = 'Occupational Therapist'
    Oncologist = 'Oncologist'
    Ophthalmologist = 'Ophthalmologist'
    Optometrist = 'Optometrist'
    Oral_Surgeon = 'Oral Surgeon'
    Orofacial_Pain = 'Orofacial Pain'
    Orthodontist = 'Orthodontist'
    Orthopedic_Surgeon = 'Orthopedic Surgeon'
    Orthotist = 'Orthotist'
    Other = 'Other'
    Pain_Management_Specialist = 'Pain Management Specialist'
    Pathologist = 'Pathologist'
    Pediatric_Dentist = 'Pediatric Dentist'
    Pediatric_Gastroenterology = 'Pediatric Gastroenterology'
    Pediatric_Surgeon = 'Pediatric Surgeon'
    Pediatrician = 'Pediatrician'
    Perinatologist = 'Perinatologist'
    Periodontist = 'Periodontist'
    Physical_Medicine_and_Rehab_Specialist = 'Physical Medicine and Rehab Specialist'
    Physical_Therapist = 'Physical Therapist'
    Physician_Assistant = 'Physician Assistant'
    Plastic_Surgeon = 'Plastic Surgeon'
    Podiatrist = 'Podiatrist'
    Preventive_Aging_Medicine = 'Preventive-Aging Medicine'
    Preventive_Medicine_Occupational_Environmental_Medicine = (
        'Preventive Medicine/Occupational-Environmental Medicine'
    )
    Primary_Care_Physician = 'Primary Care Physician'
    Prosthetist = 'Prosthetist'
    Prosthodontist = 'Prosthodontist'
    Psychiatrist = 'Psychiatrist'
    Psychologist = 'Psychologist'
    Public_Health_Professional = 'Public Health Professional'
    Pulmonologist = 'Pulmonologist'
    Radiation_Oncologist = 'Radiation Oncologist'
    Radiologist = 'Radiologist'
    Registered_Nurse = 'Registered Nurse'
    Religious_Nonmedical_Practitioner = 'Religious Nonmedical Practitioner'
    Reproductive_Endocrinologist = 'Reproductive Endocrinologist'
    Reproductive_Medicine = 'Reproductive Medicine'
    Rheumatologist = 'Rheumatologist'
    Sleep_Medicine = 'Sleep Medicine'
    Speech_Language_Pathologist = 'Speech-Language Pathologist'
    Sports_Medicine_Specialist = 'Sports Medicine Specialist'
    Urologist = 'Urologist'
    Urgent_Care = 'Urgent Care'
    Vascular_Surgeon = 'Vascular Surgeon'


class ReferringDoctor(BaseModel):
    address: Optional[str] = Field(None, description='', title='Address')
    email: Optional[str] = Field(None, description='', title='Email')
    fax: Optional[str] = Field(
        None, description='Should follow format "xxx-xx-xxxx"', title='Fax'
    )
    first_name: Optional[str] = Field(None, description='', title='First name')
    last_name: Optional[str] = Field(None, description='', title='Last name')
    middle_name: Optional[str] = Field(None, description='', title='Middle name')
    npi: Optional[str] = Field(None, description='', title='Npi')
    phone: Optional[str] = Field(
        None, description='Should follow format "xxx-xx-xxxx"', title='Phone'
    )
    provider_number: Optional[str] = Field(
        None, description='', title='Provider number'
    )
    provider_qualifier: Optional[ProviderQualifier] = Field(
        None,
        description="Can be one of following, `''`, `'0B'`(State License #), `'1G'`(Provider UPIN #), `'G2'`(Provider Commercial #)",
        title='Provider qualifier',
    )
    specialty: Optional[Specialty] = Field(
        None,
        description="Can be one of following, `''`, `'Acupuncture'`, `'Advanced Practice Midwife'`, `'Aesthetic Medicine'`, `'Aesthetician'`, `'Allergist/Immunologist'`, `'Anesthesiologist'`, `'Cardiac Electrophysiologist'`, `'Cardiologist'`, `'Cardiothoracic Surgeon'`, `'Child/Adolescent Psychiatry'`, `'Chiropractor'`, `'Clinical Social Worker'`, `'Colorectal Surgeon'`, `'Correactology'`, `'Cosmetic Medicine'`, `'Counselor Mental Health'`, `'Counselor Professional'`, `'Counselor'`, `'Dentist'`, `'Diabetology'`, `'Dermatologist'`, `'Diagnostic Medical Sonographer'`, `'Dietitian, Registered'`, `'Ear-Nose-Throat Specialist (ENT)'`, `'Emergency Medicine Physician'`, `'Endocrinologist'`, `'Endodontist'`, `'Epidemiologist'`, `'Family Practitioner'`, `'Gastroenterologist'`, `'General Practice'`, `'General Surgeon'`, `'Geneticist'`, `'Geriatrician'`, `'Gerontologist'`, `'Gynecologist (no OB)'`, `'Gynegologic Oncologist'`, `'Hand Surgeon'`, `'Hematologist'`, `'Home Care'`, `'Hospice'`, `'Hospitalist'`, `'Infectious Disease Specialist'`, `'Integrative and Functional Medicine'`, `'Integrative Medicine'`, `'Internist'`, `'Interventional Radiology'`, `'Laboratory Medicine Specialist'`, `'Laser Surgery'`, `'Massage Therapist'`, `'Naturopathic Physician'`, `'Neonatologist'`, `'Nephrologist'`, `'Neurologist'`, `'Neuropsychology'`, `'Neurosurgeon'`, `'Not Actively Practicing'`, `'Nuclear Medicine Specialist'`, `'Nurse Practitioner'`, `'Nursing'`, `'Nutritionist'`, `'Obstetrician/Gynecologist'`, `'Occupational Medicine'`, `'Occupational Therapist'`, `'Oncologist'`, `'Ophthalmologist'`, `'Optometrist'`, `'Oral Surgeon'`, `'Orofacial Pain'`, `'Orthodontist'`, `'Orthopedic Surgeon'`, `'Orthotist'`, `'Other'`, `'Pain Management Specialist'`, `'Pathologist'`, `'Pediatric Dentist'`, `'Pediatric Gastroenterology'`, `'Pediatric Surgeon'`, `'Pediatrician'`, `'Perinatologist'`, `'Periodontist'`, `'Physical Medicine and Rehab Specialist'`, `'Physical Therapist'`, `'Physician Assistant'`, `'Plastic Surgeon'`, `'Podiatrist'`, `'Preventive-Aging Medicine'`, `'Preventive Medicine/Occupational-Environmental Medicine'`, `'Primary Care Physician'`, `'Prosthetist'`, `'Prosthodontist'`, `'Psychiatrist'`, `'Psychologist'`, `'Public Health Professional'`, `'Pulmonologist'`, `'Radiation Oncologist'`, `'Radiologist'`, `'Registered Nurse'`, `'Religious Nonmedical Practitioner'`, `'Reproductive Endocrinologist'`, `'Reproductive Medicine'`, `'Rheumatologist'`, `'Sleep Medicine'`, `'Speech-Language Pathologist'`, `'Sports Medicine Specialist'`, `'Urologist'`, `'Urgent Care'`, `'Vascular Surgeon'`",
        title='Specialty',
    )
    suffix: Optional[str] = Field(None, description='', title='Suffix')


class SecondaryInsurance(BaseModel):
    insurance_claim_office_number: Optional[str] = Field(
        None,
        description='Insurance office phone number',
        title='Insurance claim office number',
    )
    insurance_company: Optional[str] = Field(
        None, description='', title='Insurance company'
    )
    insurance_group_name: Optional[str] = Field(
        None, description='', title='Insurance group name'
    )
    insurance_group_number: Optional[str] = Field(
        None, description='', title='Insurance group number'
    )
    insurance_id_number: Optional[str] = Field(
        None, description='', title='Insurance id number'
    )
    insurance_payer_id: Optional[str] = Field(
        None, description='', title='Insurance payer id'
    )
    insurance_plan_name: Optional[str] = Field(
        None, description='Name of insurance plan.', title='Insurance plan name'
    )
    insurance_plan_type: Optional[InsurancePlanType] = Field(
        None, description='', title='Insurance plan type'
    )
    is_subscriber_the_patient: Optional[bool] = Field(
        None,
        description="True if the insurance policy is under patient's own name. Defaults to true",
        title='Is subscriber the patient',
    )
    patient_relationship_to_subscriber: Optional[PatientRelationshipToSubscriber] = (
        Field(
            None,
            description='HCFA/1500 individual relationship code',
            title='Patient relationship to subscriber',
        )
    )
    photo_back: Optional[str] = Field(
        None, description='Photo of back of insurance card', title='Photo back'
    )
    photo_front: Optional[str] = Field(
        None, description='Photo of front of insurance card', title='Photo front'
    )
    subscriber_address: Optional[str] = Field(
        None, description='', title='Subscriber address'
    )
    subscriber_city: Optional[str] = Field(
        None, description='', title='Subscriber city'
    )
    subscriber_country: Optional[SubscriberCountry] = Field(
        None, description='Two-letter country code', title='Subscriber country'
    )
    subscriber_date_of_birth: Optional[str] = Field(
        None, description='', title='Subscriber date of birth'
    )
    subscriber_first_name: Optional[str] = Field(
        None, description='', title='Subscriber first name'
    )
    subscriber_gender: Optional[SubscriberGender] = Field(
        None, description='One of `"Male"` or `"Female"`', title='Subscriber gender'
    )
    subscriber_last_name: Optional[str] = Field(
        None, description='', title='Subscriber last name'
    )
    subscriber_middle_name: Optional[str] = Field(
        None, description='', title='Subscriber middle name'
    )
    subscriber_social_security: Optional[str] = Field(
        None, description='', title='Subscriber social security'
    )
    subscriber_state: Optional[SubscriberState] = Field(
        None, description='Two-letter state code', title='Subscriber state'
    )
    subscriber_suffix: Optional[str] = Field(
        None, description='E.g. `"II"` or `"III"`', title='Subscriber suffix'
    )
    subscriber_zip_code: Optional[str] = Field(
        None, description='', title='Subscriber zip code'
    )


class TertiaryInsurance(BaseModel):
    insurance_claim_office_number: Optional[str] = Field(
        None,
        description='Insurance office phone number',
        title='Insurance claim office number',
    )
    insurance_company: Optional[str] = Field(
        None, description='', title='Insurance company'
    )
    insurance_group_name: Optional[str] = Field(
        None, description='', title='Insurance group name'
    )
    insurance_group_number: Optional[str] = Field(
        None, description='', title='Insurance group number'
    )
    insurance_id_number: Optional[str] = Field(
        None, description='', title='Insurance id number'
    )
    insurance_payer_id: Optional[str] = Field(
        None, description='', title='Insurance payer id'
    )
    insurance_plan_name: Optional[str] = Field(
        None, description='Name of insurance plan.', title='Insurance plan name'
    )
    insurance_plan_type: Optional[InsurancePlanType] = Field(
        None, description='', title='Insurance plan type'
    )
    is_subscriber_the_patient: Optional[bool] = Field(
        None,
        description="True if the insurance policy is under patient's own name. Defaults to true",
        title='Is subscriber the patient',
    )
    patient_relationship_to_subscriber: Optional[PatientRelationshipToSubscriber] = (
        Field(
            None,
            description='HCFA/1500 individual relationship code',
            title='Patient relationship to subscriber',
        )
    )
    photo_back: Optional[str] = Field(
        None, description='Photo of back of insurance card', title='Photo back'
    )
    photo_front: Optional[str] = Field(
        None, description='Photo of front of insurance card', title='Photo front'
    )
    subscriber_address: Optional[str] = Field(
        None, description='', title='Subscriber address'
    )
    subscriber_city: Optional[str] = Field(
        None, description='', title='Subscriber city'
    )
    subscriber_country: Optional[SubscriberCountry] = Field(
        None, description='Two-letter country code', title='Subscriber country'
    )
    subscriber_date_of_birth: Optional[str] = Field(
        None, description='', title='Subscriber date of birth'
    )
    subscriber_first_name: Optional[str] = Field(
        None, description='', title='Subscriber first name'
    )
    subscriber_gender: Optional[SubscriberGender] = Field(
        None, description='One of `"Male"` or `"Female"`', title='Subscriber gender'
    )
    subscriber_last_name: Optional[str] = Field(
        None, description='', title='Subscriber last name'
    )
    subscriber_middle_name: Optional[str] = Field(
        None, description='', title='Subscriber middle name'
    )
    subscriber_social_security: Optional[str] = Field(
        None, description='', title='Subscriber social security'
    )
    subscriber_state: Optional[SubscriberState] = Field(
        None, description='Two-letter state code', title='Subscriber state'
    )
    subscriber_suffix: Optional[str] = Field(
        None, description='E.g. `"II"` or `"III"`', title='Subscriber suffix'
    )
    subscriber_zip_code: Optional[str] = Field(
        None, description='', title='Subscriber zip code'
    )


class WorkersCompPayerState(Enum):
    AL = 'AL'
    AK = 'AK'
    AS = 'AS'
    AZ = 'AZ'
    AR = 'AR'
    AA = 'AA'
    AE = 'AE'
    AP = 'AP'
    CA = 'CA'
    CO = 'CO'
    CT = 'CT'
    DE = 'DE'
    DC = 'DC'
    FL = 'FL'
    GA = 'GA'
    GU = 'GU'
    HI = 'HI'
    ID = 'ID'
    IL = 'IL'
    IN = 'IN'
    IA = 'IA'
    KS = 'KS'
    KY = 'KY'
    LA = 'LA'
    ME = 'ME'
    MD = 'MD'
    MA = 'MA'
    MI = 'MI'
    MN = 'MN'
    MS = 'MS'
    MO = 'MO'
    MT = 'MT'
    NE = 'NE'
    NV = 'NV'
    NH = 'NH'
    NJ = 'NJ'
    NM = 'NM'
    NY = 'NY'
    NC = 'NC'
    ND = 'ND'
    MP = 'MP'
    OH = 'OH'
    OK = 'OK'
    OR = 'OR'
    PA = 'PA'
    PR = 'PR'
    RI = 'RI'
    SC = 'SC'
    SD = 'SD'
    TN = 'TN'
    TX = 'TX'
    UT = 'UT'
    VT = 'VT'
    VI = 'VI'
    VA = 'VA'
    WA = 'WA'
    WV = 'WV'
    WI = 'WI'
    WY = 'WY'


class WorkersCompStateOfOccurrence(Enum):
    AL = 'AL'
    AK = 'AK'
    AS = 'AS'
    AZ = 'AZ'
    AR = 'AR'
    AA = 'AA'
    AE = 'AE'
    AP = 'AP'
    CA = 'CA'
    CO = 'CO'
    CT = 'CT'
    DE = 'DE'
    DC = 'DC'
    FL = 'FL'
    GA = 'GA'
    GU = 'GU'
    HI = 'HI'
    ID = 'ID'
    IL = 'IL'
    IN = 'IN'
    IA = 'IA'
    KS = 'KS'
    KY = 'KY'
    LA = 'LA'
    ME = 'ME'
    MD = 'MD'
    MA = 'MA'
    MI = 'MI'
    MN = 'MN'
    MS = 'MS'
    MO = 'MO'
    MT = 'MT'
    NE = 'NE'
    NV = 'NV'
    NH = 'NH'
    NJ = 'NJ'
    NM = 'NM'
    NY = 'NY'
    NC = 'NC'
    ND = 'ND'
    MP = 'MP'
    OH = 'OH'
    OK = 'OK'
    OR = 'OR'
    PA = 'PA'
    PR = 'PR'
    RI = 'RI'
    SC = 'SC'
    SD = 'SD'
    TN = 'TN'
    TX = 'TX'
    UT = 'UT'
    VT = 'VT'
    VI = 'VI'
    VA = 'VA'
    WA = 'WA'
    WV = 'WV'
    WI = 'WI'
    WY = 'WY'


class WorkersCompInsurance(BaseModel):
    property_and_casualty_agency_claim_number: Optional[str] = Field(
        None, description='', title='Property and casualty agency claim number'
    )
    workers_comp_carrier_code: Optional[str] = Field(
        None, description='', title='Workers comp carrier code'
    )
    workers_comp_case_number: Optional[str] = Field(
        None, description='', title='Workers comp case number'
    )
    workers_comp_company: Optional[str] = Field(
        None, description='', title='Workers comp company'
    )
    workers_comp_date_of_accident: Optional[str] = Field(
        None, description='', title='Workers comp date of accident'
    )
    workers_comp_group_name: Optional[str] = Field(
        None, description='', title='Workers comp group name'
    )
    workers_comp_group_number: Optional[str] = Field(
        None, description='', title='Workers comp group number'
    )
    workers_comp_notes: Optional[str] = Field(
        None, description='', title='Workers comp notes'
    )
    workers_comp_payer_address: Optional[str] = Field(
        None, description='', title='Workers comp payer address'
    )
    workers_comp_payer_city: Optional[str] = Field(
        None, description='', title='Workers comp payer city'
    )
    workers_comp_payer_id: Optional[str] = Field(
        None, description='', title='Workers comp payer id'
    )
    workers_comp_payer_state: Optional[WorkersCompPayerState] = Field(
        None, description='', title='Workers comp payer state'
    )
    workers_comp_payer_zip: Optional[str] = Field(
        None, description='', title='Workers comp payer zip'
    )
    workers_comp_state_of_occurrence: Optional[WorkersCompStateOfOccurrence] = Field(
        None, description='', title='Workers comp state of occurrence'
    )
    workers_comp_wcb: Optional[str] = Field(
        None, description='', title='Workers comp wcb'
    )
    workers_comp_wcb_rating_code: Optional[str] = Field(
        None, description='', title='Workers comp wcb rating code'
    )


class Patient(BaseModel):
    address: Optional[str] = Field(None, description='', title='Address')
    auto_accident_insurance: Optional[AutoAccidentInsurance] = Field(
        None, description='', title='AutoAccidentInsurance'
    )
    cell_phone: Optional[str] = Field(None, description='', title='Cell phone')
    chart_id: Optional[str] = Field(
        None,
        description='Automatically set using first & last name if absent',
        title='Chart id',
    )
    city: Optional[str] = Field(None, description='', title='City')
    copay: Optional[str] = Field(None, description='', title='Copay')
    custom_demographics: Optional[List[CustomDemographic]] = Field(
        None, description='', title='Custom demographics'
    )
    date_of_birth: Optional[str] = Field(None, description='', title='Date of birth')
    date_of_first_appointment: Optional[str] = Field(
        None,
        description='Date of first patient visit.',
        title='Date of first appointment',
    )
    date_of_last_appointment: Optional[str] = Field(
        None,
        description='Date of previous patient visit',
        title='Date of last appointment',
    )
    default_pharmacy: Optional[str] = Field(
        None,
        description="ncpdp id of patient's default pharmacy",
        title='Default pharmacy',
    )
    disable_sms_messages: Optional[bool] = Field(
        None,
        description='If True, suppress SMS/Txt messages to this patient even if we have a cell phone # for them.',
        title='Disable sms messages',
    )
    doctor: int = Field(..., description='', title='Doctor')
    email: Optional[str] = Field(None, description='', title='Email')
    emergency_contact_name: Optional[str] = Field(
        None, description='', title='Emergency contact name'
    )
    emergency_contact_phone: Optional[str] = Field(
        None, description='', title='Emergency contact phone'
    )
    emergency_contact_relation: Optional[str] = Field(
        None, description='', title='Emergency contact relation'
    )
    employer: Optional[str] = Field(None, description='', title='Employer')
    employer_address: Optional[str] = Field(
        None, description='', title='Employer address'
    )
    employer_city: Optional[str] = Field(None, description='', title='Employer city')
    employer_state: Optional[str] = Field(
        None, description='Two-letter abbreviation', title='Employer state'
    )
    employer_zip_code: Optional[str] = Field(
        None, description='', title='Employer zip code'
    )
    ethnicity: Optional[Ethnicity] = Field(
        None,
        description='One of `"blank"`, `"hispanic"`, `"not_hispanic"` or `"declined"`',
        title='Ethnicity',
    )
    first_name: Optional[str] = Field(None, description='', title='First name')
    gender: Gender = Field(
        ..., description='One of `"Male"`, `"Female"`, or `"Other"`', title='Gender'
    )
    home_phone: Optional[str] = Field(None, description='', title='Home phone')
    id: Optional[int] = Field(None, description='', title='ID')
    last_name: Optional[str] = Field(None, description='', title='Last name')
    middle_name: Optional[str] = Field(None, description='', title='Middle name')
    nick_name: Optional[str] = Field(
        None,
        description='Common name for patient, should be used instead of first name if supplied.',
        title='Nick name',
    )
    office_phone: Optional[str] = Field(None, description='', title='Office phone')
    offices: Optional[List[int]] = Field(
        None,
        description='IDs of every office this patient has been to',
        title='Offices',
    )
    patient_flags: Optional[List[PatientFlag]] = Field(
        None,
        description='Possible patient flag type that can be attached to the patient',
        title='Patient flags',
    )
    patient_flags_attached: Optional[List[PatientFlagsAttachedItem]] = Field(
        None,
        description='Patient flags attached to the patient',
        title='Patient flags attached',
    )
    patient_payment_profile: Optional[PatientPaymentProfile] = Field(
        None,
        description='One of `""`, `"Cash"`, `"Insurance"`, `"Insurance Out of Network"`, `"Auto Accident"` or `"Worker\'s Comp"`.<br>**Note:** Patient must already have either `primary_insurance` or `secondary_insurance` or new `primary_insurance` or `secondary_insurance` is passed in request if `Insurance`, `Auto Accident` or `Worker\'s Comp` payment profiles are chosen.',
        title='Patient payment profile',
    )
    patient_photo: Optional[str] = Field(None, description='', title='Patient photo')
    patient_photo_date: Optional[str] = Field(
        None,
        description='Cannot be passed without `patient_photo`',
        title='Patient photo date',
    )
    patient_status: Optional[PatientStatus] = Field(
        None,
        description='One of `"A"` (active), `"I"` (inactive), `"D"` (inactive-deceased)',
        title='Patient status',
    )
    preferred_language: Optional[PreferredLanguage] = Field(
        None, description='Use ISO 639 alpha-3 codes', title='Preferred language'
    )
    primary_care_physician: Optional[str] = Field(
        None,
        description='Referring doctor for this patient',
        title='Primary care physician',
    )
    primary_insurance: Optional[PrimaryInsurance] = Field(
        None,
        description='**Warning:** Changing insurance information may make past appointments unbillable. Insurance data is also **unvalidated**; you should use the [`/api/insurances`](#apiinsurances) endpoint to find the appropriate insurance payer.',
        title='PrimaryInsurance',
    )
    race: Optional[Race] = Field(
        None,
        description='One of `"blank"`, `"indian"`, `"asian"`, `"black"`, `"hawaiian"`, `"white"` or `"declined"`',
        title='Race',
    )
    referring_doctor: Optional[ReferringDoctor] = Field(
        None, description='', title='Patient'
    )
    referring_source: Optional[str] = Field(
        None, description='Referring source.', title='Referring source'
    )
    responsible_party_email: Optional[str] = Field(
        None, description='', title='Responsible party email'
    )
    responsible_party_name: Optional[str] = Field(
        None, description='', title='Responsible party name'
    )
    responsible_party_phone: Optional[str] = Field(
        None, description='', title='Responsible party phone'
    )
    responsible_party_relation: Optional[str] = Field(
        None, description='', title='Responsible party relation'
    )
    secondary_insurance: Optional[SecondaryInsurance] = Field(
        None,
        description='**Warning:** Changing insurance information may make past appointments unbillable. Insurance data is also **unvalidated**; you should use the [`/api/insurances`](#apiinsurances) endpoint to find the appropriate insurance payer.',
        title='SecondaryInsurance',
    )
    social_security_number: Optional[str] = Field(
        None, description='', title='Social security number'
    )
    state: Optional[str] = Field(
        None, description='Two-letter abbreviation', title='State'
    )
    tertiary_insurance: Optional[TertiaryInsurance] = Field(
        None,
        description='**Warning:** Changing insurance information may make past appointments unbillable. Insurance data is also **unvalidated**; you should use the [`/api/insurances`](#apiinsurances) endpoint to find the appropriate insurance payer.',
        title='TertiaryInsurance',
    )
    updated_at: Optional[str] = Field(None, description='', title='Updated at')
    workers_comp_insurance: Optional[WorkersCompInsurance] = Field(
        None, description='', title='WorkerCompInsurance'
    )
    zip_code: Optional[str] = Field(None, description='', title='Zip code')


class SnomedReaction(Enum):
    field_ = ''
    field_14669001 = '14669001'
    field_39579001 = '39579001'
    field_57676002 = '57676002'
    field_43724002 = '43724002'
    field_49727002 = '49727002'
    field_386661006 = '386661006'
    field_25064002 = '25064002'
    field_247472004 = '247472004'
    field_271795006 = '271795006'
    field_68962001 = '68962001'
    field_68235000 = '68235000'
    field_422587007 = '422587007'
    field_95388000 = '95388000'
    field_271807003 = '271807003'
    field_271825005 = '271825005'
    field_64531003 = '64531003'
    field_267036007 = '267036007'
    field_162397003 = '162397003'
    field_65124004 = '65124004'


class Status5(Enum):
    active = 'active'
    inactive = 'inactive'


class PatientAllergy(BaseModel):
    description: Optional[str] = Field(
        None,
        description='Description of the allergy, such as `"Cat hair"`',
        title='Description',
    )
    doctor: int = Field(
        ..., description='Id of the doctor who diagnosed the allergy', title='Doctor'
    )
    id: Optional[int] = Field(None, description='', title='ID')
    notes: Optional[str] = Field(
        None, description='Any additional notes from the provider', title='Notes'
    )
    patient: int = Field(..., description='', title='Patient')
    reaction: Optional[str] = Field(
        None,
        description='Short description of the patient\'s allergic reaction, such as `"Hives"`',
        title='Reaction',
    )
    rxnorm: Optional[str] = Field(
        None,
        description='If the allergy is a drug allergy, this is the RxNorm code of the drug',
        title='Rxnorm',
    )
    snomed_reaction: Optional[SnomedReaction] = Field(
        None,
        description='SNOMED code for the reaction. For possible SnoMED codes, please see [this link from PHIN VADS](https://phinvads.cdc.gov/vads/ViewValueSet.action?id=896AABB4-5ACD-DE11-913D-0015173D1785)',
        title='Snomed reaction',
    )
    status: Optional[Status5] = Field(
        None,
        description='One of `"active"`, `"inactive"`. If absent in `POST`, default to `"active"`',
        title='Status',
    )


class PatientAmendment(BaseModel):
    amendment_file: str = Field(
        ...,
        description="A PDF file containing the amended information for the patient's record",
        title='Amendment file',
    )
    amendment_name: str = Field(..., description='', title='Amendment name')
    appointment: Optional[int] = Field(
        None,
        description='ID of the appointment to which the amendment applies, if any. If present, the `amendment_file` will be appended to the clinical note for this appointment.',
        title='Appointment',
    )
    comments: Optional[str] = Field(None, description='', title='Comments')
    doctor: int = Field(
        ..., description='ID of the doctor who owns the amendment', title='Doctor'
    )
    id: Optional[int] = Field(None, description='', title='ID')
    patient: int = Field(
        ...,
        description='ID of the patient to whom the amendment applies',
        title='Patient',
    )


class PatientCommunication(BaseModel):
    code: Optional[str] = Field(
        None, description='Code from different code system', title='Code'
    )
    code_system: Optional[str] = Field(
        None, description='Can be `SNOMEDCT`, `LOINC`', title='Code system'
    )
    created_at: Optional[str] = Field(None, description='', title='Created at')
    doctor: int = Field(..., description='', title='Doctor')
    effective_time: Optional[str] = Field(None, description='', title='Effective time')
    id: Optional[int] = Field(None, description='', title='ID')
    name: Optional[str] = Field(None, description='', title='Name')
    patient: int = Field(..., description='', title='Patient')
    value_code: Optional[str] = Field(
        None,
        description='Code from different code system represent communication value',
        title='Value code',
    )
    value_code_system: Optional[str] = Field(
        None,
        description='Can be `SNOMEDCT`, `ICD10CM`, `LOINC`',
        title='Value code system',
    )
    value_name: Optional[str] = Field(
        None, description='Description of value', title='Value name'
    )


class OrderStatus(Enum):
    field_ = ''
    Ordered = 'Ordered'
    Administered_during_visit = 'Administered during visit'
    Electronic_eRx_Sent = 'Electronic eRx Sent'
    Phoned_into_Pharmacy = 'Phoned into Pharmacy'
    Faxed_to_Pharmacy = 'Faxed to Pharmacy'
    Paper_Rx = 'Paper Rx'
    Prescription_Printed = 'Prescription Printed'
    Discontinued = 'Discontinued'
    Prescribed_by_other_Dr = 'Prescribed by other Dr'
    Over_the_Counter = 'Over the Counter'


class PatientDrug(BaseModel):
    appointment: Optional[int] = Field(
        None,
        description='Appointment ID corresponding to the initial prescription',
        title='Appointment',
    )
    date_prescribed: Optional[str] = Field(
        None, description='', title='Date prescribed'
    )
    date_started_taking: Optional[str] = Field(
        None, description='', title='Date started taking'
    )
    date_stopped_taking: Optional[str] = Field(
        None, description='', title='Date stopped taking'
    )
    daw: Optional[bool] = Field(
        None,
        description='If true, the prescription should be dispensed as written and not substituted',
        title='Daw',
    )
    dispense_quantity: Optional[float] = Field(
        None, description='', title='Dispense quantity'
    )
    doctor: int = Field(..., description='Prescribing doctor ID', title='Doctor')
    dosage_quantity: Optional[str] = Field(
        None,
        description='Please note, this used to be an decimal field, you can still pass decimal value to it. Or you can pass in some formatted string if needed.',
        title='Dosage quantity',
    )
    dosage_units: Optional[str] = Field(None, description='', title='Dosage units')
    frequency: Optional[str] = Field(
        None, description='Frequency pf administration', title='Frequency'
    )
    id: Optional[int] = Field(None, description='', title='ID')
    indication: Optional[str] = Field(None, description='', title='Indication')
    name: Optional[str] = Field(None, description='', title='Name')
    ndc: Optional[str] = Field(None, description='', title='Ndc')
    notes: Optional[str] = Field(
        None, description='Any additional notes from the provider', title='Notes'
    )
    number_refills: Optional[int] = Field(None, description='', title='Number refills')
    order_status: Optional[OrderStatus] = Field(
        None,
        description='One of `""`, `"Ordered"`, `"Administered during visit"`, `"Electronic eRx Sent"`, `"Phoned into Pharmacy"`, `"Faxed to Pharmacy"`, `"Paper Rx"`, `"Prescription Printed"`, `"Discontinued"`, `"Prescribed by other Dr"` or `"Over the Counter"`. If omitted in writing, default to `""`',
        title='Order status',
    )
    patient: int = Field(..., description='', title='Patient')
    pharmacy_note: Optional[str] = Field(None, description='', title='Pharmacy note')
    prn: Optional[bool] = Field(
        None,
        description='If `True`, the medication should be taken when necessary',
        title='Prn',
    )
    route: Optional[str] = Field(
        None, description='Route of administration', title='Route'
    )
    rxnorm: Optional[str] = Field(
        None, description='RxNorm code for the medication', title='Rxnorm'
    )
    signature_note: Optional[str] = Field(None, description='', title='Signature note')
    status: Optional[Status5] = Field(
        None,
        description='If present, one of `"active"` or `"inactive"`. If omitted in writing, default to `"active"`',
        title='Status',
    )


class PatientFlagType(BaseModel):
    archived: Optional[bool] = Field(
        None,
        description='Indicates the flag type is soft-deleted and should not be used',
        title='Archived',
    )
    color: Optional[str] = Field(None, description='', title='Color')
    created_at: Optional[str] = Field(None, description='', title='Created at')
    doctor: int = Field(
        ..., description='Doctor who owns the flag type', title='Doctor'
    )
    id: Optional[int] = Field(None, description='', title='ID')
    name: str = Field(..., description='Name of the patient flag type', title='Name')
    priority: Optional[int] = Field(
        None, description='Priority of the flag type', title='Priority'
    )
    updated_at: Optional[str] = Field(None, description='', title='Updated at')


class PatientIntervention(BaseModel):
    code: Optional[str] = Field(
        None, description='Code from different code system', title='Code'
    )
    code_system: Optional[str] = Field(
        None,
        description='Can be `SNOMEDCT`, `HCPCS`, `CPT`, `ICD10CM`',
        title='Code system',
    )
    created_at: Optional[str] = Field(None, description='', title='Created at')
    doctor: int = Field(..., description='', title='Doctor')
    effective_time: Optional[str] = Field(None, description='', title='Effective time')
    id: Optional[int] = Field(None, description='', title='ID')
    name: Optional[str] = Field(
        None, description='Description of intervention', title='Name'
    )
    patient: int = Field(..., description='', title='Patient')
    value_code: Optional[str] = Field(
        None,
        description='Code from different code system represent intervention value',
        title='Value code',
    )
    value_code_system: Optional[str] = Field(
        None,
        description='Can be `SNOMEDCT`, `ICD10CM`, `LOINC`',
        title='Value code system',
    )
    value_name: Optional[str] = Field(
        None, description='Description of value', title='Value name'
    )


class LabAbnormalFlag(Enum):
    field_ = ''
    L = 'L'
    H = 'H'
    LL = 'LL'
    HH = 'HH'
    field__1 = '<'
    field__2 = '>'
    N = 'N'
    A = 'A'
    AA = 'AA'
    null = 'null'
    U = 'U'
    D = 'D'
    B = 'B'
    W = 'W'
    S = 'S'
    R = 'R'
    I = 'I'
    MS = 'MS'
    VS = 'VS'


class LabOrderStatus(Enum):
    field_ = ''
    Order_Entered = 'Order Entered'
    Discontinued = 'Discontinued'
    In_Progress = 'In Progress'
    Results_Received = 'Results Received'
    Results_Reviewed_with_Patient = 'Results Reviewed with Patient'
    Paper_Order = 'Paper Order'


class PatientLabResultSet(BaseModel):
    created_at: Optional[str] = Field(None, description='', title='Created at')
    date_test_performed: Optional[str] = Field(
        None, description='Date of lab test.', title='Date test performed'
    )
    doctor_comments: Optional[str] = Field(
        None, description='Comment from the doctor on lab result.', title='Comments'
    )
    doctor_signoff: Optional[bool] = Field(
        None,
        description='Check this box when the doctor has reviewed the lab result and taken appropriate action.',
        title='Doctor signoff',
    )
    id: Optional[int] = Field(None, description='', title='ID')
    lab_abnormal_flag: Optional[LabAbnormalFlag] = Field(
        None,
        description='HL7 codified abnormal flag for the result.',
        title='Abnormal flag',
    )
    lab_imported_from_ccr: Optional[str] = Field(
        None,
        description='Imported CCR document that contains lab results.',
        title='Lab imported from ccr',
    )
    lab_normal_range: Optional[str] = Field(None, description='', title='Normal range')
    lab_normal_range_units: Optional[str] = Field(
        None, description='', title='Normal range units'
    )
    lab_order_status: Optional[LabOrderStatus] = Field(
        None, description='Status of the lab order.', title='Status'
    )
    lab_result_value: Optional[str] = Field(None, description='', title='Result value')
    lab_result_value_as_float: Optional[float] = Field(
        None, description='', title='Lab result value as float'
    )
    lab_result_value_units: Optional[str] = Field(
        None, description='', title='Result units'
    )
    loinc_code: Optional[str] = Field(None, description='', title='LOINC code')
    ordering_doctor: int = Field(..., description='', title='Ordering doctor')
    patient: int = Field(..., description='', title='Patient')
    scanned_in_result: Optional[str] = Field(
        None,
        description='Scanned in PDF for this lab result (optional).',
        title='Scanned in result',
    )
    title: Optional[str] = Field(None, description='', title='Title')
    updated_at: Optional[str] = Field(None, description='', title='Updated at')


class Attachment(BaseModel):
    attachment: Optional[str] = Field(None, description='', title='Attachment')
    created_at: Optional[str] = Field(None, description='', title='Created at')
    doctor: Optional[int] = Field(None, description='', title='Doctor')
    updated_at: Optional[str] = Field(None, description='', title='Updated at')


class PatientMessage(BaseModel):
    attachments: Optional[List[Attachment]] = Field(
        None, description='', title='Attachments'
    )
    body: Optional[str] = Field(None, description='', title='Body')
    created_at: Optional[str] = Field(None, description='', title='Created at')
    doctor: int = Field(..., description='', title='Doctor')
    id: Optional[int] = Field(None, description='', title='ID')
    message: Optional[str] = Field(None, description='', title='Message')
    patient: int = Field(..., description='', title='Patient')
    subject: str = Field(..., description='', title='Subject')
    updated_at: Optional[str] = Field(None, description='', title='Updated at')


class PatientPhysicalExam(BaseModel):
    code: Optional[str] = Field(
        None, description='Code from different code system', title='Code'
    )
    code_system: Optional[str] = Field(
        None, description='Can be `SNOMEDCT`, `LOINC`', title='Code system'
    )
    created_at: Optional[str] = Field(None, description='', title='Created at')
    doctor: int = Field(..., description='', title='Doctor')
    effective_time: Optional[str] = Field(None, description='', title='Effective time')
    id: Optional[int] = Field(None, description='', title='ID')
    name: Optional[str] = Field(
        None, description='Description of physical exam', title='Name'
    )
    patient: int = Field(..., description='', title='Patient')
    value_code: Optional[str] = Field(
        None,
        description='Code from different code system represent physical exam value',
        title='Value code',
    )
    value_code_system: Optional[str] = Field(
        None,
        description='Can be `SNOMEDCT`, `ICD10CM`, `LOINC`',
        title='Value code system',
    )
    value_name: Optional[str] = Field(
        None, description='Description of value', title='Value name'
    )


class IcdVersion(Enum):
    field_9 = '9'
    field_10 = '10'


class Status7(Enum):
    active = 'active'
    inactive = 'inactive'
    resolved = 'resolved'


class PatientProblem(BaseModel):
    date_changed: Optional[str] = Field(None, description='', title='Date changed')
    date_diagnosis: Optional[str] = Field(None, description='', title='Date diagnosis')
    date_onset: Optional[str] = Field(None, description='', title='Date onset')
    description: Optional[str] = Field(None, description='', title='Description')
    doctor: int = Field(..., description='', title='Doctor')
    icd_code: Optional[str] = Field(
        None, description='ICD9 or ICD10 code for the problem', title='Icd code'
    )
    icd_version: Optional[IcdVersion] = Field(
        None,
        description='Either `9` or `10`. If omitted in writing, default to 10.',
        title='Icd version',
    )
    id: Optional[int] = Field(None, description='', title='ID')
    info_url: Optional[str] = Field(
        None,
        description='External URL with more information about the problem, intended for patient education',
        title='Info url',
    )
    name: Optional[str] = Field(None, description='Name of the problem', title='Name')
    notes: Optional[str] = Field(
        None, description='Any additional notes by the provider', title='Notes'
    )
    patient: int = Field(..., description='', title='Patient')
    snomed_ct_code: Optional[str] = Field(
        None, description='SnoMED code for the problem', title='SnoMED CT code'
    )
    status: Optional[Status7] = Field(
        None,
        description='Either `active`, `inactive` or `resolved`. If omitted in writing, default to `active`',
        title='Status',
    )


class PatientRiskAssessment(BaseModel):
    code: Optional[str] = Field(None, description='', title='Code')
    code_system: Optional[str] = Field(None, description='', title='Code system')
    created_at: Optional[str] = Field(None, description='', title='Created at')
    doctor: int = Field(..., description='', title='Doctor')
    effective_time: Optional[str] = Field(None, description='', title='Effective time')
    id: Optional[int] = Field(None, description='', title='ID')
    name: Optional[str] = Field(None, description='', title='Name')
    patient: int = Field(..., description='', title='Patient')
    value_code: Optional[str] = Field(None, description='', title='Value code')
    value_code_system: Optional[str] = Field(
        None, description='', title='Value code system'
    )
    value_name: Optional[str] = Field(None, description='', title='Value name')


class CompletionStatus(Enum):
    CP = 'CP'
    RE = 'RE'
    NA = 'NA'
    PA = 'PA'


class Dose(BaseModel):
    id: Optional[int] = Field(None, description='', title='ID')
    max_age_months: Optional[int] = Field(None, description='', title='Max age months')
    min_age_months: Optional[int] = Field(None, description='', title='Min age months')
    title: Optional[str] = Field(None, description='', title='Title')


class FundingEligibility(Enum):
    V01 = 'V01'
    V02 = 'V02'
    V03 = 'V03'
    V04 = 'V04'
    V05 = 'V05'
    V07 = 'V07'


class ObservedImmunity(Enum):
    field_398102009 = '398102009'
    field_409498004 = '409498004'
    field_397428000 = '397428000'
    field_18624000 = '18624000'
    field_91428005 = '91428005'
    field_271511000 = '271511000'
    field_240532009 = '240532009'
    field_6142004 = '6142004'
    field_52947006 = '52947006'
    field_14189004 = '14189004'
    field_23511006 = '23511006'
    field_36989005 = '36989005'
    field_27836007 = '27836007'
    field_16814004 = '16814004'
    field_14168008 = '14168008'
    field_36653000 = '36653000'
    field_76902006 = '76902006'
    field_66071002 = '66071002'
    field_4834000 = '4834000'
    field_111852003 = '111852003'
    field_38907003 = '38907003'
    field_40468003 = '40468003'
    field_16541001 = '16541001'


class RecordSource(Enum):
    field_00 = '00'
    field_01 = '01'
    field_02 = '02'
    field_03 = '03'
    field_04 = '04'
    field_05 = '05'
    field_06 = '06'
    field_07 = '07'
    field_08 = '08'


class PatientVaccineRecord(BaseModel):
    administered_at: Optional[int] = Field(
        None,
        description='ID of `/api/offices` where the administration happened',
        title='Administered at',
    )
    administered_by: Optional[str] = Field(
        None,
        description='ID of `/api/users` who performs the administration',
        title='Administered by',
    )
    administration_start: Optional[str] = Field(
        None,
        description='Datetime when the administration starts',
        title='Administration start',
    )
    amount: Optional[float] = Field(
        None, description='Amount of vaccine administered', title='Amount'
    )
    comments: Optional[str] = Field(None, description='', title='Comments')
    completion_status: Optional[CompletionStatus] = Field(
        None,
        description='Vaccination status, can be `CP`(Complete), `RE`(Refused), `NA`(Not administered), `PA`(Partially administered)',
        title='Vaccination Status',
    )
    consent_form: Optional[int] = Field(
        None,
        description='Consent form related with vaccine record',
        title='Consent form',
    )
    cpt_code: Optional[str] = Field(
        None, description='Vaccine cpt code', title='Cpt code'
    )
    created_at: Optional[str] = Field(None, description='', title='Created at')
    cvx_code: str = Field(..., description='Vaccine cvx code', title='Cvx code')
    doses: Optional[List[Dose]] = Field(
        None,
        description='Vaccine dose IDs received in consent form signed hook',
        title='Doses',
    )
    entered_by: Optional[str] = Field(
        None, description='ID of user who created the record', title='Entered by'
    )
    funding_eligibility: Optional[FundingEligibility] = Field(
        None,
        description='The funding program that should pay for a given immunization',
        title='Funding Eligibility',
    )
    id: Optional[int] = Field(None, description='', title='ID')
    name: str = Field(..., description='', title='Name')
    next_dose_date: Optional[str] = Field(
        None, description='Date for next dose of vaccine', title='Date for next dose'
    )
    observed_immunity: Optional[ObservedImmunity] = Field(
        None, description='', title='Observed Immunity'
    )
    ordering_doctor: Optional[int] = Field(
        None, description='', title='Ordering doctor'
    )
    patient: int = Field(..., description='', title='Patient')
    record_source: Optional[RecordSource] = Field(
        None, description='', title='Record Type'
    )
    route: Optional[str] = Field(None, description='', title='Route')
    site: Optional[str] = Field(None, description='', title='Site')
    units: Optional[str] = Field(None, description='', title='Units')
    updated_at: Optional[str] = Field(None, description='', title='Updated at')
    vaccine_inventory: Optional[int] = Field(
        None,
        description='ID of `/api/vaccine_inventories` the vaccine is from',
        title='Vaccine inventory',
    )
    vis: Optional[str] = Field(
        None, description='Related vaccine information statement', title='Vis'
    )


class PhoneCallLog(BaseModel):
    appointment: Optional[int] = Field(
        None,
        description='Appointment related with the phone call log',
        title='Appointment',
    )
    archived: Optional[bool] = Field(
        None, description='If this phone call log is archived or not', title='Archived'
    )
    author: Optional[str] = Field(None, description='Author of post.', title='Author')
    cash_charged: Optional[float] = Field(
        None, description='Amount of cash needs to be charged', title='Cash charged'
    )
    created_at: Optional[str] = Field(None, description='', title='Created at')
    doctor: int = Field(..., description='', title='Doctor')
    duration: Optional[int] = Field(
        None, description='Duration of the phone call', title='Duration'
    )
    id: Optional[int] = Field(None, description='', title='ID')
    message: Optional[str] = Field(
        None, description='Additional message for the phone call', title='Message'
    )
    patient: int = Field(..., description='', title='Patient')
    scheduled_time: Optional[str] = Field(
        None,
        description='Date of phone call, if `appointment` is set, this field will be set as the `scheduled_time` of that appointment',
        title='Scheduled time',
    )
    title: Optional[str] = Field(None, description='Title of this log', title='Title')
    type: Optional[str] = Field(
        None, description='Type of phone call log', title='Type'
    )
    updated_at: Optional[str] = Field(None, description='', title='Updated at')


class MessageDirection(Enum):
    I = 'I'
    O = 'O'


class PrescriptionMessage(BaseModel):
    created_at: Optional[str] = Field(None, description='', title='Created at')
    doctor: Optional[int] = Field(None, description='', title='Doctor')
    id: Optional[int] = Field(None, description='', title='ID')
    json_data: Optional[str] = Field(
        None,
        description='Data sent along with `NewRx`, `RefillRequest`, and `RefillResponses` messages. The format varies, but most likely it will contain `BenefitsCoordination` section with insurance info and `MedicationPrescribed` with medication info. `Patient`, `Pharmacy`, and `Prescriber` are also usually present.',
        title='Json data',
    )
    message_direction: Optional[MessageDirection] = Field(
        None,
        description='Possible values are `Outgoing` and `Incoming`.',
        title='Message direction',
    )
    message_status: Optional[str] = Field(
        None,
        description='Message status for Incoming and Outgoing values. Success message for message_type are: `NewRx` : `Sent`, `RefillRequest` : `Received`, `RefillResponse` : `Sent`.',
        title='Message status',
    )
    message_type: Optional[str] = Field(
        None,
        description='Possible values are `NewRx` for outgoing new prescriptions, `RefillRequest` for incoming refill requests, `RefillResponse` for outgoing refill responses, `Error` for incoming errors, `Status` and `Verify` for incoming status reports from Surescripts.',
        title='Message type',
    )
    parent_message: Optional[str] = Field(
        None,
        description='Refers to the parent message, used for refill responses and incoming error/status reports.',
        title='Parent message',
    )
    patient: Optional[int] = Field(
        None,
        description='An optional field which refers to a patient.',
        title='Patient',
    )
    pharmacy: Optional[str] = Field(
        None, description='NCPDPID allocated #ID of the Pharmacy', title='Pharmacy'
    )


class Type3(Enum):
    email = 'email'
    sms = 'sms'
    phone = 'phone'
    auto_call = 'auto_call'


class Unit(Enum):
    minutes = 'minutes'
    hours = 'hours'
    days = 'days'
    weeks = 'weeks'


class Reminder1(BaseModel):
    amount: Optional[int] = Field(None, description='', title='Amount')
    type: Optional[Type3] = Field(
        None, description='One of `"email"`, `"sms"` or `"auto_call"`', title='Type'
    )
    unit: Optional[Unit] = Field(
        None, description='One of `"email"`, `"sms"` or `"auto_call"`', title='Unit'
    )


class ReminderProfile(BaseModel):
    doctor: int = Field(
        ...,
        description='Doctor who created the profile. Other doctors in the practice group may have access to their profiles',
        title='Doctor',
    )
    id: Optional[int] = Field(None, description='', title='ID')
    name: Optional[str] = Field(None, description='', title='Name')
    reminders: List[Reminder1] = Field(
        ..., description='Reminders set in the profile', title='Reminders'
    )


class ScannedClinicalDocument(BaseModel):
    archived: Optional[bool] = Field(
        None,
        description='`DELETE` operation will set this field to `true`',
        title='Archived',
    )
    date: str = Field(..., description='', title='Date')
    description: str = Field(..., description='', title='Description')
    doctor: int = Field(
        ..., description='ID of the doctor who owns the document', title='Doctor'
    )
    document: str = Field(
        ...,
        description="When creating, if you receive response as 201, but this field is `null`, please send a `GET` request with the created object's ID to retrieve the updated file URL",
        title='Document',
    )
    id: Optional[int] = Field(None, description='', title='ID')
    metatags: Optional[str] = Field(
        None,
        description='Array of tags represented as string. This should be quoted--e.g. `\'["a", "b"]\'`--since this endpoint requires `multipart/form-data` encoding',
        title='Metatags',
    )
    patient: int = Field(
        ..., description='ID of the patient the document concerns', title='Patient'
    )
    updated_at: Optional[str] = Field(None, description='', title='Updated at')


class ClinicalNoteField(BaseModel):
    allowed_values: Optional[List[str]] = Field(
        None, description='', title='Allowed Values'
    )
    archived: Optional[bool] = Field(
        None,
        description='Indicates that the field has been soft-deleted by the doctor',
        title='Archived',
    )
    clinical_note_template: Optional[int] = Field(
        None, description='', title='Clinical Note Template'
    )
    data_type: Optional[str] = Field(
        None,
        description='One of `""`, `"Checkbox"`, `"NullCheckbox"`, `"String"`, `"TwoStrings"`, `"FreeDraw"`, `"Photo"`, `"Header"`, `"Subheader"`',
        title='Data Type',
    )
    name: Optional[str] = Field(None, description='', title='Name')
    required: Optional[bool] = Field(
        None,
        description='Indicates that a note should not be locked unless a value is provided for this field',
        title='Required',
    )


class Order(BaseModel):
    on_complete_note: Optional[int] = Field(
        None,
        description='Order of the template on complete notes',
        title='On complete note',
    )
    on_ipad: Optional[int] = Field(
        None, description='Order of the template on iPad', title='On ipad'
    )


class SoapNoteCustomReport(BaseModel):
    archived: Optional[bool] = Field(
        None,
        description='Indicates that the doctor has soft-deleted this template, and will not use it for future appointments',
        title='Archived',
    )
    clinical_note_fields: Optional[List[ClinicalNoteField]] = Field(
        None, description='clinical note fields', title='Clinical Note Fields'
    )
    doctor: Optional[str] = Field(None, description='', title='Doctor')
    id: Optional[int] = Field(None, description='', title='ID')
    is_onpatient: Optional[bool] = Field(None, description='', title='Is onpatient')
    is_persistent: Optional[bool] = Field(
        None,
        description='If this is true, this report will be the same across all notes',
        title='Is persistent',
    )
    name: Optional[str] = Field(None, description='', title='Name')
    order: Optional[Order] = Field(
        None, description='Order of templates', title='SoapNoteCustomReport'
    )
    updated_at: Optional[str] = Field(None, description='', title='Updated at')


class SoapNoteLineItemFieldType(BaseModel):
    allowed_values: Optional[List[str]] = Field(
        None,
        description='Value options the field type relies on if applicable, otherwise it will be an empty array',
        title='Allowed values',
    )
    archived: Optional[bool] = Field(
        None,
        description='Indicates that the field has been soft-deleted by the doctor and will not be used in future notes',
        title='Archived',
    )
    clinical_note_template: Optional[str] = Field(
        None,
        description='ID of the `/api/clinical_note_templates` object that the field belongs to',
        title='Clinical note template',
    )
    comment: Optional[str] = Field(None, description='Comment', title='Comment')
    data_type: Optional[str] = Field(
        None,
        description='One of `""`, `"Checkbox"`, `"NullCheckbox"`, `"String"`, `"TwoStrings"`, `"FreeDraw"`, `"Photo"`, `"Header"`, `"Subheader"`',
        title='Data type',
    )
    id: Optional[int] = Field(None, description='', title='ID')
    name: Optional[str] = Field(None, description='', title='Name')
    required: Optional[bool] = Field(
        None,
        description='Indicates that a note should not be locked unless a value is provided for this field',
        title='Required',
    )


class SoapNoteLineItemFieldValue(BaseModel):
    appointment: int = Field(
        ...,
        description='ID of appointment that the value applies to',
        title='Appointment',
    )
    clinical_note_field: int = Field(
        ...,
        description='ID of `/api/clinical_note_field_types` object that indicates type of the value',
        title='Clinical note field',
    )
    created_at: Optional[str] = Field(None, description='', title='Created at')
    id: Optional[int] = Field(None, description='', title='ID')
    updated_at: Optional[str] = Field(None, description='', title='Updated at')
    value: str = Field(
        ...,
        description='Value of the field. Interpretation varies by field type.\n`clinical_note_field.data_type` | Value | Description\n------------------------------- | ----- | -----------\n`"Header"` | string | \n`"SubHeader"` | string |\n`"String"` | string | If field is single/multiple select field, make sure value presents in allowed values set.\n`"TwoStrings"` | string | String is seperated by `"/"`\n`"NullCheckbox"` | string | Can be `"0"`, `"1"`, `"2"`, `"0"`-`Not selected`, `"1"`-`No`, `"2"`-`Yes`\n`"Checkbox"` | string | Can be `"True"`, `"False"`\n',
        title='Value',
    )


class Type4(Enum):
    Patient = 'Patient'
    Appointment = 'Appointment'
    Lab_order = 'Lab order'
    Document = 'Document'
    Message = 'Message'
    Lab_document = 'Lab document'
    Lab_result = 'Lab result'
    Communication = 'Communication'


class AssociatedItem(BaseModel):
    task: Optional[int] = Field(None, description='', title='Task')
    type: Optional[Type4] = Field(
        None,
        description='Can be one of `"Appointment"`, `"Patient"`, `"Message"`, `"Document"`, `"Lab order"`',
        title='Type',
    )
    value: Optional[int] = Field(
        None, description='ID of the specified type object', title='Value'
    )


class DueDate(BaseModel):
    time: Optional[str] = Field(None, description='Due date time', title='Time')


class Note(BaseModel):
    archived: Optional[bool] = Field(None, description='', title='Archived')
    created_at: Optional[str] = Field(None, description='', title='Created at')
    created_by: Optional[str] = Field(None, description='', title='Created by')
    id: Optional[int] = Field(None, description='', title='ID')
    task: Optional[int] = Field(None, description='ID of `/api/tasks`', title='Task')
    text: Optional[str] = Field(None, description='', title='Text')
    updated_at: Optional[str] = Field(None, description='', title='Updated at')


class Priority1(Enum):
    field_10 = '10'
    field_20 = '20'
    field_30 = '30'
    field_40 = '40'


class Task(BaseModel):
    archived: Optional[bool] = Field(None, description='', title='Archived')
    assigned_by: Optional[str] = Field(
        None,
        description='ID of `/api/users/` who assigned the task',
        title='Assigned by',
    )
    assignee_group: Optional[int] = Field(
        None,
        description='Either `assignee_user` or `assignee_group` should be set',
        title='Assignee group',
    )
    assignee_user: Optional[str] = Field(
        None,
        description='Either `assignee_user` or `assignee_group` should be set',
        title='Assignee user',
    )
    associated_items: Optional[List[AssociatedItem]] = Field(
        None, description='Associated task items', title='Associated items'
    )
    category: Optional[int] = Field(None, description='', title='Category')
    created_at: Optional[str] = Field(None, description='', title='Created at')
    created_by: Optional[str] = Field(
        None, description='ID of `/api/users` who created the task', title='Created by'
    )
    due_date: Optional[DueDate] = Field(
        None, description='When the task is due', title='TaskReminder'
    )
    id: Optional[int] = Field(None, description='', title='ID')
    notes: Optional[List[Note]] = Field(
        None, description='Additional notes of the task', title='Notes'
    )
    priority: Optional[Priority1] = Field(
        None,
        description='Can be one of the following 10(Low), 20(Medium), 30(High), 40(Urgent)',
        title='Priority',
    )
    status: int = Field(..., description='', title='Status')
    title: str = Field(..., description='', title='Title')
    updated_at: Optional[str] = Field(None, description='', title='Updated at')


class TaskCategory(BaseModel):
    archived: Optional[bool] = Field(None, description='', title='Archived')
    created_at: Optional[str] = Field(None, description='', title='Created at')
    id: Optional[int] = Field(None, description='', title='ID')
    is_global: Optional[str] = Field(
        None,
        description='Indicates that the category is a system wide (pre-defined) category',
        title='Is global',
    )
    name: str = Field(..., description='', title='Name')
    practice_group: int = Field(..., description='', title='Practice group')
    updated_at: Optional[str] = Field(None, description='', title='Updated at')


class TaskNote(BaseModel):
    archived: Optional[bool] = Field(
        None, description='If the task note is archived or not', title='Archived'
    )
    created_at: Optional[str] = Field(None, description='', title='Created at')
    created_by: Optional[str] = Field(
        None,
        description='ID of the `/api/users` who created the note',
        title='Created by',
    )
    id: Optional[int] = Field(None, description='', title='ID')
    task: int = Field(
        ..., description='ID of task this note is related with', title='Task'
    )
    text: str = Field(..., description='Content of the task note', title='Text')
    updated_at: Optional[str] = Field(None, description='', title='Updated at')


class StatusCategory(Enum):
    O = 'O'
    P = 'P'
    H = 'H'
    C = 'C'


class TaskStatus(BaseModel):
    archived: Optional[bool] = Field(None, description='', title='Archived')
    created_at: Optional[str] = Field(None, description='', title='Created at')
    id: Optional[int] = Field(None, description='', title='ID')
    name: str = Field(..., description='', title='Name')
    practice_group: int = Field(..., description='', title='Practice group')
    status_category: Optional[StatusCategory] = Field(
        None,
        description='Can be one of the following `O`(open), `P`(In progress), `H`(On hold), `C`(Complete), default to `O`(Open)',
        title='Status category',
    )
    task_category: Optional[int] = Field(
        None, description='ID of `/api/task_categories`', title='Task category'
    )
    updated_at: Optional[str] = Field(None, description='', title='Updated at')


class DefaultPriority(Enum):
    field_10 = '10'
    field_20 = '20'
    field_30 = '30'
    field_40 = '40'


class TaskTemplate(BaseModel):
    archived: Optional[bool] = Field(None, description='', title='Archived')
    created_at: Optional[str] = Field(None, description='', title='Created at')
    default_assignee_group: Optional[int] = Field(
        None, description='', title='Default assignee group'
    )
    default_assignee_user: Optional[str] = Field(
        None, description='', title='Default assignee user'
    )
    default_category: Optional[int] = Field(
        None, description='', title='Default category'
    )
    default_due_date_offset: Optional[str] = Field(
        None,
        description='Offset due date, format should follow `"[DD] [HH:[MM:]]ss[.uuuuuu]"`',
        title='Default due date offset',
    )
    default_note: Optional[str] = Field(None, description='', title='Default note')
    default_priority: Optional[DefaultPriority] = Field(
        None,
        description='Can be one of the following 10(Low), 20(Medium), 30(High), 40(Urgent)',
        title='Default priority',
    )
    default_status: Optional[int] = Field(None, description='', title='Default status')
    default_title: Optional[str] = Field(None, description='', title='Default title')
    id: Optional[int] = Field(None, description='', title='ID')
    name: str = Field(..., description='', title='Name')
    practice_group: Optional[str] = Field(None, description='', title='Practice group')
    updated_at: Optional[str] = Field(None, description='', title='Updated at')


class UserProfile(BaseModel):
    doctor: Optional[str] = Field(
        None,
        description="For staff members, this is their primary physician's ID. For doctors, it is their own ID.",
        title='Doctor',
    )
    id: Optional[str] = Field(None, description='', title='Id')
    is_doctor: Optional[str] = Field(
        None, description='Mutually exclusive with `is_staff`', title='Is doctor'
    )
    is_staff: Optional[str] = Field(
        None, description='Mutually exclusive with `is_doctor`', title='Is staff'
    )
    permissions: Optional[str] = Field(
        None, description='Permissions the user has.', title='Permissions'
    )
    practice_group: Optional[str] = Field(
        None,
        description='The ID of the practice group this user belongs to. This can be used to identify users in the same practice.',
        title='Practice group',
    )
    username: Optional[str] = Field(None, description='', title='Username')


class UserProfilesGroup(BaseModel):
    archived: Optional[bool] = Field(
        None, description='Group is archived or not', title='Archived'
    )
    created_at: Optional[str] = Field(None, description='', title='Created at')
    id: Optional[int] = Field(None, description='', title='ID')
    members: Optional[List[str]] = Field(
        None, description='Users in this user group.', title='Members'
    )
    name: Optional[str] = Field(None, description='', title='Name')
    practice_group: Optional[str] = Field(
        None,
        description='Practice group this user group belongs to',
        title='Practice group',
    )
    updated_at: Optional[str] = Field(None, description='', title='Updated at')


class ApiAllergiesGetResponse(BaseModel):
    data: Optional[List[PatientAllergy]] = Field(
        None, description='result data', title='data'
    )
    next: Optional[str] = Field(None, description='Next Paginated page', title='next')
    previous: Optional[str] = Field(
        None, description='Previous paginated page', title='previous'
    )


class ApiAmendmentsGetResponse(BaseModel):
    data: Optional[List[PatientAmendment]] = Field(
        None, description='result data', title='data'
    )
    next: Optional[str] = Field(None, description='Next Paginated page', title='next')
    previous: Optional[str] = Field(
        None, description='Previous paginated page', title='previous'
    )


class ApiAppointmentProfilesGetResponse(BaseModel):
    data: Optional[List[AppointmentProfile]] = Field(
        None, description='result data', title='data'
    )
    next: Optional[str] = Field(None, description='Next Paginated page', title='next')
    previous: Optional[str] = Field(
        None, description='Previous paginated page', title='previous'
    )


class ApiAppointmentTemplatesGetResponse(BaseModel):
    data: Optional[List[AppointmentTemplate]] = Field(
        None, description='result data', title='data'
    )
    next: Optional[str] = Field(None, description='Next Paginated page', title='next')
    previous: Optional[str] = Field(
        None, description='Previous paginated page', title='previous'
    )


class ApiAppointmentsGetResponse(BaseModel):
    data: Optional[List[Appointment]] = Field(
        None, description='result data', title='data'
    )
    next: Optional[str] = Field(None, description='Next Paginated page', title='next')
    previous: Optional[str] = Field(
        None, description='Previous paginated page', title='previous'
    )


class ApiBillingProfilesGetResponse(BaseModel):
    data: Optional[List[BillingProfile]] = Field(
        None, description='result data', title='data'
    )
    next: Optional[str] = Field(None, description='Next Paginated page', title='next')
    previous: Optional[str] = Field(
        None, description='Previous paginated page', title='previous'
    )


class ApiCarePlansGetResponse(BaseModel):
    data: Optional[List[CarePlan]] = Field(
        None, description='result data', title='data'
    )
    next: Optional[str] = Field(None, description='Next Paginated page', title='next')
    previous: Optional[str] = Field(
        None, description='Previous paginated page', title='previous'
    )


class ApiCareTeamMembersGetResponse(BaseModel):
    data: Optional[List[CareTeamMember]] = Field(
        None, description='result data', title='data'
    )
    next: Optional[str] = Field(None, description='Next Paginated page', title='next')
    previous: Optional[str] = Field(
        None, description='Previous paginated page', title='previous'
    )


class ApiClaimBillingNotesGetResponse(BaseModel):
    data: Optional[List[ClaimBillingNotes]] = Field(
        None, description='result data', title='data'
    )
    next: Optional[str] = Field(None, description='Next Paginated page', title='next')
    previous: Optional[str] = Field(
        None, description='Previous paginated page', title='previous'
    )


class ApiClinicalNoteFieldTypesGetResponse(BaseModel):
    data: Optional[List[SoapNoteLineItemFieldType]] = Field(
        None, description='result data', title='data'
    )
    next: Optional[str] = Field(None, description='Next Paginated page', title='next')
    previous: Optional[str] = Field(
        None, description='Previous paginated page', title='previous'
    )


class ApiClinicalNoteFieldValuesGetResponse(BaseModel):
    data: Optional[List[SoapNoteLineItemFieldValue]] = Field(
        None, description='result data', title='data'
    )
    next: Optional[str] = Field(None, description='Next Paginated page', title='next')
    previous: Optional[str] = Field(
        None, description='Previous paginated page', title='previous'
    )


class ApiClinicalNoteTemplatesGetResponse(BaseModel):
    data: Optional[List[SoapNoteCustomReport]] = Field(
        None, description='result data', title='data'
    )
    next: Optional[str] = Field(None, description='Next Paginated page', title='next')
    previous: Optional[str] = Field(
        None, description='Previous paginated page', title='previous'
    )


class ApiClinicalNotesGetResponse(BaseModel):
    data: Optional[List[ClinicalNote1]] = Field(
        None, description='result data', title='data'
    )
    next: Optional[str] = Field(None, description='Next Paginated page', title='next')
    previous: Optional[str] = Field(
        None, description='Previous paginated page', title='previous'
    )


class ApiCommLogsGetResponse(BaseModel):
    data: Optional[List[PhoneCallLog]] = Field(
        None, description='result data', title='data'
    )
    next: Optional[str] = Field(None, description='Next Paginated page', title='next')
    previous: Optional[str] = Field(
        None, description='Previous paginated page', title='previous'
    )


class ApiConsentFormsGetResponse(BaseModel):
    data: Optional[List[ConsentForm]] = Field(
        None, description='result data', title='data'
    )
    next: Optional[str] = Field(None, description='Next Paginated page', title='next')
    previous: Optional[str] = Field(
        None, description='Previous paginated page', title='previous'
    )


class ApiCustomAppointmentFieldsGetResponse(BaseModel):
    data: Optional[List[CustomAppointmentFieldType]] = Field(
        None, description='result data', title='data'
    )
    next: Optional[str] = Field(None, description='Next Paginated page', title='next')
    previous: Optional[str] = Field(
        None, description='Previous paginated page', title='previous'
    )


class ApiCustomDemographicsGetResponse(BaseModel):
    data: Optional[List[CustomPatientFieldType]] = Field(
        None, description='result data', title='data'
    )
    next: Optional[str] = Field(None, description='Next Paginated page', title='next')
    previous: Optional[str] = Field(
        None, description='Previous paginated page', title='previous'
    )


class ApiCustomInsurancePlanNamesGetResponse(BaseModel):
    data: Optional[List[CustomInsurancePlanName]] = Field(
        None, description='result data', title='data'
    )
    next: Optional[str] = Field(None, description='Next Paginated page', title='next')
    previous: Optional[str] = Field(
        None, description='Previous paginated page', title='previous'
    )


class ApiCustomVitalsGetResponse(BaseModel):
    data: Optional[List[CustomVitalType]] = Field(
        None, description='result data', title='data'
    )
    next: Optional[str] = Field(None, description='Next Paginated page', title='next')
    previous: Optional[str] = Field(
        None, description='Previous paginated page', title='previous'
    )


class ApiDoctorsGetResponse(BaseModel):
    data: Optional[List[Doctor]] = Field(None, description='result data', title='data')
    next: Optional[str] = Field(None, description='Next Paginated page', title='next')
    previous: Optional[str] = Field(
        None, description='Previous paginated page', title='previous'
    )


class ApiDocumentsGetResponse(BaseModel):
    data: Optional[List[ScannedClinicalDocument]] = Field(
        None, description='result data', title='data'
    )
    next: Optional[str] = Field(None, description='Next Paginated page', title='next')
    previous: Optional[str] = Field(
        None, description='Previous paginated page', title='previous'
    )


class ApiEligibilityChecksGetResponse(BaseModel):
    data: Optional[List[Coverage]] = Field(
        None, description='result data', title='data'
    )
    next: Optional[str] = Field(None, description='Next Paginated page', title='next')
    previous: Optional[str] = Field(
        None, description='Previous paginated page', title='previous'
    )


class ApiEobsGetResponse(BaseModel):
    data: Optional[List[EOBObject]] = Field(
        None, description='result data', title='data'
    )
    next: Optional[str] = Field(None, description='Next Paginated page', title='next')
    previous: Optional[str] = Field(
        None, description='Previous paginated page', title='previous'
    )


class ApiFeeSchedulesGetResponse(BaseModel):
    data: Optional[List[DoctorFeeSchedule]] = Field(
        None, description='result data', title='data'
    )
    next: Optional[str] = Field(None, description='Next Paginated page', title='next')
    previous: Optional[str] = Field(
        None, description='Previous paginated page', title='previous'
    )


class ApiImplantableDevicesGetResponse(BaseModel):
    data: Optional[List[ImplantableDevice]] = Field(
        None, description='result data', title='data'
    )
    next: Optional[str] = Field(None, description='Next Paginated page', title='next')
    previous: Optional[str] = Field(
        None, description='Previous paginated page', title='previous'
    )


class ApiInsurancesGetResponse(BaseModel):
    data: Optional[List[Insurance]] = Field(
        None, description='result data', title='data'
    )
    next: Optional[str] = Field(None, description='Next Paginated page', title='next')
    previous: Optional[str] = Field(
        None, description='Previous paginated page', title='previous'
    )


class ApiInventoryCategoriesGetResponse(BaseModel):
    data: Optional[List[InventoryCategory]] = Field(
        None, description='result data', title='data'
    )
    next: Optional[str] = Field(None, description='Next Paginated page', title='next')
    previous: Optional[str] = Field(
        None, description='Previous paginated page', title='previous'
    )


class ApiInventoryVaccinesGetResponse(BaseModel):
    data: Optional[List[InventoryVaccine]] = Field(
        None, description='result data', title='data'
    )
    next: Optional[str] = Field(None, description='Next Paginated page', title='next')
    previous: Optional[str] = Field(
        None, description='Previous paginated page', title='previous'
    )


class ApiLabDocumentsGetResponse(BaseModel):
    data: Optional[List[LabOrderDocument]] = Field(
        None, description='result data', title='data'
    )
    next: Optional[str] = Field(None, description='Next Paginated page', title='next')
    previous: Optional[str] = Field(
        None, description='Previous paginated page', title='previous'
    )


class ApiLabOrdersGetResponse(BaseModel):
    data: Optional[List[LabOrder]] = Field(
        None, description='result data', title='data'
    )
    next: Optional[str] = Field(None, description='Next Paginated page', title='next')
    previous: Optional[str] = Field(
        None, description='Previous paginated page', title='previous'
    )


class ApiLabOrdersSummaryGetResponse(BaseModel):
    data: Optional[List[LabOrder]] = Field(
        None, description='result data', title='data'
    )
    next: Optional[str] = Field(None, description='Next Paginated page', title='next')
    previous: Optional[str] = Field(
        None, description='Previous paginated page', title='previous'
    )


class ApiLabResultsGetResponse(BaseModel):
    data: Optional[List[LabResult]] = Field(
        None, description='result data', title='data'
    )
    next: Optional[str] = Field(None, description='Next Paginated page', title='next')
    previous: Optional[str] = Field(
        None, description='Previous paginated page', title='previous'
    )


class ApiLabTestsGetResponse(BaseModel):
    data: Optional[List[LabTest]] = Field(None, description='result data', title='data')
    next: Optional[str] = Field(None, description='Next Paginated page', title='next')
    previous: Optional[str] = Field(
        None, description='Previous paginated page', title='previous'
    )


class ApiLineItemsGetResponse(BaseModel):
    data: Optional[List[BillingLineItem]] = Field(
        None, description='result data', title='data'
    )
    next: Optional[str] = Field(None, description='Next Paginated page', title='next')
    previous: Optional[str] = Field(
        None, description='Previous paginated page', title='previous'
    )


class ApiMedicationsGetResponse(BaseModel):
    data: Optional[List[PatientDrug]] = Field(
        None, description='result data', title='data'
    )
    next: Optional[str] = Field(None, description='Next Paginated page', title='next')
    previous: Optional[str] = Field(
        None, description='Previous paginated page', title='previous'
    )


class ApiMessagesGetResponse(BaseModel):
    data: Optional[List[DoctorMessage]] = Field(
        None, description='result data', title='data'
    )
    next: Optional[str] = Field(None, description='Next Paginated page', title='next')
    previous: Optional[str] = Field(
        None, description='Previous paginated page', title='previous'
    )


class ApiOfficesGetResponse(BaseModel):
    data: Optional[List[Office]] = Field(None, description='result data', title='data')
    next: Optional[str] = Field(None, description='Next Paginated page', title='next')
    previous: Optional[str] = Field(
        None, description='Previous paginated page', title='previous'
    )


class ApiPatientCommunicationsGetResponse(BaseModel):
    data: Optional[List[PatientCommunication]] = Field(
        None, description='result data', title='data'
    )
    next: Optional[str] = Field(None, description='Next Paginated page', title='next')
    previous: Optional[str] = Field(
        None, description='Previous paginated page', title='previous'
    )


class ApiPatientFlagTypesGetResponse(BaseModel):
    data: Optional[List[PatientFlagType]] = Field(
        None, description='result data', title='data'
    )
    next: Optional[str] = Field(None, description='Next Paginated page', title='next')
    previous: Optional[str] = Field(
        None, description='Previous paginated page', title='previous'
    )


class ApiPatientInterventionsGetResponse(BaseModel):
    data: Optional[List[PatientIntervention]] = Field(
        None, description='result data', title='data'
    )
    next: Optional[str] = Field(None, description='Next Paginated page', title='next')
    previous: Optional[str] = Field(
        None, description='Previous paginated page', title='previous'
    )


class ApiPatientLabResultsGetResponse(BaseModel):
    data: Optional[List[PatientLabResultSet]] = Field(
        None, description='result data', title='data'
    )
    next: Optional[str] = Field(None, description='Next Paginated page', title='next')
    previous: Optional[str] = Field(
        None, description='Previous paginated page', title='previous'
    )


class ApiPatientMessagesGetResponse(BaseModel):
    data: Optional[List[PatientMessage]] = Field(
        None, description='result data', title='data'
    )
    next: Optional[str] = Field(None, description='Next Paginated page', title='next')
    previous: Optional[str] = Field(
        None, description='Previous paginated page', title='previous'
    )


class ApiPatientPaymentLogGetResponse(BaseModel):
    data: Optional[List[CashPaymentLog]] = Field(
        None, description='result data', title='data'
    )
    next: Optional[str] = Field(None, description='Next Paginated page', title='next')
    previous: Optional[str] = Field(
        None, description='Previous paginated page', title='previous'
    )


class ApiPatientPaymentsGetResponse(BaseModel):
    data: Optional[List[CashPayment]] = Field(
        None, description='result data', title='data'
    )
    next: Optional[str] = Field(None, description='Next Paginated page', title='next')
    previous: Optional[str] = Field(
        None, description='Previous paginated page', title='previous'
    )


class ApiPatientPhysicalExamsGetResponse(BaseModel):
    data: Optional[List[PatientPhysicalExam]] = Field(
        None, description='result data', title='data'
    )
    next: Optional[str] = Field(None, description='Next Paginated page', title='next')
    previous: Optional[str] = Field(
        None, description='Previous paginated page', title='previous'
    )


class ApiPatientRiskAssessmentsGetResponse(BaseModel):
    data: Optional[List[PatientRiskAssessment]] = Field(
        None, description='result data', title='data'
    )
    next: Optional[str] = Field(None, description='Next Paginated page', title='next')
    previous: Optional[str] = Field(
        None, description='Previous paginated page', title='previous'
    )


class ApiPatientVaccineRecordsGetResponse(BaseModel):
    data: Optional[List[PatientVaccineRecord]] = Field(
        None, description='result data', title='data'
    )
    next: Optional[str] = Field(None, description='Next Paginated page', title='next')
    previous: Optional[str] = Field(
        None, description='Previous paginated page', title='previous'
    )


class ApiPatientsGetResponse(BaseModel):
    data: Optional[List[Patient]] = Field(None, description='result data', title='data')
    next: Optional[str] = Field(None, description='Next Paginated page', title='next')
    previous: Optional[str] = Field(
        None, description='Previous paginated page', title='previous'
    )


class ApiPatientsIdCcdaGetResponse(BaseModel):
    pass


class ApiPatientsIdQrda1GetResponse(BaseModel):
    pass


class ApiPatientsSummaryGetResponse(BaseModel):
    data: Optional[List[Patient]] = Field(None, description='result data', title='data')
    next: Optional[str] = Field(None, description='Next Paginated page', title='next')
    previous: Optional[str] = Field(
        None, description='Previous paginated page', title='previous'
    )


class ApiPrescriptionMessagesGetResponse(BaseModel):
    data: Optional[List[PrescriptionMessage]] = Field(
        None, description='result data', title='data'
    )
    next: Optional[str] = Field(None, description='Next Paginated page', title='next')
    previous: Optional[str] = Field(
        None, description='Previous paginated page', title='previous'
    )


class ApiProblemsGetResponse(BaseModel):
    data: Optional[List[PatientProblem]] = Field(
        None, description='result data', title='data'
    )
    next: Optional[str] = Field(None, description='Next Paginated page', title='next')
    previous: Optional[str] = Field(
        None, description='Previous paginated page', title='previous'
    )


class ApiProceduresGetResponse(BaseModel):
    data: Optional[List[BillingLineItem]] = Field(
        None, description='result data', title='data'
    )
    next: Optional[str] = Field(None, description='Next Paginated page', title='next')
    previous: Optional[str] = Field(
        None, description='Previous paginated page', title='previous'
    )


class ApiReminderProfilesGetResponse(BaseModel):
    data: Optional[List[ReminderProfile]] = Field(
        None, description='result data', title='data'
    )
    next: Optional[str] = Field(None, description='Next Paginated page', title='next')
    previous: Optional[str] = Field(
        None, description='Previous paginated page', title='previous'
    )


class ApiSublabsGetResponse(BaseModel):
    data: Optional[List[LabVendorLocation]] = Field(
        None, description='result data', title='data'
    )
    next: Optional[str] = Field(None, description='Next Paginated page', title='next')
    previous: Optional[str] = Field(
        None, description='Previous paginated page', title='previous'
    )


class ApiTaskCategoriesGetResponse(BaseModel):
    data: Optional[List[TaskCategory]] = Field(
        None, description='result data', title='data'
    )
    next: Optional[str] = Field(None, description='Next Paginated page', title='next')
    previous: Optional[str] = Field(
        None, description='Previous paginated page', title='previous'
    )


class ApiTaskNotesGetResponse(BaseModel):
    data: Optional[List[TaskNote]] = Field(
        None, description='result data', title='data'
    )
    next: Optional[str] = Field(None, description='Next Paginated page', title='next')
    previous: Optional[str] = Field(
        None, description='Previous paginated page', title='previous'
    )


class ApiTaskStatusesGetResponse(BaseModel):
    data: Optional[List[TaskStatus]] = Field(
        None, description='result data', title='data'
    )
    next: Optional[str] = Field(None, description='Next Paginated page', title='next')
    previous: Optional[str] = Field(
        None, description='Previous paginated page', title='previous'
    )


class ApiTaskTemplatesGetResponse(BaseModel):
    data: Optional[List[TaskTemplate]] = Field(
        None, description='result data', title='data'
    )
    next: Optional[str] = Field(None, description='Next Paginated page', title='next')
    previous: Optional[str] = Field(
        None, description='Previous paginated page', title='previous'
    )


class ApiTasksGetResponse(BaseModel):
    data: Optional[List[Task]] = Field(None, description='result data', title='data')
    next: Optional[str] = Field(None, description='Next Paginated page', title='next')
    previous: Optional[str] = Field(
        None, description='Previous paginated page', title='previous'
    )


class ApiTransactionsGetResponse(BaseModel):
    data: Optional[List[LineItemTransaction]] = Field(
        None, description='result data', title='data'
    )
    next: Optional[str] = Field(None, description='Next Paginated page', title='next')
    previous: Optional[str] = Field(
        None, description='Previous paginated page', title='previous'
    )


class ApiUserGroupsGetResponse(BaseModel):
    data: Optional[List[UserProfilesGroup]] = Field(
        None, description='result data', title='data'
    )
    next: Optional[str] = Field(None, description='Next Paginated page', title='next')
    previous: Optional[str] = Field(
        None, description='Previous paginated page', title='previous'
    )


class ApiUsersGetResponse(BaseModel):
    data: Optional[List[UserProfile]] = Field(
        None, description='result data', title='data'
    )
    next: Optional[str] = Field(None, description='Next Paginated page', title='next')
    previous: Optional[str] = Field(
        None, description='Previous paginated page', title='previous'
    )
